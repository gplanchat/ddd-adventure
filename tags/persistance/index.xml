<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Persistance on DDD Adventure</title><link>http://localhost:1313/tags/persistance/</link><description>Recent content in Persistance on DDD Adventure</description><generator>Hugo</generator><language>fr-fr</language><lastBuildDate>Mon, 15 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/persistance/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapitre 28 : Stockage MongoDB - Approche Classique</title><link>http://localhost:1313/chapitres/stockage/mongodb/chapitre-28-stockage-mongodb-classique/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/chapitres/stockage/mongodb/chapitre-28-stockage-mongodb-classique/</guid><description>&lt;h2 id="-objectif-du-chapitrece-chapitre-explore-lutilisation-de-mongodb-pour-la-persistance-avec-une-approche-classique-en-mettant-laccent-sur-les-patterns-de-base-et-les-bonnes-pratiques-pour-les-applications-nosql--prérequis--chapitre-9--repositories-et-persistance---comprendre-les-patterns-de-persistance--chapitre-15--choix-du-type-de-stockage---comprendre-les-options-disponibles--connaissance-mongodb--bases-de-mongodb-et-des-concepts-nosql--architecture-mongodb-classique-vue-densemblelapproche-classique-avec-mongodb-utilise---collections--équivalent-des-tables-en-sql--documents--structure-json-flexible--indexes--optimisation-des-requêtes--repository-pattern--abstraction-de-la-persistance-diagramme-darchitecturemermaidgraph-tb----subgraph-couche-application--------sservice--------rrepository----end--------subgraph-couche-infrastructure--------mrmongodb-repository--------mcmongodb-client----end--------subgraph-couche-persistance--------dbmongodb--------idxindexes----end--------s----r----r----mr----mr----mc----mc----db----db----idx--implémentation-technique-1-configuration-mongodbphpphpnamespace-appaccountinginfrastructureconfigurationuse-mongodbclientuse-mongodbdatabaseclass-mongodbconfiguration----private-client-client----private-database-database--------public-function-__constructstring-connectionstring-string-databasename------------this-client--new-clientconnectionstring--------this-database--this-client-selectdatabasedatabasename------------public-function-getclient-client------------return-this-client------------public-function-getdatabase-database------------return-this-database------------public-function-getcollectionstring-name-mongodbcollection------------return-this-database-selectcollectionname-----2-repository-mongodb-de-basephpphpnamespace-appaccountinginfrastructurerepositoryuse-appaccountingdomainaggregatepaymentuse-appaccountingdomainvalueobjectpaymentiduse-appaccountingdomainrepositorypaymentrepositoryinterfaceuse-appaccountinginfrastructureconfigurationmongodbconfigurationuse-appaccountinginfrastructuremapperpaymentmapperclass-mongodbpaymentrepository-implements-paymentrepositoryinterface----private-mongodbcollection-collection--------public-function-__construct--------private-mongodbconfiguration-mongoconfig--------private-paymentmapper-mapper-------------this-collection--mongoconfig-getcollectionpayments------------public-function-savepayment-payment-void------------document--this-mapper-todocumentpayment----------------this-collection-replaceone------------_id--payment-getid-getvalue------------document------------upsert--true--------------------public-function-findpaymentid-id-payment------------document--this-collection-findone_id--id-getvalue----------------if-document-------------return-null------------------------return-this-mapper-todomaindocument------------public-function-findall-array------------documents--this-collection-find----------------return-array_map------------fndoc--this-mapper-todomaindoc------------documents-toarray--------------------public-function-findbystatusstring-status-array------------documents--this-collection-findstatus--status----------------return-array_map------------fndoc--this-mapper-todomaindoc------------documents-toarray-------------3-mapper-pour-la-conversionphpphpnamespace-appaccountinginfrastructuremapperuse-appaccountingdomainaggregatepaymentuse-appaccountingdomainvalueobjectpaymentiduse-appaccountingdomainvalueobjectamountuse-appaccountingdomainvalueobjectcurrencyclass-paymentmapper----public-function-todocumentpayment-payment-array------------return-------------_id--payment-getid-getvalue------------amount--payment-getamount-getvalue------------currency--payment-getcurrency-getcode------------status--payment-getstatus-getvalue------------created_at--payment-getcreatedat-formaty-m-d-his------------updated_at--payment-getupdatedat-formaty-m-d-his------------metadata--payment-getmetadata-toarray--------------------public-function-todomainarray-document-payment------------return-paymentfromarray------------id--document_id------------amount--documentamount------------currency--documentcurrency------------status--documentstatus------------created_at--documentcreated_at------------updated_at--documentupdated_at------------metadata--documentmetadata----------------patterns-dimplémentation-1-repository-avec-requêtes-complexesphpphpnamespace-appaccountinginfrastructurerepositoryuse-appaccountingdomainvalueobjectpaymentiduse-appaccountingdomainvalueobjectamountuse-appaccountingdomainvalueobjectcurrencyuse-mongodbbsonobjectidclass-advancedmongodbpaymentrepository----private-mongodbcollection-collection--------public-function-__construct--------private-mongodbconfiguration-mongoconfig--------private-paymentmapper-mapper-------------this-collection--mongoconfig-getcollectionpayments------------public-function-findbyamountrangeamount-minamount-amount-maxamount-array------------documents--this-collection-find------------amount------------------gte--minamount-getvalue----------------lte--maxamount-getvalue------------------------------------return-array_map------------fndoc--this-mapper-todomaindoc------------documents-toarray--------------------public-function-findbycurrencycurrency-currency-array------------documents--this-collection-find------------currency--currency-getcode------------------------return-array_map------------fndoc--this-mapper-todomaindoc------------documents-toarray--------------------public-function-findrecentint-days--7-array------------startdate--new-datetimeimmutable-days-days----------------documents--this-collection-find------------created_at------------------gte--startdate-formaty-m-d-his------------------------------------return-array_map------------fndoc--this-mapper-todomaindoc------------documents-toarray--------------------public-function-aggregatebystatus-array------------pipeline------------------------------group----------------------_id--status--------------------count--sum--1--------------------total_amount--sum--amount--------------------------------------------------------sort--count---1------------------------------------result--this-collection-aggregatepipeline----------------return-result-toarray-----2-gestion-des-indexesphpphpnamespace-appaccountinginfrastructureindexuse-appaccountinginfrastructureconfigurationmongodbconfigurationclass-paymentindexmanager----private-mongodbcollection-collection--------public-function-__constructmongodbconfiguration-mongoconfig------------this-collection--mongoconfig-getcollectionpayments------------public-function-createindexes-void-------------index-simple-sur-le-statut--------this-collection-createindexstatus--1-----------------index-composé-sur-la-devise-et-le-montant--------this-collection-createindex------------currency--1------------amount--1-------------------------index-sur-la-date-de-création--------this-collection-createindexcreated_at--1-----------------index-de-texte-pour-la-recherche--------this-collection-createindex------------metadatadescription--text------------metadatanotes--text-------------------------index-ttl-pour-lexpiration-automatique--------this-collection-createindex------------expires_at--1------------expireafterseconds--0--------------------public-function-getindexes-array------------return-this-collection-listindexes-toarray-----3-gestion-des-transactionsphpphpnamespace-appaccountinginfrastructuretransactionuse-appaccountingdomainaggregatepaymentuse-appaccountingdomainaggregatesubscriptionuse-appaccountinginfrastructureconfigurationmongodbconfigurationclass-mongodbtransactionmanager----private-mongodbdatabase-database--------public-function-__constructmongodbconfiguration-mongoconfig------------this-database--mongoconfig-getdatabase------------public-function-executeintransactioncallable-callback-mixed------------session--this-database-getclient-startsession----------------try-------------session-starttransaction------------------------result--callbacksession------------------------session-committransaction------------------------return-result---------catch-exception-e-------------session-aborttransaction------------throw-e---------finally-------------session-endsession--------------------public-function-processpaymentwithsubscription--------payment-payment--------subscription-subscription-----void---------this-executeintransactionfunction-session-use-payment-subscription--------------sauvegarder-le-paiement------------paymentcollection--this-database-selectcollectionpayments------------paymentcollection-replaceone----------------_id--payment-getid-getvalue----------------this-paymentmapper-todocumentpayment----------------upsert--true-session--session-------------------------------------mettre-à-jour-labonnement------------subscriptioncollection--this-database-selectcollectionsubscriptions------------subscriptioncollection-replaceone----------------_id--subscription-getid-getvalue----------------this-subscriptionmapper-todocumentsubscription----------------upsert--true-session--session--------------------------gestion-des-erreurs-et-résilience-1-gestion-des-erreurs-mongodbphpphpnamespace-appaccountinginfrastructureerroruse-mongodbexceptionexceptioninterfaceuse-mongodbexceptionwriteexceptionuse-mongodbexceptionconnectionexceptionuse-psrlogloggerinterfaceclass-mongodberrorhandler----public-function-__construct--------private-loggerinterface-logger-------------public-function-handleexceptionexceptioninterface-e-void------------if-e-instanceof-writeexception-------------this-handlewriteexceptione---------elseif-e-instanceof-connectionexception-------------this-handleconnectionexceptione---------else-------------this-handlegenericexceptione--------------------private-function-handlewriteexceptionwriteexception-e-void------------this-logger-errormongodb-write-error-------------error--e-getmessage------------code--e-getcode------------write_errors--e-getwriteresult-getwriteerrors-------------------------logique-de-retry-ou-de-fallback--------throw-new-runtimeexceptionfailed-to-write-to-mongodb-0-e------------private-function-handleconnectionexceptionconnectionexception-e-void------------this-logger-errormongodb-connection-error-------------error--e-getmessage------------code--e-getcode-------------------------logique-de-reconnexion--------throw-new-runtimeexceptionmongodb-connection-failed-0-e-----2-retry-patternphpphpnamespace-appaccountinginfrastructureretryuse-mongodbexceptionexceptioninterfaceuse-mongodbexceptionwriteexceptionclass-mongodbretryhandler----private-int-maxretries----private-int-basedelay--------public-function-__constructint-maxretries--3-int-basedelay--1000------------this-maxretries--maxretries--------this-basedelay--basedelay------------public-function-executewithretrycallable-operation-mixed------------attempt--0--------lastexception--null----------------while-attempt--this-maxretries-------------try-----------------return-operation-------------catch-writeexception-e-----------------lastexception--e--------------------------------if-this-shouldretrye---------------------attempt--------------------delay--this-calculatedelayattempt--------------------usleepdelay--1000-----------------else---------------------throw-e-----------------------------catch-exceptioninterface-e-----------------throw-e------------------------------------throw-lastexception------------private-function-shouldretrywriteexception-e-bool------------writeerrors--e-getwriteresult-getwriteerrors----------------foreach-writeerrors-as-error--------------retry-sur-les-erreurs-temporaires------------if-in_arrayerrorcode-11000-11001-112-----------------return-true------------------------------------return-false------------private-function-calculatedelayint-attempt-int------------return-this-basedelay--pow2-attempt---1------monitoring-et-observabilité-1-métriques-mongodbphpphpnamespace-appaccountinginfrastructuremonitoringuse-appaccountinginfrastructureconfigurationmongodbconfigurationuse-appaccountinginfrastructuremetricsprometheusmetricsclass-mongodbmetricscollector----public-function-__construct--------private-mongodbconfiguration-mongoconfig--------private-prometheusmetrics-metrics-------------public-function-collectmetrics-void------------stats--this-mongoconfig-getdatabase-commanddbstats--1-toarray0-----------------métriques-de-base--------this-metrics-setgaugemongodb_database_size_bytes-statsdatasize--------this-metrics-setgaugemongodb_index_size_bytes-statsindexsize--------this-metrics-setgaugemongodb_collections_total-statscollections--------this-metrics-setgaugemongodb_indexes_total-statsindexes-----------------métriques-de-performance--------this-metrics-setgaugemongodb_operations_total-statsopcountersinsert--statsopcountersquery--------this-metrics-setgaugemongodb_connections_current-statsconnectionscurrent------------public-function-recordoperationstring-operation-float-duration-bool-success-void------------this-metrics-incrementcountermongodb_operations_total-------------operation--operation------------status--success--success--error------------------------this-metrics-recordhistogrammongodb_operation_duration-duration-------------operation--operation-------------2-health-checkphpphpnamespace-appaccountinginfrastructurehealthuse-appaccountinginfrastructureconfigurationmongodbconfigurationclass-mongodbhealthcheck----public-function-__construct--------private-mongodbconfiguration-mongoconfig-------------public-function-check-array------------try--------------test-de-connexion------------this-mongoconfig-getdatabase-commandping--1-------------------------test-de-lecture------------this-mongoconfig-getcollectionpayments-findone------------------------return-----------------status--healthy----------------database--connected----------------read--working----------------write--working---------------------catch-exception-e-------------return-----------------status--unhealthy----------------error--e-getmessage----------------database--disconnected--------------------------avantages-de-lapproche-1-flexibilité-du-schéma--documents-flexibles--structure-json-adaptable--évolution-facile--pas-de-migrations-de-schéma--données-hétérogènes--support-des-données-variées-2-performance--indexes-optimisés--requêtes-rapides--sharding--distribution-horizontale--cache-intégré--performance-mémoire-3-développement--api-simple--interface-intuitive--requêtes-puissantes--aggregation-pipeline--intégration-facile--drivers-multiples--inconvénients-et-considérations-1-consistance--acid-limité--pas-de-transactions-complexes--consistance-éventuelle--dans-les-clusters--pas-de-contraintes--validation-applicative-2-requêtes--pas-de-joins--relations-manuelles--requêtes-complexes--aggregation-pipeline--performance--indexes-critiques-3-maintenance--monitoring--outils-spécialisés--backup--stratégies-spécifiques--scaling--configuration-complexe--configuration-et-déploiement-1-configuration-des-servicesyaml-configpackagesmongodbyamlmongodb--connections----default------uri-envmongodb_uri------database-envmongodb_database------options--------connecttimeoutms-30000--------sockettimeoutms-30000--------serverselectiontimeoutms-30000--------maxpoolsize-10--------minpoolsize-1-2-déploiement-avec-dockeryaml-docker-composeymlversion-38services--mongodb----image-mongo60----container_name-gyroscops-cloud-mongodb----restart-unless-stopped----ports--------2701727017----environment------mongo_initdb_root_username-admin------mongo_initdb_root_password-password------mongo_initdb_database-hive_accounting----volumes--------mongodb_datadatadb--------mongodbinitdocker-entrypoint-initdbd----networks--------gyroscops-cloud-networkvolumes--mongodb_datanetworks--gyroscops-cloud-network----driver-bridge--exemples-concrets-du-projet-gyroscops-cloud-1-repository-de-paiementsphpphpnamespace-appaccountinginfrastructurerepositoryuse-appaccountingdomainaggregatepaymentuse-appaccountingdomainvalueobjectpaymentiduse-appaccountinginfrastructureconfigurationmongodbconfigurationclass-hivepaymentrepository----private-mongodbcollection-collection--------public-function-__constructmongodbconfiguration-mongoconfig------------this-collection--mongoconfig-getcollectionpayments------------public-function-savepayment-payment-void------------document--------------_id--payment-getid-getvalue------------amount--payment-getamount-getvalue------------currency--payment-getcurrency-getcode------------status--payment-getstatus-getvalue------------workspace_id--payment-getworkspaceid-getvalue------------organization_id--payment-getorganizationid-getvalue------------created_at--payment-getcreatedat-formaty-m-d-his------------updated_at--payment-getupdatedat-formaty-m-d-his------------metadata--payment-getmetadata-toarray------------------------this-collection-replaceone------------_id--payment-getid-getvalue------------document------------upsert--true--------------------public-function-findbyworkspacestring-workspaceid-array------------documents--this-collection-find------------workspace_id--workspaceid------------------------return-array_map------------fndoc--this-maptopaymentdoc------------documents-toarray-------------2-aggregation-pour-les-rapportsphpphpnamespace-appaccountinginfrastructurereportuse-appaccountinginfrastructureconfigurationmongodbconfigurationclass-paymentreportgenerator----private-mongodbcollection-collection--------public-function-__constructmongodbconfiguration-mongoconfig------------this-collection--mongoconfig-getcollectionpayments------------public-function-generatemonthlyreportstring-workspaceid-int-year-int-month-array------------startdate--new-datetimeimmutableyear-month-01--------enddate--startdate-modify1-month----------------pipeline------------------------------match----------------------workspace_id--workspaceid--------------------created_at--------------------------gte--startdate-formaty-m-d-his------------------------lt--enddate-formaty-m-d-his----------------------------------------------------------------------------group----------------------_id--------------------------status--status------------------------currency--currency----------------------------------------count--sum--1--------------------total_amount--sum--amount--------------------avg_amount--avg--amount--------------------------------------------------------sort--total_amount---1------------------------------------return-this-collection-aggregatepipeline-toarray------critères-dadoption--adoptez-cette-approche-si---données-non-relationnelles-avec-structure-flexible--performance-de-lecture-importante--évolutivité-horizontale-requise--équipe-expérimentée-avec-nosql--requêtes-complexes-avec-aggregation--flexibilité-du-schéma-nécessaire--évitez-cette-approche-si---données-relationnelles-strictes--transactions-acid-critiques--équipe-junior-sans-expérience-nosql--requêtes-simples-avec-joins--contraintes-de-schéma-importantes--métriques-de-succès-1-performance--temps-de-réponse-des-requêtes--50ms--throughput-des-opérations--10000min--disponibilité--999-2-qualité--couverture-de-tests--90--taux-d--01--temps-de-récupération--2-minutes-3-business--satisfaction-utilisateur--455--temps-de-développement-des-nouvelles-fonctionnalités--coût-de-maintenance-acceptable--votre-prochaine-étapemaintenant-que-vous-comprenez-lapproche-classique-avec-mongodb-quel-est-votre-contexte-hahahugoshortcode51s0hbhb"&gt;🎯 Objectif du ChapitreCe chapitre explore l&amp;rsquo;utilisation de MongoDB pour la persistance avec une approche classique, en mettant l&amp;rsquo;accent sur les patterns de base et les bonnes pratiques pour les applications NoSQL.## 📋 Prérequis- &lt;strong&gt;Chapitre 9&lt;/strong&gt; : Repositories et Persistance - Comprendre les patterns de persistance- &lt;strong&gt;Chapitre 15&lt;/strong&gt; : Choix du Type de Stockage - Comprendre les options disponibles- &lt;strong&gt;Connaissance MongoDB&lt;/strong&gt; : Bases de MongoDB et des concepts NoSQL## 🏗️ Architecture MongoDB Classique### Vue d&amp;rsquo;EnsembleL&amp;rsquo;approche classique avec MongoDB utilise :- &lt;strong&gt;Collections&lt;/strong&gt; : Équivalent des tables en SQL- &lt;strong&gt;Documents&lt;/strong&gt; : Structure JSON flexible- &lt;strong&gt;Indexes&lt;/strong&gt; : Optimisation des requêtes- &lt;strong&gt;Repository Pattern&lt;/strong&gt; : Abstraction de la persistance### Diagramme d&amp;rsquo;Architecture&lt;code&gt;mermaidgraph TB subgraph &amp;quot;Couche Application&amp;quot; S[Service] R[Repository] end subgraph &amp;quot;Couche Infrastructure&amp;quot; MR[MongoDB Repository] MC[MongoDB Client] end subgraph &amp;quot;Couche Persistance&amp;quot; DB[(MongoDB)] IDX[(Indexes)] end S --&amp;gt; R R --&amp;gt; MR MR --&amp;gt; MC MC --&amp;gt; DB DB --&amp;gt; IDX&lt;/code&gt;## 🔧 Implémentation Technique### 1. Configuration MongoDB&lt;code&gt;php&amp;lt;?phpnamespace App\Accounting\Infrastructure\Configuration;use MongoDB\Client;use MongoDB\Database;class MongoDBConfiguration{ private Client $client; private Database $database; public function __construct(string $connectionString, string $databaseName) { $this-&amp;gt;client = new Client($connectionString); $this-&amp;gt;database = $this-&amp;gt;client-&amp;gt;selectDatabase($databaseName); } public function getClient(): Client { return $this-&amp;gt;client; } public function getDatabase(): Database { return $this-&amp;gt;database; } public function getCollection(string $name): \MongoDB\Collection { return $this-&amp;gt;database-&amp;gt;selectCollection($name); }}&lt;/code&gt;### 2. Repository MongoDB de Base&lt;code&gt;php&amp;lt;?phpnamespace App\Accounting\Infrastructure\Repository;use App\Accounting\Domain\Aggregate\Payment;use App\Accounting\Domain\ValueObject\PaymentId;use App\Accounting\Domain\Repository\PaymentRepositoryInterface;use App\Accounting\Infrastructure\Configuration\MongoDBConfiguration;use App\Accounting\Infrastructure\Mapper\PaymentMapper;class MongoDBPaymentRepository implements PaymentRepositoryInterface{ private \MongoDB\Collection $collection; public function __construct( private MongoDBConfiguration $mongoConfig, private PaymentMapper $mapper ) { $this-&amp;gt;collection = $mongoConfig-&amp;gt;getCollection('payments'); } public function save(Payment $payment): void { $document = $this-&amp;gt;mapper-&amp;gt;toDocument($payment); $this-&amp;gt;collection-&amp;gt;replaceOne( ['_id' =&amp;gt; $payment-&amp;gt;getId()-&amp;gt;getValue()], $document, ['upsert' =&amp;gt; true] ); } public function find(PaymentId $id): ?Payment { $document = $this-&amp;gt;collection-&amp;gt;findOne(['_id' =&amp;gt; $id-&amp;gt;getValue()]); if (!$document) { return null; } return $this-&amp;gt;mapper-&amp;gt;toDomain($document); } public function findAll(): array { $documents = $this-&amp;gt;collection-&amp;gt;find(); return array_map( fn($doc) =&amp;gt; $this-&amp;gt;mapper-&amp;gt;toDomain($doc), $documents-&amp;gt;toArray() ); } public function findByStatus(string $status): array { $documents = $this-&amp;gt;collection-&amp;gt;find(['status' =&amp;gt; $status]); return array_map( fn($doc) =&amp;gt; $this-&amp;gt;mapper-&amp;gt;toDomain($doc), $documents-&amp;gt;toArray() ); }}&lt;/code&gt;### 3. Mapper pour la Conversion&lt;code&gt;php&amp;lt;?phpnamespace App\Accounting\Infrastructure\Mapper;use App\Accounting\Domain\Aggregate\Payment;use App\Accounting\Domain\ValueObject\PaymentId;use App\Accounting\Domain\ValueObject\Amount;use App\Accounting\Domain\ValueObject\Currency;class PaymentMapper{ public function toDocument(Payment $payment): array { return [ '_id' =&amp;gt; $payment-&amp;gt;getId()-&amp;gt;getValue(), 'amount' =&amp;gt; $payment-&amp;gt;getAmount()-&amp;gt;getValue(), 'currency' =&amp;gt; $payment-&amp;gt;getCurrency()-&amp;gt;getCode(), 'status' =&amp;gt; $payment-&amp;gt;getStatus()-&amp;gt;getValue(), 'created_at' =&amp;gt; $payment-&amp;gt;getCreatedAt()-&amp;gt;format('Y-m-d H:i:s'), 'updated_at' =&amp;gt; $payment-&amp;gt;getUpdatedAt()-&amp;gt;format('Y-m-d H:i:s'), 'metadata' =&amp;gt; $payment-&amp;gt;getMetadata()-&amp;gt;toArray() ]; } public function toDomain(array $document): Payment { return Payment::fromArray([ 'id' =&amp;gt; $document['_id'], 'amount' =&amp;gt; $document['amount'], 'currency' =&amp;gt; $document['currency'], 'status' =&amp;gt; $document['status'], 'created_at' =&amp;gt; $document['created_at'], 'updated_at' =&amp;gt; $document['updated_at'], 'metadata' =&amp;gt; $document['metadata'] ?? [] ]); }}&lt;/code&gt;## 🎨 Patterns d&amp;rsquo;Implémentation### 1. Repository avec Requêtes Complexes&lt;code&gt;php&amp;lt;?phpnamespace App\Accounting\Infrastructure\Repository;use App\Accounting\Domain\ValueObject\PaymentId;use App\Accounting\Domain\ValueObject\Amount;use App\Accounting\Domain\ValueObject\Currency;use MongoDB\BSON\ObjectId;class AdvancedMongoDBPaymentRepository{ private \MongoDB\Collection $collection; public function __construct( private MongoDBConfiguration $mongoConfig, private PaymentMapper $mapper ) { $this-&amp;gt;collection = $mongoConfig-&amp;gt;getCollection('payments'); } public function findByAmountRange(Amount $minAmount, Amount $maxAmount): array { $documents = $this-&amp;gt;collection-&amp;gt;find([ 'amount' =&amp;gt; [ '$gte' =&amp;gt; $minAmount-&amp;gt;getValue(), '$lte' =&amp;gt; $maxAmount-&amp;gt;getValue() ] ]); return array_map( fn($doc) =&amp;gt; $this-&amp;gt;mapper-&amp;gt;toDomain($doc), $documents-&amp;gt;toArray() ); } public function findByCurrency(Currency $currency): array { $documents = $this-&amp;gt;collection-&amp;gt;find([ 'currency' =&amp;gt; $currency-&amp;gt;getCode() ]); return array_map( fn($doc) =&amp;gt; $this-&amp;gt;mapper-&amp;gt;toDomain($doc), $documents-&amp;gt;toArray() ); } public function findRecent(int $days = 7): array { $startDate = new \DateTimeImmutable(&amp;quot;-{$days} days&amp;quot;); $documents = $this-&amp;gt;collection-&amp;gt;find([ 'created_at' =&amp;gt; [ '$gte' =&amp;gt; $startDate-&amp;gt;format('Y-m-d H:i:s') ] ]); return array_map( fn($doc) =&amp;gt; $this-&amp;gt;mapper-&amp;gt;toDomain($doc), $documents-&amp;gt;toArray() ); } public function aggregateByStatus(): array { $pipeline = [ [ '$group' =&amp;gt; [ '_id' =&amp;gt; '$status', 'count' =&amp;gt; ['$sum' =&amp;gt; 1], 'total_amount' =&amp;gt; ['$sum' =&amp;gt; '$amount'] ] ], [ '$sort' =&amp;gt; ['count' =&amp;gt; -1] ] ]; $result = $this-&amp;gt;collection-&amp;gt;aggregate($pipeline); return $result-&amp;gt;toArray(); }}&lt;/code&gt;### 2. Gestion des Indexes&lt;code&gt;php&amp;lt;?phpnamespace App\Accounting\Infrastructure\Index;use App\Accounting\Infrastructure\Configuration\MongoDBConfiguration;class PaymentIndexManager{ private \MongoDB\Collection $collection; public function __construct(MongoDBConfiguration $mongoConfig) { $this-&amp;gt;collection = $mongoConfig-&amp;gt;getCollection('payments'); } public function createIndexes(): void { // Index simple sur le statut $this-&amp;gt;collection-&amp;gt;createIndex(['status' =&amp;gt; 1]); // Index composé sur la devise et le montant $this-&amp;gt;collection-&amp;gt;createIndex([ 'currency' =&amp;gt; 1, 'amount' =&amp;gt; 1 ]); // Index sur la date de création $this-&amp;gt;collection-&amp;gt;createIndex(['created_at' =&amp;gt; 1]); // Index de texte pour la recherche $this-&amp;gt;collection-&amp;gt;createIndex([ 'metadata.description' =&amp;gt; 'text', 'metadata.notes' =&amp;gt; 'text' ]); // Index TTL pour l'expiration automatique $this-&amp;gt;collection-&amp;gt;createIndex( ['expires_at' =&amp;gt; 1], ['expireAfterSeconds' =&amp;gt; 0] ); } public function getIndexes(): array { return $this-&amp;gt;collection-&amp;gt;listIndexes()-&amp;gt;toArray(); }}&lt;/code&gt;### 3. Gestion des Transactions&lt;code&gt;php&amp;lt;?phpnamespace App\Accounting\Infrastructure\Transaction;use App\Accounting\Domain\Aggregate\Payment;use App\Accounting\Domain\Aggregate\Subscription;use App\Accounting\Infrastructure\Configuration\MongoDBConfiguration;class MongoDBTransactionManager{ private \MongoDB\Database $database; public function __construct(MongoDBConfiguration $mongoConfig) { $this-&amp;gt;database = $mongoConfig-&amp;gt;getDatabase(); } public function executeInTransaction(callable $callback): mixed { $session = $this-&amp;gt;database-&amp;gt;getClient()-&amp;gt;startSession(); try { $session-&amp;gt;startTransaction(); $result = $callback($session); $session-&amp;gt;commitTransaction(); return $result; } catch (\Exception $e) { $session-&amp;gt;abortTransaction(); throw $e; } finally { $session-&amp;gt;endSession(); } } public function processPaymentWithSubscription( Payment $payment, Subscription $subscription ): void { $this-&amp;gt;executeInTransaction(function ($session) use ($payment, $subscription) { // Sauvegarder le paiement $paymentCollection = $this-&amp;gt;database-&amp;gt;selectCollection('payments'); $paymentCollection-&amp;gt;replaceOne( ['_id' =&amp;gt; $payment-&amp;gt;getId()-&amp;gt;getValue()], $this-&amp;gt;paymentMapper-&amp;gt;toDocument($payment), ['upsert' =&amp;gt; true, 'session' =&amp;gt; $session] ); // Mettre à jour l'abonnement $subscriptionCollection = $this-&amp;gt;database-&amp;gt;selectCollection('subscriptions'); $subscriptionCollection-&amp;gt;replaceOne( ['_id' =&amp;gt; $subscription-&amp;gt;getId()-&amp;gt;getValue()], $this-&amp;gt;subscriptionMapper-&amp;gt;toDocument($subscription), ['upsert' =&amp;gt; true, 'session' =&amp;gt; $session] ); }); }}&lt;/code&gt;## 🔄 Gestion des Erreurs et Résilience### 1. Gestion des Erreurs MongoDB&lt;code&gt;php&amp;lt;?phpnamespace App\Accounting\Infrastructure\Error;use MongoDB\Exception\ExceptionInterface;use MongoDB\Exception\WriteException;use MongoDB\Exception\ConnectionException;use Psr\Log\LoggerInterface;class MongoDBErrorHandler{ public function __construct( private LoggerInterface $logger ) {} public function handleException(ExceptionInterface $e): void { if ($e instanceof WriteException) { $this-&amp;gt;handleWriteException($e); } elseif ($e instanceof ConnectionException) { $this-&amp;gt;handleConnectionException($e); } else { $this-&amp;gt;handleGenericException($e); } } private function handleWriteException(WriteException $e): void { $this-&amp;gt;logger-&amp;gt;error('MongoDB Write Error', [ 'error' =&amp;gt; $e-&amp;gt;getMessage(), 'code' =&amp;gt; $e-&amp;gt;getCode(), 'write_errors' =&amp;gt; $e-&amp;gt;getWriteResult()-&amp;gt;getWriteErrors() ]); // Logique de retry ou de fallback throw new \RuntimeException('Failed to write to MongoDB', 0, $e); } private function handleConnectionException(ConnectionException $e): void { $this-&amp;gt;logger-&amp;gt;error('MongoDB Connection Error', [ 'error' =&amp;gt; $e-&amp;gt;getMessage(), 'code' =&amp;gt; $e-&amp;gt;getCode() ]); // Logique de reconnexion throw new \RuntimeException('MongoDB connection failed', 0, $e); }}&lt;/code&gt;### 2. Retry Pattern&lt;code&gt;php&amp;lt;?phpnamespace App\Accounting\Infrastructure\Retry;use MongoDB\Exception\ExceptionInterface;use MongoDB\Exception\WriteException;class MongoDBRetryHandler{ private int $maxRetries; private int $baseDelay; public function __construct(int $maxRetries = 3, int $baseDelay = 1000) { $this-&amp;gt;maxRetries = $maxRetries; $this-&amp;gt;baseDelay = $baseDelay; } public function executeWithRetry(callable $operation): mixed { $attempt = 0; $lastException = null; while ($attempt &amp;lt; $this-&amp;gt;maxRetries) { try { return $operation(); } catch (WriteException $e) { $lastException = $e; if ($this-&amp;gt;shouldRetry($e)) { $attempt++; $delay = $this-&amp;gt;calculateDelay($attempt); usleep($delay * 1000); } else { throw $e; } } catch (ExceptionInterface $e) { throw $e; } } throw $lastException; } private function shouldRetry(WriteException $e): bool { $writeErrors = $e-&amp;gt;getWriteResult()-&amp;gt;getWriteErrors(); foreach ($writeErrors as $error) { // Retry sur les erreurs temporaires if (in_array($error['code'], [11000, 11001, 112])) { return true; } } return false; } private function calculateDelay(int $attempt): int { return $this-&amp;gt;baseDelay * pow(2, $attempt - 1); }}&lt;/code&gt;## 📊 Monitoring et Observabilité### 1. Métriques MongoDB&lt;code&gt;php&amp;lt;?phpnamespace App\Accounting\Infrastructure\Monitoring;use App\Accounting\Infrastructure\Configuration\MongoDBConfiguration;use App\Accounting\Infrastructure\Metrics\PrometheusMetrics;class MongoDBMetricsCollector{ public function __construct( private MongoDBConfiguration $mongoConfig, private PrometheusMetrics $metrics ) {} public function collectMetrics(): void { $stats = $this-&amp;gt;mongoConfig-&amp;gt;getDatabase()-&amp;gt;command(['dbStats' =&amp;gt; 1])-&amp;gt;toArray()[0]; // Métriques de base $this-&amp;gt;metrics-&amp;gt;setGauge('mongodb_database_size_bytes', $stats['dataSize']); $this-&amp;gt;metrics-&amp;gt;setGauge('mongodb_index_size_bytes', $stats['indexSize']); $this-&amp;gt;metrics-&amp;gt;setGauge('mongodb_collections_total', $stats['collections']); $this-&amp;gt;metrics-&amp;gt;setGauge('mongodb_indexes_total', $stats['indexes']); // Métriques de performance $this-&amp;gt;metrics-&amp;gt;setGauge('mongodb_operations_total', $stats['opcounters']['insert'] + $stats['opcounters']['query']); $this-&amp;gt;metrics-&amp;gt;setGauge('mongodb_connections_current', $stats['connections']['current']); } public function recordOperation(string $operation, float $duration, bool $success): void { $this-&amp;gt;metrics-&amp;gt;incrementCounter('mongodb_operations_total', [ 'operation' =&amp;gt; $operation, 'status' =&amp;gt; $success ? 'success' : 'error' ]); $this-&amp;gt;metrics-&amp;gt;recordHistogram('mongodb_operation_duration', $duration, [ 'operation' =&amp;gt; $operation ]); }}&lt;/code&gt;### 2. Health Check&lt;code&gt;php&amp;lt;?phpnamespace App\Accounting\Infrastructure\Health;use App\Accounting\Infrastructure\Configuration\MongoDBConfiguration;class MongoDBHealthCheck{ public function __construct( private MongoDBConfiguration $mongoConfig ) {} public function check(): array { try { // Test de connexion $this-&amp;gt;mongoConfig-&amp;gt;getDatabase()-&amp;gt;command(['ping' =&amp;gt; 1]); // Test de lecture $this-&amp;gt;mongoConfig-&amp;gt;getCollection('payments')-&amp;gt;findOne(); return [ 'status' =&amp;gt; 'healthy', 'database' =&amp;gt; 'connected', 'read' =&amp;gt; 'working', 'write' =&amp;gt; 'working' ]; } catch (\Exception $e) { return [ 'status' =&amp;gt; 'unhealthy', 'error' =&amp;gt; $e-&amp;gt;getMessage(), 'database' =&amp;gt; 'disconnected' ]; } }}&lt;/code&gt;## 🎯 Avantages de l&amp;rsquo;Approche### 1. Flexibilité du Schéma- &lt;strong&gt;Documents flexibles&lt;/strong&gt; : Structure JSON adaptable- &lt;strong&gt;Évolution facile&lt;/strong&gt; : Pas de migrations de schéma- &lt;strong&gt;Données hétérogènes&lt;/strong&gt; : Support des données variées### 2. Performance- &lt;strong&gt;Indexes optimisés&lt;/strong&gt; : Requêtes rapides- &lt;strong&gt;Sharding&lt;/strong&gt; : Distribution horizontale- &lt;strong&gt;Cache intégré&lt;/strong&gt; : Performance mémoire### 3. Développement- &lt;strong&gt;API simple&lt;/strong&gt; : Interface intuitive- &lt;strong&gt;Requêtes puissantes&lt;/strong&gt; : Aggregation pipeline- &lt;strong&gt;Intégration facile&lt;/strong&gt; : Drivers multiples## ⚠️ Inconvénients et Considérations### 1. Consistance- &lt;strong&gt;ACID limité&lt;/strong&gt; : Pas de transactions complexes- &lt;strong&gt;Consistance éventuelle&lt;/strong&gt; : Dans les clusters- &lt;strong&gt;Pas de contraintes&lt;/strong&gt; : Validation applicative### 2. Requêtes- &lt;strong&gt;Pas de JOINs&lt;/strong&gt; : Relations manuelles- &lt;strong&gt;Requêtes complexes&lt;/strong&gt; : Aggregation pipeline- &lt;strong&gt;Performance&lt;/strong&gt; : Indexes critiques### 3. Maintenance- &lt;strong&gt;Monitoring&lt;/strong&gt; : Outils spécialisés- &lt;strong&gt;Backup&lt;/strong&gt; : Stratégies spécifiques- &lt;strong&gt;Scaling&lt;/strong&gt; : Configuration complexe## 🔧 Configuration et Déploiement### 1. Configuration des Services&lt;code&gt;yaml# config/packages/mongodb.yamlmongodb: connections: default: uri: '%env(MONGODB_URI)%' database: '%env(MONGODB_DATABASE)%' options: connectTimeoutMS: 30000 socketTimeoutMS: 30000 serverSelectionTimeoutMS: 30000 maxPoolSize: 10 minPoolSize: 1&lt;/code&gt;### 2. Déploiement avec Docker&lt;code&gt;yaml# docker-compose.ymlversion: '3.8'services: mongodb: image: mongo:6.0 container_name: Gyroscops Cloud-mongodb restart: unless-stopped ports: - &amp;quot;27017:27017&amp;quot; environment: MONGO_INITDB_ROOT_USERNAME: admin MONGO_INITDB_ROOT_PASSWORD: password MONGO_INITDB_DATABASE: hive_accounting volumes: - mongodb_data:/data/db - ./mongodb/init:/docker-entrypoint-initdb.d networks: - Gyroscops Cloud-networkvolumes: mongodb_data:networks: Gyroscops Cloud-network: driver: bridge&lt;/code&gt;## 📚 Exemples Concrets du projet Gyroscops Cloud### 1. Repository de Paiements&lt;code&gt;php&amp;lt;?phpnamespace App\Accounting\Infrastructure\Repository;use App\Accounting\Domain\Aggregate\Payment;use App\Accounting\Domain\ValueObject\PaymentId;use App\Accounting\Infrastructure\Configuration\MongoDBConfiguration;class HivePaymentRepository{ private \MongoDB\Collection $collection; public function __construct(MongoDBConfiguration $mongoConfig) { $this-&amp;gt;collection = $mongoConfig-&amp;gt;getCollection('payments'); } public function save(Payment $payment): void { $document = [ '_id' =&amp;gt; $payment-&amp;gt;getId()-&amp;gt;getValue(), 'amount' =&amp;gt; $payment-&amp;gt;getAmount()-&amp;gt;getValue(), 'currency' =&amp;gt; $payment-&amp;gt;getCurrency()-&amp;gt;getCode(), 'status' =&amp;gt; $payment-&amp;gt;getStatus()-&amp;gt;getValue(), 'workspace_id' =&amp;gt; $payment-&amp;gt;getWorkspaceId()-&amp;gt;getValue(), 'organization_id' =&amp;gt; $payment-&amp;gt;getOrganizationId()-&amp;gt;getValue(), 'created_at' =&amp;gt; $payment-&amp;gt;getCreatedAt()-&amp;gt;format('Y-m-d H:i:s'), 'updated_at' =&amp;gt; $payment-&amp;gt;getUpdatedAt()-&amp;gt;format('Y-m-d H:i:s'), 'metadata' =&amp;gt; $payment-&amp;gt;getMetadata()-&amp;gt;toArray() ]; $this-&amp;gt;collection-&amp;gt;replaceOne( ['_id' =&amp;gt; $payment-&amp;gt;getId()-&amp;gt;getValue()], $document, ['upsert' =&amp;gt; true] ); } public function findByWorkspace(string $workspaceId): array { $documents = $this-&amp;gt;collection-&amp;gt;find([ 'workspace_id' =&amp;gt; $workspaceId ]); return array_map( fn($doc) =&amp;gt; $this-&amp;gt;mapToPayment($doc), $documents-&amp;gt;toArray() ); }}&lt;/code&gt;### 2. Aggregation pour les Rapports&lt;code&gt;php&amp;lt;?phpnamespace App\Accounting\Infrastructure\Report;use App\Accounting\Infrastructure\Configuration\MongoDBConfiguration;class PaymentReportGenerator{ private \MongoDB\Collection $collection; public function __construct(MongoDBConfiguration $mongoConfig) { $this-&amp;gt;collection = $mongoConfig-&amp;gt;getCollection('payments'); } public function generateMonthlyReport(string $workspaceId, int $year, int $month): array { $startDate = new \DateTimeImmutable(&amp;quot;{$year}-{$month}-01&amp;quot;); $endDate = $startDate-&amp;gt;modify('+1 month'); $pipeline = [ [ '$match' =&amp;gt; [ 'workspace_id' =&amp;gt; $workspaceId, 'created_at' =&amp;gt; [ '$gte' =&amp;gt; $startDate-&amp;gt;format('Y-m-d H:i:s'), '$lt' =&amp;gt; $endDate-&amp;gt;format('Y-m-d H:i:s') ] ] ], [ '$group' =&amp;gt; [ '_id' =&amp;gt; [ 'status' =&amp;gt; '$status', 'currency' =&amp;gt; '$currency' ], 'count' =&amp;gt; ['$sum' =&amp;gt; 1], 'total_amount' =&amp;gt; ['$sum' =&amp;gt; '$amount'], 'avg_amount' =&amp;gt; ['$avg' =&amp;gt; '$amount'] ] ], [ '$sort' =&amp;gt; ['total_amount' =&amp;gt; -1] ] ]; return $this-&amp;gt;collection-&amp;gt;aggregate($pipeline)-&amp;gt;toArray(); }}&lt;/code&gt;## 🎯 Critères d&amp;rsquo;Adoption### ✅ Adoptez cette approche si :- &lt;strong&gt;Données non relationnelles&lt;/strong&gt; avec structure flexible- &lt;strong&gt;Performance de lecture&lt;/strong&gt; importante- &lt;strong&gt;Évolutivité horizontale&lt;/strong&gt; requise- &lt;strong&gt;Équipe expérimentée&lt;/strong&gt; avec NoSQL- &lt;strong&gt;Requêtes complexes&lt;/strong&gt; avec aggregation- &lt;strong&gt;Flexibilité du schéma&lt;/strong&gt; nécessaire### ❌ Évitez cette approche si :- &lt;strong&gt;Données relationnelles&lt;/strong&gt; strictes- &lt;strong&gt;Transactions ACID&lt;/strong&gt; critiques- &lt;strong&gt;Équipe junior&lt;/strong&gt; sans expérience NoSQL- &lt;strong&gt;Requêtes simples&lt;/strong&gt; avec JOINs- &lt;strong&gt;Contraintes de schéma&lt;/strong&gt; importantes## 📈 Métriques de Succès### 1. Performance- &lt;strong&gt;Temps de réponse&lt;/strong&gt; des requêtes &amp;lt; 50ms- &lt;strong&gt;Throughput&lt;/strong&gt; des opérations &amp;gt; 10000/min- &lt;strong&gt;Disponibilité&lt;/strong&gt; &amp;gt; 99.9%### 2. Qualité- &lt;strong&gt;Couverture de tests&lt;/strong&gt; &amp;gt; 90%- &lt;strong&gt;Taux d&amp;rsquo;erreur&lt;/strong&gt; &amp;lt; 0.1%- &lt;strong&gt;Temps de récupération&lt;/strong&gt; &amp;lt; 2 minutes### 3. Business- &lt;strong&gt;Satisfaction utilisateur&lt;/strong&gt; &amp;gt; 4.5/5- &lt;strong&gt;Temps de développement&lt;/strong&gt; des nouvelles fonctionnalités- &lt;strong&gt;Coût de maintenance&lt;/strong&gt; acceptable&amp;mdash;## 🎯 Votre Prochaine ÉtapeMaintenant que vous comprenez l&amp;rsquo;approche classique avec MongoDB, quel est votre contexte ?

&lt;div class="chapter-navigation"&gt;
 &lt;h2 class="chapter-nav-title"&gt;🎯 Votre Prochaine Étape&lt;/h2&gt;
 &lt;p class="chapter-nav-subtitle"&gt;Maintenant que vous comprenez les concepts de base et que j'ai partagé mon expérience avec Gyroscops, quel est votre contexte ?&lt;/p&gt;</description></item></channel></rss>