<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chapitres Avancés on DDD Adventure</title><link>http://localhost:1313/chapitres/avances/</link><description>Recent content in Chapitres Avancés on DDD Adventure</description><generator>Hugo</generator><language>fr-fr</language><lastBuildDate>Thu, 19 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/chapitres/avances/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapitre 62 : Sécurité et Autorisation - Protéger votre API Platform</title><link>http://localhost:1313/chapitres/avances/chapitre-62-securite-autorisation/</link><pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/chapitres/avances/chapitre-62-securite-autorisation/</guid><description>&lt;h2 id="-objectif-de-ce-chapitre-mon-problème--comment-sécuriser-une-api-platform-complexe-voici-ce-qui-s--javais-une-api-platform-qui-fonctionnait-bien-mais-la-sécurité-était-un-vrai-casse-tête-comment-gérer-les-permissions--comment-sécuriser-les-endpoints--comment-gérer-lauthentification-multi-tenant-mais-attendez-quand-jai-voulu-implémenter-une-sécurité-robuste-jétais-perdu-oauth2-jwt-rbac-abac-keycloak-tellement-doptions--comment-choisir--comment-implémenter-soudain-je-réalisais-que-la-sécurité-n-il-me-fallait-une-approche-structurée-et-complète-la-sécurité--mon-guide-completla-sécurité-dans-une-api-platform-avec-ddd-ma-permis-de---protéger-les-données-sensibles--contrôler-laccès-aux-ressources--gérer-les-permissions-granulaires--auditer-les-actions-utilisateurs-quest-ce-que-la-sécurité-dans-une-api-platform--le-concept-fondamentalla-sécurité-dans-une-api-platform-consiste-à-protéger-les-ressources-et-contrôler-laccès-l--chaque-requête-doit-être-authentifiée-et-autorisée-avant-daccéder-aux-donnéesavec-gyroscops-voici-comment-j--les-4-piliers-de-la-sécurité-1-authentification---qui-êtes-vous-voici-comment-j-oauth2--jwt---tokens-jwt-pour-lauthentification--refresh-tokens-pour-la-sécurité--expiration-automatique-des-tokenskeycloak---gestion-centralisée-des-utilisateurs--intégration-oauth2--gestion-des-rôles-et-permissions-2-autorisation---que-pouvez-vous-faire-voici-comment-j-rbac-role-based-access-control---rôles-définis-par-domaine--permissions-granulaires--hiérarchie-des-rôlesabac-attribute-based-access-control---contrôle-basé-sur-les-attributs--règles-métier-complexes--contexte-dynamique-3-validation---les-données-sont-elles-valides-voici-comment-j-validation-des-entrées---validation-des-données-dentrée--sanitisation-des-données--gestion-des-erreursvalidation-des-permissions---vérification-des-permissions--contrôle-daccès-aux-ressources--audit-des-actions-4-audit---que-sest-il-passé-voici-comment-j-logging-de-sécurité---logs-dauthentification--logs-dautorisation--logs-dauditmonitoring---détection-dintrusions--alertes-de-sécurité--métriques-de-sécurité-comment-implémenter-la-sécurité-1-configuration-de-l--jai-configuré-lauthentification-yamlsecurity----providers--------keycloak------------id-appsecuritykeycloakuserprovider----firewalls--------api------------pattern-api------------stateless-true------------jwt-----access_control-----------path-apiauth-roles-public_access------------path-api-roles-role_user-résultat--authentification-jwt-configurée-2-implémentation-de-l--jai-implémenté-lautorisation-phprouteapipayments-methods-getisgrantedpayment_read-subject-organizationpublic-function-getpaymentsorganization-organization-jsonresponse-----logique-métierrésultat--autorisation-basée-sur-les-permissions-3-gestion-des-permissions--jai-géré-les-permissions-phpfinal-class-paymentvoter-extends-voter----protected-function-supportsstring-attribute-mixed-subject-bool------------return-in_arrayattribute-payment_read-payment_write-payment_delete-------------subject-instanceof-payment------------protected-function-voteonattributestring-attribute-mixed-subject-tokeninterface-token-bool------------user--token-getuser----------------return-match-attribute-------------payment_read--this-canreaduser-subject------------payment_write--this-canwriteuser-subject------------payment_delete--this-candeleteuser-subject------------default--false------------résultat--permissions-granulaires-et-flexibles-4-audit-et-monitoring--jai-implémenté-laudit-phpfinal-class-securityauditlogger----public-function-logauthenticationstring-userid-bool-success-void------------this-logger-infoauthentication-attempt-------------user_id--userid------------success--success------------timestamp--new-datetimeimmutable--------------------public-function-logauthorizationstring-userid-string-resource-string-action-bool-granted-void------------this-logger-infoauthorization-check-------------user_id--userid------------resource--resource------------action--action------------granted--granted------------timestamp--new-datetimeimmutable------------résultat--audit-complet-des-actions-de-sécurité-les-avantages-de-la-sécurité-structurée-1-protection-des-données--la-sécurité-structurée-protège-les-données---accès-contrôlé-aux-ressources--données-sensibles-protégées--conformité-réglementairerésultat--données-sécurisées-et-conformes-2-contrôle-d--la-sécurité-structurée-permet-un-contrôle-granulaire---permissions-par-ressource--rôles-contextuels--règles-métier-complexesrésultat--contrôle-daccès-précis-et-flexible-3-audit-et-conformité--la-sécurité-structurée-facilite-laudit---logs-complets-des-actions--traçabilité-des-accès--conformité-réglementairerésultat--audit-complet-et-conformité-assurée-4-évolutivité--la-sécurité-structurée-est-évolutive---ajout-facile-de-nouvelles-permissions--extension-des-rôles--adaptation-aux-besoins-métierrésultat--sécurité-évolutive-et-maintenable-les-inconvénients-de-la-sécurité-structurée-1-complexité-accrue--la-sécurité-structurée-ajoute-de-la-complexité---configuration-complexe--gestion-des-permissions--debugging-plus-difficilerésultat--courbe-dapprentissage-plus-importante-2-performance--la-sécurité-structurée-peut-impacter-les-performances---vérifications-dautorisation--validation-des-tokens--logs-dauditrésultat--performance-potentiellement-dégradée-3-maintenance--la-sécurité-structurée-nécessite-de-la-maintenance---mise-à-jour-des-permissions--gestion-des-rôles--monitoring-continurésultat--maintenance-plus-complexe-4-gestion-des-erreurs--la-sécurité-structurée-complique-la-gestion-des-erreurs---erreurs-dauthentification--erreurs-dautorisation--messages-derreur-appropriésrésultat--gestion-derreurs-plus-complexe-les-pièges-à-éviter-1-sécurité-par-obscurité-mauvais--compter-sur-lobscurité-pour-la-sécurité-bon--sécurité-basée-sur-des-standards-éprouvéspourquoi-c-lobscurité-nest-pas-une-sécurité-2-permissions-trop-granulaires-mauvais--une-permission-pour-chaque-action-bon--permissions-par-domaine-métierpourquoi-c-des-permissions-trop-granulaires-sont-difficiles-à-gérer-3-ignorer-l-mauvais--pas-daudit-des-actions-de-sécurité-bon--audit-complet-des-actionspourquoi-c-laudit-est-essentiel-pour-la-sécurité-4-tokens-non-sécurisés-mauvais--tokens-non-sécurisés-ou-non-expirés-bon--tokens-sécurisés-avec-expirationpourquoi-c-les-tokens-non-sécurisés-sont-une-faille-de-sécurité-lévolution-vers-la-sécurité-structurée-phase-1--authentification-basiqueavec-gyroscops--au-début-javais-une-authentification-basique---loginpassword-simple--sessions-php--pas-dautorisationrésultat--développement-rapide-sécurité-faible-phase-2--introduction-de-lautorisationavec-gyroscops--jai-introduit-lautorisation---rôles-basiques--permissions-simples--contrôle-daccèsrésultat--sécurité-améliorée-complexité-accrue-phase-3--sécurité-complèteavec-gyroscops--maintenant-jai-une-sécurité-complète---oauth2--jwt--rbac--abac--audit-completrésultat--sécurité-robuste-et-évolutive--implémentation-concrète-dans-le-projet-gyroscops-cloud-sécurité-appliquée-à-gyroscops-cloudle-gyroscops-cloud-applique-concrètement-les-principes-de-sécurité-à-travers-son-architecture-et-ses-adr-architecture-decision-records-voici-comment--système-dauthentification-gyroscops-cloudphp--système-dauthentification-gyroscops-cloud-projet-gyroscops-cloudfinal-class-hiveauthenticationservice----public-function-__construct--------private-keycloakclient-keycloakclient--------private-jwttokenservice-jwtservice--------private-userrepositoryinterface-userrepository--------private-loggerinterface-logger-------------public-function-authenticatestring-email-string-password-authresult------------this-logger-infoauthentication-attempt-------------email--email------------timestamp--new-datetimeimmutable------------------------try-------------keycloakuser--this-keycloakclient-authenticateemail-password------------------------if-keycloakuser-----------------this-logger-warningauthentication-failed---------------------email--email--------------------reason--invalid-credentials------------------------------------------------return-authresultfailureinvalid-credentials------------------------------------user--this-userrepository-findbyemailnew-emailemail------------if-user-----------------this-logger-warninguser-not-found---------------------email--email------------------------------------------------return-authresultfailureuser-not-found------------------------------------token--this-jwtservice-generatetokenuser------------------------this-logger-infoauthentication-successful-----------------user_id--user-getid-tostring----------------email--email------------------------------------return-authresultsuccessuser-token---------------------catch-exception-e-------------this-logger-errorauthentication-error-----------------email--email----------------error--e-getmessage------------------------------------return-authresultfailureauthentication-failed--------------------public-function-refreshtokenstring-refreshtoken-authresult------------try-------------newtoken--this-jwtservice-refreshtokenrefreshtoken------------------------this-logger-infotoken-refreshed-successfully------------------------return-authresultsuccessnull-newtoken---------------------catch-exception-e-------------this-logger-errortoken-refresh-failed-----------------error--e-getmessage------------------------------------return-authresultfailuretoken-refresh-failed-------------système-dautorisation-gyroscops-cloudphp--système-dautorisation-gyroscops-cloud-projet-gyroscops-cloudfinal-class-hiveauthorizationservice----public-function-__construct--------private-permissionrepositoryinterface-permissionrepository--------private-rolerepositoryinterface-rolerepository--------private-loggerinterface-logger-------------public-function-haspermissionuser-user-string-resource-string-action-bool------------this-logger-infochecking-permission-------------user_id--user-getid-tostring------------resource--resource------------action--action------------------------try-------------userroles--this-rolerepository-findbyuseruser------------------------foreach-userroles-as-role-----------------permissions--this-permissionrepository-findbyrolerole--------------------------------foreach-permissions-as-permission---------------------if-permission-matchesresource-action-------------------------this-logger-infopermission-granted-----------------------------user_id--user-getid-tostring----------------------------resource--resource----------------------------action--action----------------------------role--role-getname------------------------------------------------------------------------return-true------------------------------------------------------------------------this-logger-warningpermission-denied-----------------user_id--user-getid-tostring----------------resource--resource----------------action--action------------------------------------return-false---------------------catch-exception-e-------------this-logger-errorauthorization-error-----------------user_id--user-getid-tostring----------------resource--resource----------------action--action----------------error--e-getmessage------------------------------------return-false--------------------public-function-checkresourceaccessuser-user-string-resource-string-action-mixed-subject-bool-------------vérification-des-permissions-de-base--------if-this-haspermissionuser-resource-action-------------return-false-------------------------vérification-des-permissions-contextuelles--------if-subject-instanceof-organizationaware-------------return-this-checkorganizationaccessuser-subject------------------------if-subject-instanceof-useraware-------------return-this-checkuseraccessuser-subject------------------------return-true------------private-function-checkorganizationaccessuser-user-organizationaware-subject-bool------------userorganizations--this-getuserorganizationsuser--------subjectorganization--subject-getorganizationid----------------return-in_arraysubjectorganization-userorganizations------------private-function-checkuseraccessuser-user-useraware-subject-bool------------return-user-getid-equalssubject-getuserid-----voters-de-sécurité-gyroscops-cloudphp--voters-de-sécurité-gyroscops-cloud-projet-gyroscops-cloudfinal-class-paymentvoter-extends-voter----public-function-__construct--------private-hiveauthorizationservice-authorizationservice--------private-loggerinterface-logger-------------protected-function-supportsstring-attribute-mixed-subject-bool------------return-in_arrayattribute-------------payment_read------------payment_write------------payment_delete------------payment_approve------------payment_refund----------subject-instanceof-payment------------protected-function-voteonattributestring-attribute-mixed-subject-tokeninterface-token-bool------------user--token-getuser----------------if-user-instanceof-user-------------return-false------------------------this-logger-infovoting-on-payment-permission-------------user_id--user-getid-tostring------------attribute--attribute------------payment_id--subject-getid-tostring------------------------result--match-attribute-------------payment_read--this-canreaduser-subject------------payment_write--this-canwriteuser-subject------------payment_delete--this-candeleteuser-subject------------payment_approve--this-canapproveuser-subject------------payment_refund--this-canrefunduser-subject------------default--false------------------------this-logger-infovote-result-------------user_id--user-getid-tostring------------attribute--attribute------------result--result------------------------return-result------------private-function-canreaduser-user-payment-payment-bool------------return-this-authorizationservice-checkresourceaccess------------user------------payment------------read------------payment--------------------private-function-canwriteuser-user-payment-payment-bool------------return-this-authorizationservice-checkresourceaccess------------user------------payment------------write------------payment--------------------private-function-candeleteuser-user-payment-payment-bool------------return-this-authorizationservice-checkresourceaccess------------user------------payment------------delete------------payment--------------------private-function-canapproveuser-user-payment-payment-bool------------return-this-authorizationservice-checkresourceaccess------------user------------payment------------approve------------payment--------------------private-function-canrefunduser-user-payment-payment-bool------------return-this-authorizationservice-checkresourceaccess------------user------------payment------------refund------------payment-------------audit-de-sécurité-gyroscops-cloudphp--audit-de-sécurité-gyroscops-cloud-projet-gyroscops-cloudfinal-class-hivesecurityauditservice----public-function-__construct--------private-loggerinterface-logger--------private-securityeventrepositoryinterface-eventrepository-------------public-function-logauthenticationeventstring-userid-bool-success-array-context---void------------event--new-securityevent------------securityeventtypeauthentication------------userid------------success------------context------------------------this-eventrepository-saveevent----------------this-logger-infoauthentication-event-logged-------------user_id--userid------------success--success------------context--context--------------------public-function-logauthorizationeventstring-userid-string-resource-string-action-bool-granted-array-context---void------------event--new-securityevent------------securityeventtypeauthorization------------userid------------granted------------array_mergecontext-----------------resource--resource----------------action--action------------------------------------this-eventrepository-saveevent----------------this-logger-infoauthorization-event-logged-------------user_id--userid------------resource--resource------------action--action------------granted--granted------------context--context--------------------public-function-logsecurityviolationstring-userid-string-violationtype-array-context---void------------event--new-securityevent------------securityeventtypeviolation------------userid------------false------------array_mergecontext-----------------violation_type--violationtype------------------------------------this-eventrepository-saveevent----------------this-logger-warningsecurity-violation-logged-------------user_id--userid------------violation_type--violationtype------------context--context-------------références-aux-adr-du-projet-gyroscops-cloudce-chapitre-sappuie-sur-les-architecture-decision-records-adr-suivants-du-gyroscops-cloud---hive025--authorization-system---système-dautorisation--hive026--keycloak-resource-and-scope-management---gestion-des-ressources-et-scopes--hive040--enhanced-models-with-property-access-patterns---modèles-enrichis-pour-la-sécurité--hive041--cross-cutting-concerns-architecture---architecture-des-préoccupations-transversaleshahahugoshortcode9s0hbhb"&gt;🎯 Objectif de ce Chapitre### Mon Problème : Comment Sécuriser une API Platform Complexe ?&lt;strong&gt;Voici ce qui s&amp;rsquo;est passé avec Gyroscops&lt;/strong&gt; : J&amp;rsquo;avais une API Platform qui fonctionnait bien, mais la sécurité était un vrai casse-tête. Comment gérer les permissions ? Comment sécuriser les endpoints ? Comment gérer l&amp;rsquo;authentification multi-tenant ?&lt;strong&gt;Mais attendez&amp;hellip;&lt;/strong&gt; Quand j&amp;rsquo;ai voulu implémenter une sécurité robuste, j&amp;rsquo;étais perdu. OAuth2, JWT, RBAC, ABAC, Keycloak&amp;hellip; Tellement d&amp;rsquo;options ! Comment choisir ? Comment implémenter ?&lt;strong&gt;Soudain, je réalisais que la sécurité n&amp;rsquo;était pas optionnelle !&lt;/strong&gt; Il me fallait une approche structurée et complète.### La Sécurité : Mon Guide CompletLa sécurité dans une API Platform avec DDD m&amp;rsquo;a permis de :- &lt;strong&gt;Protéger&lt;/strong&gt; les données sensibles- &lt;strong&gt;Contrôler&lt;/strong&gt; l&amp;rsquo;accès aux ressources- &lt;strong&gt;Gérer&lt;/strong&gt; les permissions granulaires- &lt;strong&gt;Auditer&lt;/strong&gt; les actions utilisateurs## Qu&amp;rsquo;est-ce que la Sécurité dans une API Platform ?### Le Concept FondamentalLa sécurité dans une API Platform consiste à protéger les ressources et contrôler l&amp;rsquo;accès. &lt;strong&gt;L&amp;rsquo;idée&lt;/strong&gt; : Chaque requête doit être authentifiée et autorisée avant d&amp;rsquo;accéder aux données.&lt;strong&gt;Avec Gyroscops, voici comment j&amp;rsquo;ai structuré la sécurité&lt;/strong&gt; :### Les 4 Piliers de la Sécurité#### 1. &lt;strong&gt;Authentification&lt;/strong&gt; - Qui êtes-vous ?&lt;strong&gt;Voici comment j&amp;rsquo;ai implémenté l&amp;rsquo;authentification avec Gyroscops&lt;/strong&gt; :&lt;strong&gt;OAuth2 + JWT&lt;/strong&gt; :- Tokens JWT pour l&amp;rsquo;authentification- Refresh tokens pour la sécurité- Expiration automatique des tokens&lt;strong&gt;Keycloak&lt;/strong&gt; :- Gestion centralisée des utilisateurs- Intégration OAuth2- Gestion des rôles et permissions#### 2. &lt;strong&gt;Autorisation&lt;/strong&gt; - Que pouvez-vous faire ?&lt;strong&gt;Voici comment j&amp;rsquo;ai implémenté l&amp;rsquo;autorisation avec Gyroscops&lt;/strong&gt; :&lt;strong&gt;RBAC (Role-Based Access Control)&lt;/strong&gt; :- Rôles définis par domaine- Permissions granulaires- Hiérarchie des rôles&lt;strong&gt;ABAC (Attribute-Based Access Control)&lt;/strong&gt; :- Contrôle basé sur les attributs- Règles métier complexes- Contexte dynamique#### 3. &lt;strong&gt;Validation&lt;/strong&gt; - Les données sont-elles valides ?&lt;strong&gt;Voici comment j&amp;rsquo;ai implémenté la validation avec Gyroscops&lt;/strong&gt; :&lt;strong&gt;Validation des Entrées&lt;/strong&gt; :- Validation des données d&amp;rsquo;entrée- Sanitisation des données- Gestion des erreurs&lt;strong&gt;Validation des Permissions&lt;/strong&gt; :- Vérification des permissions- Contrôle d&amp;rsquo;accès aux ressources- Audit des actions#### 4. &lt;strong&gt;Audit&lt;/strong&gt; - Que s&amp;rsquo;est-il passé ?&lt;strong&gt;Voici comment j&amp;rsquo;ai implémenté l&amp;rsquo;audit avec Gyroscops&lt;/strong&gt; :&lt;strong&gt;Logging de Sécurité&lt;/strong&gt; :- Logs d&amp;rsquo;authentification- Logs d&amp;rsquo;autorisation- Logs d&amp;rsquo;audit&lt;strong&gt;Monitoring&lt;/strong&gt; :- Détection d&amp;rsquo;intrusions- Alertes de sécurité- Métriques de sécurité## Comment Implémenter la Sécurité### 1. &lt;strong&gt;Configuration de l&amp;rsquo;Authentification****Avec Gyroscops&lt;/strong&gt; : J&amp;rsquo;ai configuré l&amp;rsquo;authentification :&lt;code&gt;yamlsecurity: providers: keycloak: id: App\Security\KeycloakUserProvider firewalls: api: pattern: ^/api stateless: true jwt: ~ access_control: - { path: ^/api/auth, roles: PUBLIC_ACCESS } - { path: ^/api, roles: ROLE_USER }&lt;/code&gt;&lt;strong&gt;Résultat&lt;/strong&gt; : Authentification JWT configurée.### 2. &lt;strong&gt;Implémentation de l&amp;rsquo;Autorisation****Avec Gyroscops&lt;/strong&gt; : J&amp;rsquo;ai implémenté l&amp;rsquo;autorisation :&lt;code&gt;php#[Route('/api/payments', methods: ['GET'])]#[IsGranted('PAYMENT_READ', subject: 'organization')]public function getPayments(Organization $organization): JsonResponse{ // Logique métier}&lt;/code&gt;&lt;strong&gt;Résultat&lt;/strong&gt; : Autorisation basée sur les permissions.### 3. &lt;strong&gt;Gestion des Permissions****Avec Gyroscops&lt;/strong&gt; : J&amp;rsquo;ai géré les permissions :&lt;code&gt;phpfinal class PaymentVoter extends Voter{ protected function supports(string $attribute, mixed $subject): bool { return in_array($attribute, ['PAYMENT_READ', 'PAYMENT_WRITE', 'PAYMENT_DELETE']) &amp;amp;&amp;amp; $subject instanceof Payment; } protected function voteOnAttribute(string $attribute, mixed $subject, TokenInterface $token): bool { $user = $token-&amp;gt;getUser(); return match ($attribute) { 'PAYMENT_READ' =&amp;gt; $this-&amp;gt;canRead($user, $subject), 'PAYMENT_WRITE' =&amp;gt; $this-&amp;gt;canWrite($user, $subject), 'PAYMENT_DELETE' =&amp;gt; $this-&amp;gt;canDelete($user, $subject), default =&amp;gt; false }; }}&lt;/code&gt;&lt;strong&gt;Résultat&lt;/strong&gt; : Permissions granulaires et flexibles.### 4. &lt;strong&gt;Audit et Monitoring****Avec Gyroscops&lt;/strong&gt; : J&amp;rsquo;ai implémenté l&amp;rsquo;audit :&lt;code&gt;phpfinal class SecurityAuditLogger{ public function logAuthentication(string $userId, bool $success): void { $this-&amp;gt;logger-&amp;gt;info('Authentication attempt', [ 'user_id' =&amp;gt; $userId, 'success' =&amp;gt; $success, 'timestamp' =&amp;gt; new \DateTimeImmutable() ]); } public function logAuthorization(string $userId, string $resource, string $action, bool $granted): void { $this-&amp;gt;logger-&amp;gt;info('Authorization check', [ 'user_id' =&amp;gt; $userId, 'resource' =&amp;gt; $resource, 'action' =&amp;gt; $action, 'granted' =&amp;gt; $granted, 'timestamp' =&amp;gt; new \DateTimeImmutable() ]); }}&lt;/code&gt;&lt;strong&gt;Résultat&lt;/strong&gt; : Audit complet des actions de sécurité.## Les Avantages de la Sécurité Structurée### 1. &lt;strong&gt;Protection des Données****Avec Gyroscops&lt;/strong&gt; : La sécurité structurée protège les données :- Accès contrôlé aux ressources- Données sensibles protégées- Conformité réglementaire&lt;strong&gt;Résultat&lt;/strong&gt; : Données sécurisées et conformes.### 2. &lt;strong&gt;Contrôle d&amp;rsquo;Accès Granulaire****Avec Gyroscops&lt;/strong&gt; : La sécurité structurée permet un contrôle granulaire :- Permissions par ressource- Rôles contextuels- Règles métier complexes&lt;strong&gt;Résultat&lt;/strong&gt; : Contrôle d&amp;rsquo;accès précis et flexible.### 3. &lt;strong&gt;Audit et Conformité****Avec Gyroscops&lt;/strong&gt; : La sécurité structurée facilite l&amp;rsquo;audit :- Logs complets des actions- Traçabilité des accès- Conformité réglementaire&lt;strong&gt;Résultat&lt;/strong&gt; : Audit complet et conformité assurée.### 4. &lt;strong&gt;Évolutivité****Avec Gyroscops&lt;/strong&gt; : La sécurité structurée est évolutive :- Ajout facile de nouvelles permissions- Extension des rôles- Adaptation aux besoins métier&lt;strong&gt;Résultat&lt;/strong&gt; : Sécurité évolutive et maintenable.## Les Inconvénients de la Sécurité Structurée### 1. &lt;strong&gt;Complexité Accrue****Avec Gyroscops&lt;/strong&gt; : La sécurité structurée ajoute de la complexité :- Configuration complexe- Gestion des permissions- Debugging plus difficile&lt;strong&gt;Résultat&lt;/strong&gt; : Courbe d&amp;rsquo;apprentissage plus importante.### 2. &lt;strong&gt;Performance****Avec Gyroscops&lt;/strong&gt; : La sécurité structurée peut impacter les performances :- Vérifications d&amp;rsquo;autorisation- Validation des tokens- Logs d&amp;rsquo;audit&lt;strong&gt;Résultat&lt;/strong&gt; : Performance potentiellement dégradée.### 3. &lt;strong&gt;Maintenance****Avec Gyroscops&lt;/strong&gt; : La sécurité structurée nécessite de la maintenance :- Mise à jour des permissions- Gestion des rôles- Monitoring continu&lt;strong&gt;Résultat&lt;/strong&gt; : Maintenance plus complexe.### 4. &lt;strong&gt;Gestion des Erreurs****Avec Gyroscops&lt;/strong&gt; : La sécurité structurée complique la gestion des erreurs :- Erreurs d&amp;rsquo;authentification- Erreurs d&amp;rsquo;autorisation- Messages d&amp;rsquo;erreur appropriés&lt;strong&gt;Résultat&lt;/strong&gt; : Gestion d&amp;rsquo;erreurs plus complexe.## Les Pièges à Éviter### 1. &lt;strong&gt;Sécurité par Obscurité&lt;/strong&gt;**❌ Mauvais** : Compter sur l&amp;rsquo;obscurité pour la sécurité**✅ Bon** : Sécurité basée sur des standards éprouvés&lt;strong&gt;Pourquoi c&amp;rsquo;est important ?&lt;/strong&gt; L&amp;rsquo;obscurité n&amp;rsquo;est pas une sécurité.### 2. &lt;strong&gt;Permissions Trop Granulaires&lt;/strong&gt;**❌ Mauvais** : Une permission pour chaque action**✅ Bon** : Permissions par domaine métier&lt;strong&gt;Pourquoi c&amp;rsquo;est crucial ?&lt;/strong&gt; Des permissions trop granulaires sont difficiles à gérer.### 3. &lt;strong&gt;Ignorer l&amp;rsquo;Audit&lt;/strong&gt;**❌ Mauvais** : Pas d&amp;rsquo;audit des actions de sécurité**✅ Bon** : Audit complet des actions&lt;strong&gt;Pourquoi c&amp;rsquo;est essentiel ?&lt;/strong&gt; L&amp;rsquo;audit est essentiel pour la sécurité.### 4. &lt;strong&gt;Tokens Non Sécurisés&lt;/strong&gt;**❌ Mauvais** : Tokens non sécurisés ou non expirés**✅ Bon** : Tokens sécurisés avec expiration&lt;strong&gt;Pourquoi c&amp;rsquo;est la clé ?&lt;/strong&gt; Les tokens non sécurisés sont une faille de sécurité.## L&amp;rsquo;Évolution vers la Sécurité Structurée### Phase 1 : Authentification Basique&lt;strong&gt;Avec Gyroscops&lt;/strong&gt; : Au début, j&amp;rsquo;avais une authentification basique :- Login/password simple- Sessions PHP- Pas d&amp;rsquo;autorisation&lt;strong&gt;Résultat&lt;/strong&gt; : Développement rapide, sécurité faible.### Phase 2 : Introduction de l&amp;rsquo;Autorisation&lt;strong&gt;Avec Gyroscops&lt;/strong&gt; : J&amp;rsquo;ai introduit l&amp;rsquo;autorisation :- Rôles basiques- Permissions simples- Contrôle d&amp;rsquo;accès&lt;strong&gt;Résultat&lt;/strong&gt; : Sécurité améliorée, complexité accrue.### Phase 3 : Sécurité Complète&lt;strong&gt;Avec Gyroscops&lt;/strong&gt; : Maintenant, j&amp;rsquo;ai une sécurité complète :- OAuth2 + JWT- RBAC + ABAC- Audit complet&lt;strong&gt;Résultat&lt;/strong&gt; : Sécurité robuste et évolutive.## 🏗️ Implémentation Concrète dans le Projet Gyroscops Cloud### Sécurité Appliquée à Gyroscops CloudLe Gyroscops Cloud applique concrètement les principes de sécurité à travers son architecture et ses ADR (Architecture Decision Records). Voici comment :#### Système d&amp;rsquo;Authentification Gyroscops Cloud&lt;code&gt;php// ✅ Système d'Authentification Gyroscops Cloud (Projet Gyroscops Cloud)final class HiveAuthenticationService{ public function __construct( private KeycloakClient $keycloakClient, private JwtTokenService $jwtService, private UserRepositoryInterface $userRepository, private LoggerInterface $logger ) {} public function authenticate(string $email, string $password): AuthResult { $this-&amp;gt;logger-&amp;gt;info('Authentication attempt', [ 'email' =&amp;gt; $email, 'timestamp' =&amp;gt; new \DateTimeImmutable() ]); try { $keycloakUser = $this-&amp;gt;keycloakClient-&amp;gt;authenticate($email, $password); if (!$keycloakUser) { $this-&amp;gt;logger-&amp;gt;warning('Authentication failed', [ 'email' =&amp;gt; $email, 'reason' =&amp;gt; 'Invalid credentials' ]); return AuthResult::failure('Invalid credentials'); } $user = $this-&amp;gt;userRepository-&amp;gt;findByEmail(new Email($email)); if (!$user) { $this-&amp;gt;logger-&amp;gt;warning('User not found', [ 'email' =&amp;gt; $email ]); return AuthResult::failure('User not found'); } $token = $this-&amp;gt;jwtService-&amp;gt;generateToken($user); $this-&amp;gt;logger-&amp;gt;info('Authentication successful', [ 'user_id' =&amp;gt; $user-&amp;gt;getId()-&amp;gt;toString(), 'email' =&amp;gt; $email ]); return AuthResult::success($user, $token); } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Authentication error', [ 'email' =&amp;gt; $email, 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); return AuthResult::failure('Authentication failed'); } } public function refreshToken(string $refreshToken): AuthResult { try { $newToken = $this-&amp;gt;jwtService-&amp;gt;refreshToken($refreshToken); $this-&amp;gt;logger-&amp;gt;info('Token refreshed successfully'); return AuthResult::success(null, $newToken); } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Token refresh failed', [ 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); return AuthResult::failure('Token refresh failed'); } }}&lt;/code&gt;#### Système d&amp;rsquo;Autorisation Gyroscops Cloud&lt;code&gt;php// ✅ Système d'Autorisation Gyroscops Cloud (Projet Gyroscops Cloud)final class HiveAuthorizationService{ public function __construct( private PermissionRepositoryInterface $permissionRepository, private RoleRepositoryInterface $roleRepository, private LoggerInterface $logger ) {} public function hasPermission(User $user, string $resource, string $action): bool { $this-&amp;gt;logger-&amp;gt;info('Checking permission', [ 'user_id' =&amp;gt; $user-&amp;gt;getId()-&amp;gt;toString(), 'resource' =&amp;gt; $resource, 'action' =&amp;gt; $action ]); try { $userRoles = $this-&amp;gt;roleRepository-&amp;gt;findByUser($user); foreach ($userRoles as $role) { $permissions = $this-&amp;gt;permissionRepository-&amp;gt;findByRole($role); foreach ($permissions as $permission) { if ($permission-&amp;gt;matches($resource, $action)) { $this-&amp;gt;logger-&amp;gt;info('Permission granted', [ 'user_id' =&amp;gt; $user-&amp;gt;getId()-&amp;gt;toString(), 'resource' =&amp;gt; $resource, 'action' =&amp;gt; $action, 'role' =&amp;gt; $role-&amp;gt;getName() ]); return true; } } } $this-&amp;gt;logger-&amp;gt;warning('Permission denied', [ 'user_id' =&amp;gt; $user-&amp;gt;getId()-&amp;gt;toString(), 'resource' =&amp;gt; $resource, 'action' =&amp;gt; $action ]); return false; } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Authorization error', [ 'user_id' =&amp;gt; $user-&amp;gt;getId()-&amp;gt;toString(), 'resource' =&amp;gt; $resource, 'action' =&amp;gt; $action, 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); return false; } } public function checkResourceAccess(User $user, string $resource, string $action, mixed $subject): bool { // Vérification des permissions de base if (!$this-&amp;gt;hasPermission($user, $resource, $action)) { return false; } // Vérification des permissions contextuelles if ($subject instanceof OrganizationAware) { return $this-&amp;gt;checkOrganizationAccess($user, $subject); } if ($subject instanceof UserAware) { return $this-&amp;gt;checkUserAccess($user, $subject); } return true; } private function checkOrganizationAccess(User $user, OrganizationAware $subject): bool { $userOrganizations = $this-&amp;gt;getUserOrganizations($user); $subjectOrganization = $subject-&amp;gt;getOrganizationId(); return in_array($subjectOrganization, $userOrganizations); } private function checkUserAccess(User $user, UserAware $subject): bool { return $user-&amp;gt;getId()-&amp;gt;equals($subject-&amp;gt;getUserId()); }}&lt;/code&gt;#### Voters de Sécurité Gyroscops Cloud&lt;code&gt;php// ✅ Voters de Sécurité Gyroscops Cloud (Projet Gyroscops Cloud)final class PaymentVoter extends Voter{ public function __construct( private HiveAuthorizationService $authorizationService, private LoggerInterface $logger ) {} protected function supports(string $attribute, mixed $subject): bool { return in_array($attribute, [ 'PAYMENT_READ', 'PAYMENT_WRITE', 'PAYMENT_DELETE', 'PAYMENT_APPROVE', 'PAYMENT_REFUND' ]) &amp;amp;&amp;amp; $subject instanceof Payment; } protected function voteOnAttribute(string $attribute, mixed $subject, TokenInterface $token): bool { $user = $token-&amp;gt;getUser(); if (!$user instanceof User) { return false; } $this-&amp;gt;logger-&amp;gt;info('Voting on payment permission', [ 'user_id' =&amp;gt; $user-&amp;gt;getId()-&amp;gt;toString(), 'attribute' =&amp;gt; $attribute, 'payment_id' =&amp;gt; $subject-&amp;gt;getId()-&amp;gt;toString() ]); $result = match ($attribute) { 'PAYMENT_READ' =&amp;gt; $this-&amp;gt;canRead($user, $subject), 'PAYMENT_WRITE' =&amp;gt; $this-&amp;gt;canWrite($user, $subject), 'PAYMENT_DELETE' =&amp;gt; $this-&amp;gt;canDelete($user, $subject), 'PAYMENT_APPROVE' =&amp;gt; $this-&amp;gt;canApprove($user, $subject), 'PAYMENT_REFUND' =&amp;gt; $this-&amp;gt;canRefund($user, $subject), default =&amp;gt; false }; $this-&amp;gt;logger-&amp;gt;info('Vote result', [ 'user_id' =&amp;gt; $user-&amp;gt;getId()-&amp;gt;toString(), 'attribute' =&amp;gt; $attribute, 'result' =&amp;gt; $result ]); return $result; } private function canRead(User $user, Payment $payment): bool { return $this-&amp;gt;authorizationService-&amp;gt;checkResourceAccess( $user, 'payment', 'read', $payment ); } private function canWrite(User $user, Payment $payment): bool { return $this-&amp;gt;authorizationService-&amp;gt;checkResourceAccess( $user, 'payment', 'write', $payment ); } private function canDelete(User $user, Payment $payment): bool { return $this-&amp;gt;authorizationService-&amp;gt;checkResourceAccess( $user, 'payment', 'delete', $payment ); } private function canApprove(User $user, Payment $payment): bool { return $this-&amp;gt;authorizationService-&amp;gt;checkResourceAccess( $user, 'payment', 'approve', $payment ); } private function canRefund(User $user, Payment $payment): bool { return $this-&amp;gt;authorizationService-&amp;gt;checkResourceAccess( $user, 'payment', 'refund', $payment ); }}&lt;/code&gt;#### Audit de Sécurité Gyroscops Cloud&lt;code&gt;php// ✅ Audit de Sécurité Gyroscops Cloud (Projet Gyroscops Cloud)final class HiveSecurityAuditService{ public function __construct( private LoggerInterface $logger, private SecurityEventRepositoryInterface $eventRepository ) {} public function logAuthenticationEvent(string $userId, bool $success, array $context = []): void { $event = new SecurityEvent( SecurityEventType::AUTHENTICATION, $userId, $success, $context ); $this-&amp;gt;eventRepository-&amp;gt;save($event); $this-&amp;gt;logger-&amp;gt;info('Authentication event logged', [ 'user_id' =&amp;gt; $userId, 'success' =&amp;gt; $success, 'context' =&amp;gt; $context ]); } public function logAuthorizationEvent(string $userId, string $resource, string $action, bool $granted, array $context = []): void { $event = new SecurityEvent( SecurityEventType::AUTHORIZATION, $userId, $granted, array_merge($context, [ 'resource' =&amp;gt; $resource, 'action' =&amp;gt; $action ]) ); $this-&amp;gt;eventRepository-&amp;gt;save($event); $this-&amp;gt;logger-&amp;gt;info('Authorization event logged', [ 'user_id' =&amp;gt; $userId, 'resource' =&amp;gt; $resource, 'action' =&amp;gt; $action, 'granted' =&amp;gt; $granted, 'context' =&amp;gt; $context ]); } public function logSecurityViolation(string $userId, string $violationType, array $context = []): void { $event = new SecurityEvent( SecurityEventType::VIOLATION, $userId, false, array_merge($context, [ 'violation_type' =&amp;gt; $violationType ]) ); $this-&amp;gt;eventRepository-&amp;gt;save($event); $this-&amp;gt;logger-&amp;gt;warning('Security violation logged', [ 'user_id' =&amp;gt; $userId, 'violation_type' =&amp;gt; $violationType, 'context' =&amp;gt; $context ]); }}&lt;/code&gt;### Références aux ADR du Projet Gyroscops CloudCe chapitre s&amp;rsquo;appuie sur les Architecture Decision Records (ADR) suivants du Gyroscops Cloud :- &lt;strong&gt;HIVE025&lt;/strong&gt; : Authorization System - Système d&amp;rsquo;autorisation- &lt;strong&gt;HIVE026&lt;/strong&gt; : Keycloak Resource and Scope Management - Gestion des ressources et scopes- &lt;strong&gt;HIVE040&lt;/strong&gt; : Enhanced Models with Property Access Patterns - Modèles enrichis pour la sécurité- &lt;strong&gt;HIVE041&lt;/strong&gt; : Cross-Cutting Concerns Architecture - Architecture des préoccupations transversales

&lt;div class="chapter-navigation"&gt;
 &lt;h2 class="chapter-nav-title"&gt;🎯 Votre Prochaine Étape&lt;/h2&gt;
 &lt;p class="chapter-nav-subtitle"&gt;Maintenant que vous comprenez les concepts de base et que j'ai partagé mon expérience avec Gyroscops, quel est votre contexte ?&lt;/p&gt;</description></item><item><title>Chapitre 63 : Frontend et Intégration - Connecter votre Interface Utilisateur</title><link>http://localhost:1313/chapitres/avances/chapitre-63-frontend-integration/</link><pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/chapitres/avances/chapitre-63-frontend-integration/</guid><description>&lt;h2 id="-objectif-de-ce-chapitre"&gt;🎯 Objectif de ce Chapitre &lt;a href="#-objectif-de-ce-chapitre" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id="mon-problème--comment-intégrer-un-frontend-avec-une-api-platform-ddd-"&gt;Mon Problème : Comment Intégrer un Frontend avec une API Platform DDD ? &lt;a href="#mon-probl%c3%a8me--comment-int%c3%a9grer-un-frontend-avec-une-api-platform-ddd-" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Voici ce qui s&amp;rsquo;est passé avec Gyroscops&lt;/strong&gt; : J&amp;rsquo;avais une API Platform qui fonctionnait bien, mais comment créer une interface utilisateur ? Comment gérer l&amp;rsquo;authentification côté frontend ? Comment optimiser les performances ?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mais attendez&amp;hellip;&lt;/strong&gt; Quand j&amp;rsquo;ai voulu créer le frontend, j&amp;rsquo;étais perdu. React, Vue, Angular ? Comment gérer l&amp;rsquo;état ? Comment optimiser les requêtes ? Comment gérer les erreurs ?&lt;/p&gt;</description></item></channel></rss>