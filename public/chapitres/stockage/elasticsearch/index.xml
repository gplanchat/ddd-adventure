<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Stockage ElasticSearch on DDD Adventure</title><link>http://localhost:1313/chapitres/stockage/elasticsearch/</link><description>Recent content in Stockage ElasticSearch on DDD Adventure</description><generator>Hugo</generator><language>fr-fr</language><lastBuildDate>Thu, 19 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/chapitres/stockage/elasticsearch/index.xml" rel="self" type="application/rss+xml"/><item><title>Stockage ElasticSearch - Approche Classique</title><link>http://localhost:1313/chapitres/stockage/elasticsearch/chapitre-34-stockage-elasticsearch-classique/</link><pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/chapitres/stockage/elasticsearch/chapitre-34-stockage-elasticsearch-classique/</guid><description>&lt;h2 id="-contexte-et-objectifs-pourquoi-elasticsearch-pour-le-stockage-elasticsearch-nest-pas-seulement-un-moteur-de-recherche-cest-aussi-une-base-de-données-nosql-puissante-pour-les-cas-dusage-spécifiques-nécessitant---recherche-full-text--recherche-dans-le-contenu--analytics--agrégations-et-métriques-complexes--logs--stockage-et-analyse-de-logs--time-series--données-temporelles-avec-requêtes-rapides-avantages-d--recherche-puissante--full-text-search-avec-scoring--analytics-avancées--agrégations-complexes--scalabilité--distribution-horizontale-native--flexibilité--mapping-dynamique-des-données--performance--requêtes-très-rapides-sur-de-gros-volumes-contexte-gyroscopsdans-notre-écosystème-user--organization--workflow--cloud-resources--billing-elasticsearch-est-idéal-pour---logs-d--traçabilité-des-actions-utilisateurs--métriques-de-performance--monitoring-des-ressources-cloud--recherche-de-factures--recherche-full-text-dans-les-données-de-facturation--analytics-business--rapports-et-tableaux-de-bord--architecture-elasticsearch-classique-structure-des-données-index-et-typesjson--index-gyroscops-cloud-payments--mapping-----properties-------paymentid--type-keyword-------organizationid--type-keyword-------userid--type-keyword-------amount--type-double-------currency--type-keyword-------status--type-keyword-------description--type-text-analyzer-standard-------processedat--type-date-------metadata---------type-object--------properties-----------source--type-keyword-----------tags--type-keyword----------------------document-examplejson--paymentid-payment-123--organizationid-org-456--userid-user-789--amount-10000--currency-eur--status-completed--description-payment-for-cloud-resources-usage--processedat-2024-12-19t100000z--metadata-----source-api----tags-cloud-billing-monthly---flux-de-donnéesmermaidgraph-td----aapplication----belasticsearch-client----b----cindex-document----c----delasticsearch-cluster----d----esearchanalytics----e----fresponse--------gquery----b----hanalytics----b--implémentation-pratique-1-configuration-elasticsearch-client-elasticsearchphpphpnamespace-appinfrastructureelasticsearchuse-elasticsearchclientbuilderuse-elasticsearchclientclass-elasticsearchclientfactory----public-static-function-createarray-config-client------------builder--clientbuildercreate-----------------configuration-des-hosts--------builder-sethostsconfighosts-----------------configuration-de-lauthentification--------if-issetconfigusername--issetconfigpassword-------------builder-setbasicauthenticationconfigusername-configpassword-------------------------configuration-ssl--------if-issetconfigssl-------------builder-setsslverificationconfigsslverify-------------------------configuration-du-retry--------builder-setretriesconfigretries--3----------------return-builder-build-----configuration-symfonyyaml-configpackageselasticsearchyamlelasticsearch----hosts----------localhost9200----username-envelasticsearch_username----password-envelasticsearch_password----ssl--------verify-true----retries-3----timeout-30-2-repository-elasticsearch-repository-de-basephpphpnamespace-appinfrastructureelasticsearchuse-elasticsearchclientuse-psrlogloggerinterfaceabstract-class-elasticsearchrepository----protected-client-client----protected-string-index----protected-loggerinterface-logger----public-function-__constructclient-client-string-index-loggerinterface-logger------------this-client--client--------this-index--index--------this-logger--logger--------public-function-indexarray-document-string-id--null-array------------params--------------index--this-index------------body--document------------------------if-id-------------paramsid--id------------------------try-------------response--this-client-indexparams------------------------this-logger-infodocument-indexed-----------------index--this-index----------------id--response_id----------------result--responseresult------------------------------------return-response---------------------catch-exception-e-------------this-logger-errorfailed-to-index-document-----------------index--this-index----------------error--e-getmessage----------------document--document------------------------------------throw-e----------------public-function-getstring-id-array------------try-------------response--this-client-get----------------index--this-index----------------id--id------------------------------------return-response_source---------------------catch-elasticsearchcommonexceptionsmissing404exception-e-------------return-null---------catch-exception-e-------------this-logger-errorfailed-to-get-document-----------------index--this-index----------------id--id----------------error--e-getmessage------------------------------------throw-e----------------public-function-searcharray-query-array------------try-------------response--this-client-search----------------index--this-index----------------body--query------------------------------------return-response---------------------catch-exception-e-------------this-logger-errorfailed-to-search-documents-----------------index--this-index----------------query--query----------------error--e-getmessage------------------------------------throw-e----------------public-function-updatestring-id-array-document-array------------try-------------response--this-client-update----------------index--this-index----------------id--id----------------body----------------------doc--document----------------------------------------------------this-logger-infodocument-updated-----------------index--this-index----------------id--id----------------result--responseresult------------------------------------return-response---------------------catch-exception-e-------------this-logger-errorfailed-to-update-document-----------------index--this-index----------------id--id----------------error--e-getmessage------------------------------------throw-e----------------public-function-deletestring-id-array------------try-------------response--this-client-delete----------------index--this-index----------------id--id------------------------------------this-logger-infodocument-deleted-----------------index--this-index----------------id--id----------------result--responseresult------------------------------------return-response---------------------catch-exception-e-------------this-logger-errorfailed-to-delete-document-----------------index--this-index----------------id--id----------------error--e-getmessage------------------------------------throw-e-------------repository-spécialisé-pour-les-paiementsphpphpnamespace-appinfrastructureelasticsearchpaymentuse-appinfrastructureelasticsearchelasticsearchrepositoryuse-appdomainpaymentpaymentuse-appdomainpaymentpaymentrepositoryinterfaceclass-elasticsearchpaymentrepository-extends-elasticsearchrepository-implements-paymentrepositoryinterface----public-function-savepayment-payment-void------------document--------------paymentid--payment-getid------------organizationid--payment-getorganizationid------------userid--payment-getuserid------------amount--payment-getamount------------currency--payment-getcurrency------------status--payment-getstatus------------description--payment-getdescription------------processedat--payment-getprocessedat-formatc------------metadata--payment-getmetadata------------------------this-indexdocument-payment-getid--------public-function-findbyidstring-id-payment------------document--this-getid----------------if-document-------------return-null------------------------return-this-documenttopaymentdocument--------public-function-findbyorganizationstring-organizationid-int-limit--50-int-offset--0-array------------query--------------query------------------bool----------------------must--------------------------term--organizationid--organizationid------------------------------------------------------------sort------------------processedat--order--desc------------------------from--offset------------size--limit------------------------response--this-searchquery----------------payments----------foreach-responsehitshits-as-hit-------------payments--this-documenttopaymenthit_source------------------------return-payments--------public-function-searchbydescriptionstring-description-string-organizationid--null-array------------query--------------query------------------bool----------------------must--------------------------match--description--description------------------------------------------------------------sort------------------_score--order--desc----------------processedat--order--desc------------------------------------if-organizationid-------------queryqueryboolmust--term--organizationid--organizationid------------------------response--this-searchquery----------------payments----------foreach-responsehitshits-as-hit-------------payments--this-documenttopaymenthit_source------------------------return-payments--------public-function-getstatisticsstring-organizationid-datetime-from-datetime-to-array------------query--------------query------------------bool----------------------must--------------------------term--organizationid--organizationid------------------------range------------------------------processedat----------------------------------gte--from-formatc--------------------------------lte--to-formatc----------------------------------------------------------------------------------------------------------------aggs------------------status_stats----------------------terms--field--status--------------------aggs--------------------------total_amount--sum--field--amount------------------------avg_amount--avg--field--amount----------------------------------------------------currency_stats----------------------terms--field--currency--------------------aggs--------------------------total_amount--sum--field--amount----------------------------------------------------daily_stats----------------------date_histogram--------------------------field--processedat------------------------calendar_interval--day----------------------------------------aggs--------------------------total_amount--sum--field--amount------------------------count--value_count--field--paymentid------------------------------------------------------------------------response--this-searchquery----------------return-------------status_stats--responseaggregationsstatus_statsbuckets------------currency_stats--responseaggregationscurrency_statsbuckets------------daily_stats--responseaggregationsdaily_statsbuckets----------------private-function-documenttopaymentarray-document-payment------------return-new-payment------------documentpaymentid------------documentorganizationid------------documentuserid------------documentamount------------documentcurrency------------documentstatus------------documentdescription------------new-datetimedocumentprocessedat------------documentmetadata---------------3-service-de-recherche-service-de-recherche-avancéphpphpnamespace-appapplicationservicesearchuse-appinfrastructureelasticsearchelasticsearchrepositoryuse-psrlogloggerinterfaceclass-paymentsearchservice----private-elasticsearchrepository-repository----private-loggerinterface-logger----public-function-__constructelasticsearchrepository-repository-loggerinterface-logger------------this-repository--repository--------this-logger--logger--------public-function-searchpaymentspaymentsearchcriteria-criteria-paymentsearchresult------------query--this-buildsearchquerycriteria----------------response--this-repository-searchquery----------------return-new-paymentsearchresult------------this-extractpaymentsresponse------------responsehitstotalvalue------------criteria-getpage------------criteria-getsize----------------public-function-searchsuggestionsstring-query-string-organizationid--null-array------------searchquery--------------suggest------------------payment_suggestions----------------------prefix--query--------------------completion--------------------------field--descriptionsuggest------------------------size--10------------------------------------------------------------------------if-organizationid-------------searchqueryquery------------------term--organizationid--organizationid------------------------------------response--this-repository-searchsearchquery----------------suggestions----------if-issetresponsesuggestpayment_suggestions0options-------------foreach-responsesuggestpayment_suggestions0options-as-option-----------------suggestions----------------------text--optiontext--------------------score--optionscore----------------------------------------------------return-suggestions--------public-function-getanalyticsanalyticscriteria-criteria-array------------query--------------query------------------bool----------------------must--------------------------term--organizationid--criteria-getorganizationid------------------------range------------------------------processedat----------------------------------gte--criteria-getfrom-formatc--------------------------------lte--criteria-getto-formatc----------------------------------------------------------------------------------------------------------------aggs------------------trends----------------------date_histogram--------------------------field--processedat------------------------calendar_interval--criteria-getinterval----------------------------------------aggs--------------------------total_amount--sum--field--amount------------------------count--value_count--field--paymentid------------------------status_breakdown------------------------------terms--field--status----------------------------------------------------------------------------top_currencies----------------------terms--------------------------field--currency------------------------size--10----------------------------------------aggs--------------------------total_amount--sum--field--amount------------------------------------------------------------------------response--this-repository-searchquery----------------return-------------trends--responseaggregationstrendsbuckets------------top_currencies--responseaggregationstop_currenciesbuckets----------------private-function-buildsearchquerypaymentsearchcriteria-criteria-array------------query--------------query------------------bool----------------------must------------------------------------------sort------------------_score--order--desc----------------processedat--order--desc------------------------from--criteria-getoffset------------size--criteria-getsize-------------------------filtres-obligatoires--------if-criteria-getorganizationid-------------queryqueryboolmust------------------term--organizationid--criteria-getorganizationid-------------------------------------recherche-textuelle--------if-criteria-getsearchtext-------------queryqueryboolmust------------------multi_match----------------------query--criteria-getsearchtext--------------------fields--description2-paymentid-metadatatags--------------------type--best_fields--------------------fuzziness--auto-----------------------------------------------------filtres-de-statut--------if-criteria-getstatuses-------------queryqueryboolmust------------------terms--status--criteria-getstatuses-------------------------------------filtres-de-devise--------if-criteria-getcurrencies-------------queryqueryboolmust------------------terms--currency--criteria-getcurrencies-------------------------------------filtres-de-montant--------if-criteria-getminamount--criteria-getmaxamount-------------range--------------if-criteria-getminamount-----------------rangegte--criteria-getminamount------------------------if-criteria-getmaxamount-----------------rangelte--criteria-getmaxamount------------------------------------queryqueryboolmust------------------range--amount--range-------------------------------------filtres-de-date--------if-criteria-getfrom--criteria-getto-------------range--------------if-criteria-getfrom-----------------rangegte--criteria-getfrom-formatc------------------------if-criteria-getto-----------------rangelte--criteria-getto-formatc------------------------------------queryqueryboolmust------------------range--processedat--range------------------------------------return-query--------private-function-extractpaymentsarray-response-array------------payments----------foreach-responsehitshits-as-hit-------------payments--this-documenttopaymenthit_source------------------------return-payments------tests-et-validation-tests-unitairesphpphpnamespace-apptestsinfrastructureelasticsearchuse-phpunitframeworktestcaseuse-appinfrastructureelasticsearchelasticsearchrepositoryuse-elasticsearchclientuse-psrlogloggerinterfaceclass-elasticsearchrepositorytest-extends-testcase----private-elasticsearchrepository-repository----private-client-mockclient----private-loggerinterface-mocklogger----protected-function-setup-void------------this-mockclient--this-createmockclientclass--------this-mocklogger--this-createmockloggerinterfaceclass----------------this-repository--new-elasticsearchrepository------------this-mockclient------------test-index------------this-mocklogger----------------public-function-testindexdocument-void------------document--test--data--------expectedresponse--_id--test-id-result--created----------------this-mockclient-expectsthis-once-------------methodindex-------------with----------------index--test-index----------------body--document-------------------------willreturnexpectedresponse----------------result--this-repository-indexdocument----------------this-assertequalsexpectedresponse-result--------public-function-testsearchdocuments-void------------query--query--match_all----------expectedresponse--hits--hits------------------this-mockclient-expectsthis-once-------------methodsearch-------------with----------------index--test-index----------------body--query-------------------------willreturnexpectedresponse----------------result--this-repository-searchquery----------------this-assertequalsexpectedresponse-result-----tests-dphpphpnamespace-apptestsintegrationelasticsearchuse-appinfrastructureelasticsearchpaymentelasticsearchpaymentrepositoryuse-appdomainpaymentpaymentuse-elasticsearchclientbuilderclass-elasticsearchpaymentrepositorytest-extends-testcase----private-elasticsearchpaymentrepository-repository----private-elasticsearchclient-client----protected-function-setup-void------------this-client--clientbuildercreate-------------sethostslocalhost9200-------------build----------------this-repository--new-elasticsearchpaymentrepository------------this-client------------test-payments------------this-createmockloggerinterfaceclass-------------------------nettoyer-lindex-de-test--------try-------------this-client-indices-deleteindex--test-payments---------catch-exception-e--------------index-nexiste-pas-cest-normal----------------public-function-testsaveandfindpayment-void------------payment--new-payment------------payment-123------------org-456------------user-789------------10000------------eur------------completed------------test-payment------------new-datetime------------source--test------------------------this-repository-savepayment----------------found--this-repository-findbyidpayment-123----------------this-assertnotnullfound--------this-assertequalspayment-123-found-getid--------this-assertequals10000-found-getamount--------this-assertequalseur-found-getcurrency--------public-function-testsearchbyorganization-void-------------créer-plusieurs-paiements--------payments--------------new-paymentpayment-1-org-456-user-1-10000-eur-completed-payment-1-new-datetime------------new-paymentpayment-2-org-456-user-2-20000-usd-completed-payment-2-new-datetime------------new-paymentpayment-3-org-789-user-3-30000-eur-completed-payment-3-new-datetime------------------------foreach-payments-as-payment-------------this-repository-savepayment------------------------found--this-repository-findbyorganizationorg-456----------------this-assertcount2-found--------this-assertequalspayment-2-found0-getid--plus-récent--------this-assertequalspayment-1-found1-getid------performance-et-optimisation-stratégies-d-1-index-et-mapping-optimisésjson--mappings-----properties-------paymentid--type-keyword-------organizationid--type-keyword-------description----------type-text--------analyzer-standard--------fields-----------suggest-------------type-completion------------------------------processedat----------type-date--------format-strict_date_optional_timeepoch_millis------------amount--type-double-------metadatatags--type-keyword---------settings-----number_of_shards-1----number_of_replicas-0----refresh_interval-30s---2-requêtes-optimiséesphppublic-function-getoptimizedstatisticsstring-organizationid-datetime-from-datetime-to-array----query----------query--------------bool------------------must----------------------term--organizationid--organizationid--------------------range--------------------------processedat------------------------------gte--from-formatc----------------------------lte--to-formatc----------------------------------------------------------------------------------------aggs--------------status_stats------------------terms----------------------field--status--------------------size--10--------------------------------aggs----------------------total_amount--sum--field--amount--------------------------------------------size--0--pas-besoin-des-documents-seulement-les-agrégations------------return-this-searchquery-3-cache-et-paginationphppublic-function-searchwithcachepaymentsearchcriteria-criteria-paymentsearchresult----cachekey--payment_search_--md5serializecriteria--------if-cached--this-cache-getcachekey---------return-cached------------result--this-searchpaymentscriteria----this-cache-setcachekey-result-300--5-minutes--------return-result--critères-d-quand-utiliser-elasticsearch-classique--avantages--recherche-puissante--full-text-search-avec-scoring--analytics-avancées--agrégations-complexes--scalabilité--distribution-horizontale-native--flexibilité--mapping-dynamique-des-données--performance--requêtes-très-rapides-sur-de-gros-volumes--inconvénients--complexité--courbe-dapprentissage-importante--ressources--consommation-mémoire-importante--consistance--eventual-consistency--coût--infrastructure-plus-coûteuse--critères-d--recherche-full-text--besoin-de-recherche-dans-le-contenu--analytics--besoin-dagrégations-complexes--logs--stockage-et-analyse-de-logs--time-series--données-temporelles-avec-requêtes-rapides--équipe-expérimentée--maîtrise-delasticsearch--volume-important--gros-volumes-de-données--votre-prochaine-étapehahahugoshortcode45s0hbhbelasticsearch-classique-offre-une-approche-puissante-pour-la-recherche-et-l"&gt;🎯 &lt;strong&gt;Contexte et Objectifs&lt;/strong&gt;### **Pourquoi ElasticSearch pour le Stockage ?**ElasticSearch n&amp;rsquo;est pas seulement un moteur de recherche, c&amp;rsquo;est aussi une &lt;strong&gt;base de données NoSQL&lt;/strong&gt; puissante pour les cas d&amp;rsquo;usage spécifiques nécessitant :- &lt;strong&gt;Recherche full-text&lt;/strong&gt; : Recherche dans le contenu- &lt;strong&gt;Analytics&lt;/strong&gt; : Agrégations et métriques complexes- &lt;strong&gt;Logs&lt;/strong&gt; : Stockage et analyse de logs- &lt;strong&gt;Time-series&lt;/strong&gt; : Données temporelles avec requêtes rapides#### &lt;strong&gt;Avantages d&amp;rsquo;ElasticSearch&lt;/strong&gt;- &lt;strong&gt;Recherche puissante&lt;/strong&gt; : Full-text search avec scoring- &lt;strong&gt;Analytics avancées&lt;/strong&gt; : Agrégations complexes- &lt;strong&gt;Scalabilité&lt;/strong&gt; : Distribution horizontale native- &lt;strong&gt;Flexibilité&lt;/strong&gt; : Mapping dynamique des données- &lt;strong&gt;Performance&lt;/strong&gt; : Requêtes très rapides sur de gros volumes### &lt;strong&gt;Contexte Gyroscops&lt;/strong&gt;Dans notre écosystème &lt;strong&gt;User → Organization → Workflow → Cloud Resources → Billing&lt;/strong&gt;, ElasticSearch est idéal pour :- &lt;strong&gt;Logs d&amp;rsquo;application&lt;/strong&gt; : Traçabilité des actions utilisateurs- &lt;strong&gt;Métriques de performance&lt;/strong&gt; : Monitoring des ressources cloud- &lt;strong&gt;Recherche de factures&lt;/strong&gt; : Recherche full-text dans les données de facturation- &lt;strong&gt;Analytics business&lt;/strong&gt; : Rapports et tableaux de bord## 🏗️ &lt;strong&gt;Architecture ElasticSearch Classique&lt;/strong&gt;### &lt;strong&gt;Structure des Données&lt;/strong&gt;#### &lt;strong&gt;Index et Types&lt;/strong&gt;&lt;code&gt;json{ &amp;quot;index&amp;quot;: &amp;quot;Gyroscops Cloud-payments&amp;quot;, &amp;quot;mapping&amp;quot;: { &amp;quot;properties&amp;quot;: { &amp;quot;paymentId&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;organizationId&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;userId&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;amount&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;double&amp;quot; }, &amp;quot;currency&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;status&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;description&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;text&amp;quot;, &amp;quot;analyzer&amp;quot;: &amp;quot;standard&amp;quot; }, &amp;quot;processedAt&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;date&amp;quot; }, &amp;quot;metadata&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;, &amp;quot;properties&amp;quot;: { &amp;quot;source&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;tags&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; } } } } }}&lt;/code&gt;#### &lt;strong&gt;Document Example&lt;/strong&gt;&lt;code&gt;json{ &amp;quot;paymentId&amp;quot;: &amp;quot;payment-123&amp;quot;, &amp;quot;organizationId&amp;quot;: &amp;quot;org-456&amp;quot;, &amp;quot;userId&amp;quot;: &amp;quot;user-789&amp;quot;, &amp;quot;amount&amp;quot;: 100.00, &amp;quot;currency&amp;quot;: &amp;quot;EUR&amp;quot;, &amp;quot;status&amp;quot;: &amp;quot;completed&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;Payment for cloud resources usage&amp;quot;, &amp;quot;processedAt&amp;quot;: &amp;quot;2024-12-19T10:00:00Z&amp;quot;, &amp;quot;metadata&amp;quot;: { &amp;quot;source&amp;quot;: &amp;quot;api&amp;quot;, &amp;quot;tags&amp;quot;: [&amp;quot;cloud&amp;quot;, &amp;quot;billing&amp;quot;, &amp;quot;monthly&amp;quot;] }}&lt;/code&gt;### &lt;strong&gt;Flux de Données&lt;/strong&gt;&lt;code&gt;mermaidgraph TD A[Application] --&amp;gt; B[ElasticSearch Client] B --&amp;gt; C[Index Document] C --&amp;gt; D[ElasticSearch Cluster] D --&amp;gt; E[Search/Analytics] E --&amp;gt; F[Response] G[Query] --&amp;gt; B H[Analytics] --&amp;gt; B&lt;/code&gt;## 💻 &lt;strong&gt;Implémentation Pratique&lt;/strong&gt;### &lt;strong&gt;1. Configuration ElasticSearch&lt;/strong&gt;#### &lt;strong&gt;Client ElasticSearch&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Infrastructure\ElasticSearch;use Elasticsearch\ClientBuilder;use Elasticsearch\Client;class ElasticSearchClientFactory{ public static function create(array $config): Client { $builder = ClientBuilder::create(); // Configuration des hosts $builder-&amp;gt;setHosts($config['hosts']); // Configuration de l'authentification if (isset($config['username']) &amp;amp;&amp;amp; isset($config['password'])) { $builder-&amp;gt;setBasicAuthentication($config['username'], $config['password']); } // Configuration SSL if (isset($config['ssl'])) { $builder-&amp;gt;setSSLVerification($config['ssl']['verify']); } // Configuration du retry $builder-&amp;gt;setRetries($config['retries'] ?? 3); return $builder-&amp;gt;build(); }}&lt;/code&gt;#### &lt;strong&gt;Configuration Symfony&lt;/strong&gt;&lt;code&gt;yaml# config/packages/elasticsearch.yamlelasticsearch: hosts: - 'localhost:9200' username: '%env(ELASTICSEARCH_USERNAME)%' password: '%env(ELASTICSEARCH_PASSWORD)%' ssl: verify: true retries: 3 timeout: 30&lt;/code&gt;### &lt;strong&gt;2. Repository ElasticSearch&lt;/strong&gt;#### &lt;strong&gt;Repository de Base&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Infrastructure\ElasticSearch;use Elasticsearch\Client;use Psr\Log\LoggerInterface;abstract class ElasticSearchRepository{ protected Client $client; protected string $index; protected LoggerInterface $logger; public function __construct(Client $client, string $index, LoggerInterface $logger) { $this-&amp;gt;client = $client; $this-&amp;gt;index = $index; $this-&amp;gt;logger = $logger; } public function index(array $document, string $id = null): array { $params = [ 'index' =&amp;gt; $this-&amp;gt;index, 'body' =&amp;gt; $document ]; if ($id) { $params['id'] = $id; } try { $response = $this-&amp;gt;client-&amp;gt;index($params); $this-&amp;gt;logger-&amp;gt;info('Document indexed', [ 'index' =&amp;gt; $this-&amp;gt;index, 'id' =&amp;gt; $response['_id'], 'result' =&amp;gt; $response['result'] ]); return $response; } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Failed to index document', [ 'index' =&amp;gt; $this-&amp;gt;index, 'error' =&amp;gt; $e-&amp;gt;getMessage(), 'document' =&amp;gt; $document ]); throw $e; } } public function get(string $id): ?array { try { $response = $this-&amp;gt;client-&amp;gt;get([ 'index' =&amp;gt; $this-&amp;gt;index, 'id' =&amp;gt; $id ]); return $response['_source']; } catch (\Elasticsearch\Common\Exceptions\Missing404Exception $e) { return null; } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Failed to get document', [ 'index' =&amp;gt; $this-&amp;gt;index, 'id' =&amp;gt; $id, 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); throw $e; } } public function search(array $query): array { try { $response = $this-&amp;gt;client-&amp;gt;search([ 'index' =&amp;gt; $this-&amp;gt;index, 'body' =&amp;gt; $query ]); return $response; } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Failed to search documents', [ 'index' =&amp;gt; $this-&amp;gt;index, 'query' =&amp;gt; $query, 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); throw $e; } } public function update(string $id, array $document): array { try { $response = $this-&amp;gt;client-&amp;gt;update([ 'index' =&amp;gt; $this-&amp;gt;index, 'id' =&amp;gt; $id, 'body' =&amp;gt; [ 'doc' =&amp;gt; $document ] ]); $this-&amp;gt;logger-&amp;gt;info('Document updated', [ 'index' =&amp;gt; $this-&amp;gt;index, 'id' =&amp;gt; $id, 'result' =&amp;gt; $response['result'] ]); return $response; } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Failed to update document', [ 'index' =&amp;gt; $this-&amp;gt;index, 'id' =&amp;gt; $id, 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); throw $e; } } public function delete(string $id): array { try { $response = $this-&amp;gt;client-&amp;gt;delete([ 'index' =&amp;gt; $this-&amp;gt;index, 'id' =&amp;gt; $id ]); $this-&amp;gt;logger-&amp;gt;info('Document deleted', [ 'index' =&amp;gt; $this-&amp;gt;index, 'id' =&amp;gt; $id, 'result' =&amp;gt; $response['result'] ]); return $response; } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Failed to delete document', [ 'index' =&amp;gt; $this-&amp;gt;index, 'id' =&amp;gt; $id, 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); throw $e; } }}&lt;/code&gt;#### &lt;strong&gt;Repository Spécialisé pour les Paiements&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Infrastructure\ElasticSearch\Payment;use App\Infrastructure\ElasticSearch\ElasticSearchRepository;use App\Domain\Payment\Payment;use App\Domain\Payment\PaymentRepositoryInterface;class ElasticSearchPaymentRepository extends ElasticSearchRepository implements PaymentRepositoryInterface{ public function save(Payment $payment): void { $document = [ 'paymentId' =&amp;gt; $payment-&amp;gt;getId(), 'organizationId' =&amp;gt; $payment-&amp;gt;getOrganizationId(), 'userId' =&amp;gt; $payment-&amp;gt;getUserId(), 'amount' =&amp;gt; $payment-&amp;gt;getAmount(), 'currency' =&amp;gt; $payment-&amp;gt;getCurrency(), 'status' =&amp;gt; $payment-&amp;gt;getStatus(), 'description' =&amp;gt; $payment-&amp;gt;getDescription(), 'processedAt' =&amp;gt; $payment-&amp;gt;getProcessedAt()-&amp;gt;format('c'), 'metadata' =&amp;gt; $payment-&amp;gt;getMetadata() ]; $this-&amp;gt;index($document, $payment-&amp;gt;getId()); } public function findById(string $id): ?Payment { $document = $this-&amp;gt;get($id); if (!$document) { return null; } return $this-&amp;gt;documentToPayment($document); } public function findByOrganization(string $organizationId, int $limit = 50, int $offset = 0): array { $query = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [ ['term' =&amp;gt; ['organizationId' =&amp;gt; $organizationId]] ] ] ], 'sort' =&amp;gt; [ ['processedAt' =&amp;gt; ['order' =&amp;gt; 'desc']] ], 'from' =&amp;gt; $offset, 'size' =&amp;gt; $limit ]; $response = $this-&amp;gt;search($query); $payments = []; foreach ($response['hits']['hits'] as $hit) { $payments[] = $this-&amp;gt;documentToPayment($hit['_source']); } return $payments; } public function searchByDescription(string $description, string $organizationId = null): array { $query = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [ ['match' =&amp;gt; ['description' =&amp;gt; $description]] ] ] ], 'sort' =&amp;gt; [ ['_score' =&amp;gt; ['order' =&amp;gt; 'desc']], ['processedAt' =&amp;gt; ['order' =&amp;gt; 'desc']] ] ]; if ($organizationId) { $query['query']['bool']['must'][] = ['term' =&amp;gt; ['organizationId' =&amp;gt; $organizationId]]; } $response = $this-&amp;gt;search($query); $payments = []; foreach ($response['hits']['hits'] as $hit) { $payments[] = $this-&amp;gt;documentToPayment($hit['_source']); } return $payments; } public function getStatistics(string $organizationId, \DateTime $from, \DateTime $to): array { $query = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [ ['term' =&amp;gt; ['organizationId' =&amp;gt; $organizationId]], ['range' =&amp;gt; [ 'processedAt' =&amp;gt; [ 'gte' =&amp;gt; $from-&amp;gt;format('c'), 'lte' =&amp;gt; $to-&amp;gt;format('c') ] ]] ] ] ], 'aggs' =&amp;gt; [ 'status_stats' =&amp;gt; [ 'terms' =&amp;gt; ['field' =&amp;gt; 'status'], 'aggs' =&amp;gt; [ 'total_amount' =&amp;gt; ['sum' =&amp;gt; ['field' =&amp;gt; 'amount']], 'avg_amount' =&amp;gt; ['avg' =&amp;gt; ['field' =&amp;gt; 'amount']] ] ], 'currency_stats' =&amp;gt; [ 'terms' =&amp;gt; ['field' =&amp;gt; 'currency'], 'aggs' =&amp;gt; [ 'total_amount' =&amp;gt; ['sum' =&amp;gt; ['field' =&amp;gt; 'amount']] ] ], 'daily_stats' =&amp;gt; [ 'date_histogram' =&amp;gt; [ 'field' =&amp;gt; 'processedAt', 'calendar_interval' =&amp;gt; 'day' ], 'aggs' =&amp;gt; [ 'total_amount' =&amp;gt; ['sum' =&amp;gt; ['field' =&amp;gt; 'amount']], 'count' =&amp;gt; ['value_count' =&amp;gt; ['field' =&amp;gt; 'paymentId']] ] ] ] ]; $response = $this-&amp;gt;search($query); return [ 'status_stats' =&amp;gt; $response['aggregations']['status_stats']['buckets'], 'currency_stats' =&amp;gt; $response['aggregations']['currency_stats']['buckets'], 'daily_stats' =&amp;gt; $response['aggregations']['daily_stats']['buckets'] ]; } private function documentToPayment(array $document): Payment { return new Payment( $document['paymentId'], $document['organizationId'], $document['userId'], $document['amount'], $document['currency'], $document['status'], $document['description'], new \DateTime($document['processedAt']), $document['metadata'] ?? [] ); }}&lt;/code&gt;### &lt;strong&gt;3. Service de Recherche&lt;/strong&gt;#### &lt;strong&gt;Service de Recherche Avancé&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Application\Service\Search;use App\Infrastructure\ElasticSearch\ElasticSearchRepository;use Psr\Log\LoggerInterface;class PaymentSearchService{ private ElasticSearchRepository $repository; private LoggerInterface $logger; public function __construct(ElasticSearchRepository $repository, LoggerInterface $logger) { $this-&amp;gt;repository = $repository; $this-&amp;gt;logger = $logger; } public function searchPayments(PaymentSearchCriteria $criteria): PaymentSearchResult { $query = $this-&amp;gt;buildSearchQuery($criteria); $response = $this-&amp;gt;repository-&amp;gt;search($query); return new PaymentSearchResult( $this-&amp;gt;extractPayments($response), $response['hits']['total']['value'], $criteria-&amp;gt;getPage(), $criteria-&amp;gt;getSize() ); } public function searchSuggestions(string $query, string $organizationId = null): array { $searchQuery = [ 'suggest' =&amp;gt; [ 'payment_suggestions' =&amp;gt; [ 'prefix' =&amp;gt; $query, 'completion' =&amp;gt; [ 'field' =&amp;gt; 'description.suggest', 'size' =&amp;gt; 10 ] ] ] ]; if ($organizationId) { $searchQuery['query'] = [ 'term' =&amp;gt; ['organizationId' =&amp;gt; $organizationId] ]; } $response = $this-&amp;gt;repository-&amp;gt;search($searchQuery); $suggestions = []; if (isset($response['suggest']['payment_suggestions'][0]['options'])) { foreach ($response['suggest']['payment_suggestions'][0]['options'] as $option) { $suggestions[] = [ 'text' =&amp;gt; $option['text'], 'score' =&amp;gt; $option['score'] ]; } } return $suggestions; } public function getAnalytics(AnalyticsCriteria $criteria): array { $query = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [ ['term' =&amp;gt; ['organizationId' =&amp;gt; $criteria-&amp;gt;getOrganizationId()]], ['range' =&amp;gt; [ 'processedAt' =&amp;gt; [ 'gte' =&amp;gt; $criteria-&amp;gt;getFrom()-&amp;gt;format('c'), 'lte' =&amp;gt; $criteria-&amp;gt;getTo()-&amp;gt;format('c') ] ]] ] ] ], 'aggs' =&amp;gt; [ 'trends' =&amp;gt; [ 'date_histogram' =&amp;gt; [ 'field' =&amp;gt; 'processedAt', 'calendar_interval' =&amp;gt; $criteria-&amp;gt;getInterval() ], 'aggs' =&amp;gt; [ 'total_amount' =&amp;gt; ['sum' =&amp;gt; ['field' =&amp;gt; 'amount']], 'count' =&amp;gt; ['value_count' =&amp;gt; ['field' =&amp;gt; 'paymentId']], 'status_breakdown' =&amp;gt; [ 'terms' =&amp;gt; ['field' =&amp;gt; 'status'] ] ] ], 'top_currencies' =&amp;gt; [ 'terms' =&amp;gt; [ 'field' =&amp;gt; 'currency', 'size' =&amp;gt; 10 ], 'aggs' =&amp;gt; [ 'total_amount' =&amp;gt; ['sum' =&amp;gt; ['field' =&amp;gt; 'amount']] ] ] ] ]; $response = $this-&amp;gt;repository-&amp;gt;search($query); return [ 'trends' =&amp;gt; $response['aggregations']['trends']['buckets'], 'top_currencies' =&amp;gt; $response['aggregations']['top_currencies']['buckets'] ]; } private function buildSearchQuery(PaymentSearchCriteria $criteria): array { $query = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [] ] ], 'sort' =&amp;gt; [ ['_score' =&amp;gt; ['order' =&amp;gt; 'desc']], ['processedAt' =&amp;gt; ['order' =&amp;gt; 'desc']] ], 'from' =&amp;gt; $criteria-&amp;gt;getOffset(), 'size' =&amp;gt; $criteria-&amp;gt;getSize() ]; // Filtres obligatoires if ($criteria-&amp;gt;getOrganizationId()) { $query['query']['bool']['must'][] = [ 'term' =&amp;gt; ['organizationId' =&amp;gt; $criteria-&amp;gt;getOrganizationId()] ]; } // Recherche textuelle if ($criteria-&amp;gt;getSearchText()) { $query['query']['bool']['must'][] = [ 'multi_match' =&amp;gt; [ 'query' =&amp;gt; $criteria-&amp;gt;getSearchText(), 'fields' =&amp;gt; ['description^2', 'paymentId', 'metadata.tags'], 'type' =&amp;gt; 'best_fields', 'fuzziness' =&amp;gt; 'AUTO' ] ]; } // Filtres de statut if ($criteria-&amp;gt;getStatuses()) { $query['query']['bool']['must'][] = [ 'terms' =&amp;gt; ['status' =&amp;gt; $criteria-&amp;gt;getStatuses()] ]; } // Filtres de devise if ($criteria-&amp;gt;getCurrencies()) { $query['query']['bool']['must'][] = [ 'terms' =&amp;gt; ['currency' =&amp;gt; $criteria-&amp;gt;getCurrencies()] ]; } // Filtres de montant if ($criteria-&amp;gt;getMinAmount() || $criteria-&amp;gt;getMaxAmount()) { $range = []; if ($criteria-&amp;gt;getMinAmount()) { $range['gte'] = $criteria-&amp;gt;getMinAmount(); } if ($criteria-&amp;gt;getMaxAmount()) { $range['lte'] = $criteria-&amp;gt;getMaxAmount(); } $query['query']['bool']['must'][] = [ 'range' =&amp;gt; ['amount' =&amp;gt; $range] ]; } // Filtres de date if ($criteria-&amp;gt;getFrom() || $criteria-&amp;gt;getTo()) { $range = []; if ($criteria-&amp;gt;getFrom()) { $range['gte'] = $criteria-&amp;gt;getFrom()-&amp;gt;format('c'); } if ($criteria-&amp;gt;getTo()) { $range['lte'] = $criteria-&amp;gt;getTo()-&amp;gt;format('c'); } $query['query']['bool']['must'][] = [ 'range' =&amp;gt; ['processedAt' =&amp;gt; $range] ]; } return $query; } private function extractPayments(array $response): array { $payments = []; foreach ($response['hits']['hits'] as $hit) { $payments[] = $this-&amp;gt;documentToPayment($hit['_source']); } return $payments; }}&lt;/code&gt;## 🧪 &lt;strong&gt;Tests et Validation&lt;/strong&gt;### &lt;strong&gt;Tests Unitaires&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Tests\Infrastructure\ElasticSearch;use PHPUnit\Framework\TestCase;use App\Infrastructure\ElasticSearch\ElasticSearchRepository;use Elasticsearch\Client;use Psr\Log\LoggerInterface;class ElasticSearchRepositoryTest extends TestCase{ private ElasticSearchRepository $repository; private Client $mockClient; private LoggerInterface $mockLogger; protected function setUp(): void { $this-&amp;gt;mockClient = $this-&amp;gt;createMock(Client::class); $this-&amp;gt;mockLogger = $this-&amp;gt;createMock(LoggerInterface::class); $this-&amp;gt;repository = new ElasticSearchRepository( $this-&amp;gt;mockClient, 'test-index', $this-&amp;gt;mockLogger ); } public function testIndexDocument(): void { $document = ['test' =&amp;gt; 'data']; $expectedResponse = ['_id' =&amp;gt; 'test-id', 'result' =&amp;gt; 'created']; $this-&amp;gt;mockClient-&amp;gt;expects($this-&amp;gt;once()) -&amp;gt;method('index') -&amp;gt;with([ 'index' =&amp;gt; 'test-index', 'body' =&amp;gt; $document ]) -&amp;gt;willReturn($expectedResponse); $result = $this-&amp;gt;repository-&amp;gt;index($document); $this-&amp;gt;assertEquals($expectedResponse, $result); } public function testSearchDocuments(): void { $query = ['query' =&amp;gt; ['match_all' =&amp;gt; []]]; $expectedResponse = ['hits' =&amp;gt; ['hits' =&amp;gt; []]]; $this-&amp;gt;mockClient-&amp;gt;expects($this-&amp;gt;once()) -&amp;gt;method('search') -&amp;gt;with([ 'index' =&amp;gt; 'test-index', 'body' =&amp;gt; $query ]) -&amp;gt;willReturn($expectedResponse); $result = $this-&amp;gt;repository-&amp;gt;search($query); $this-&amp;gt;assertEquals($expectedResponse, $result); }}&lt;/code&gt;### &lt;strong&gt;Tests d&amp;rsquo;Intégration&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Tests\Integration\ElasticSearch;use App\Infrastructure\ElasticSearch\Payment\ElasticSearchPaymentRepository;use App\Domain\Payment\Payment;use Elasticsearch\ClientBuilder;class ElasticSearchPaymentRepositoryTest extends TestCase{ private ElasticSearchPaymentRepository $repository; private \Elasticsearch\Client $client; protected function setUp(): void { $this-&amp;gt;client = ClientBuilder::create() -&amp;gt;setHosts(['localhost:9200']) -&amp;gt;build(); $this-&amp;gt;repository = new ElasticSearchPaymentRepository( $this-&amp;gt;client, 'test-payments', $this-&amp;gt;createMock(LoggerInterface::class) ); // Nettoyer l'index de test try { $this-&amp;gt;client-&amp;gt;indices()-&amp;gt;delete(['index' =&amp;gt; 'test-payments']); } catch (\Exception $e) { // Index n'existe pas, c'est normal } } public function testSaveAndFindPayment(): void { $payment = new Payment( 'payment-123', 'org-456', 'user-789', 100.00, 'EUR', 'completed', 'Test payment', new \DateTime(), ['source' =&amp;gt; 'test'] ); $this-&amp;gt;repository-&amp;gt;save($payment); $found = $this-&amp;gt;repository-&amp;gt;findById('payment-123'); $this-&amp;gt;assertNotNull($found); $this-&amp;gt;assertEquals('payment-123', $found-&amp;gt;getId()); $this-&amp;gt;assertEquals(100.00, $found-&amp;gt;getAmount()); $this-&amp;gt;assertEquals('EUR', $found-&amp;gt;getCurrency()); } public function testSearchByOrganization(): void { // Créer plusieurs paiements $payments = [ new Payment('payment-1', 'org-456', 'user-1', 100.00, 'EUR', 'completed', 'Payment 1', new \DateTime()), new Payment('payment-2', 'org-456', 'user-2', 200.00, 'USD', 'completed', 'Payment 2', new \DateTime()), new Payment('payment-3', 'org-789', 'user-3', 300.00, 'EUR', 'completed', 'Payment 3', new \DateTime()) ]; foreach ($payments as $payment) { $this-&amp;gt;repository-&amp;gt;save($payment); } $found = $this-&amp;gt;repository-&amp;gt;findByOrganization('org-456'); $this-&amp;gt;assertCount(2, $found); $this-&amp;gt;assertEquals('payment-2', $found[0]-&amp;gt;getId()); // Plus récent $this-&amp;gt;assertEquals('payment-1', $found[1]-&amp;gt;getId()); }}&lt;/code&gt;## 📊 &lt;strong&gt;Performance et Optimisation&lt;/strong&gt;### &lt;strong&gt;Stratégies d&amp;rsquo;Optimisation&lt;/strong&gt;#### &lt;strong&gt;1. Index et Mapping Optimisés&lt;/strong&gt;&lt;code&gt;json{ &amp;quot;mappings&amp;quot;: { &amp;quot;properties&amp;quot;: { &amp;quot;paymentId&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;organizationId&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;description&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;text&amp;quot;, &amp;quot;analyzer&amp;quot;: &amp;quot;standard&amp;quot;, &amp;quot;fields&amp;quot;: { &amp;quot;suggest&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;completion&amp;quot; } } }, &amp;quot;processedAt&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;date&amp;quot;, &amp;quot;format&amp;quot;: &amp;quot;strict_date_optional_time||epoch_millis&amp;quot; }, &amp;quot;amount&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;double&amp;quot; }, &amp;quot;metadata.tags&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; } } }, &amp;quot;settings&amp;quot;: { &amp;quot;number_of_shards&amp;quot;: 1, &amp;quot;number_of_replicas&amp;quot;: 0, &amp;quot;refresh_interval&amp;quot;: &amp;quot;30s&amp;quot; }}&lt;/code&gt;#### &lt;strong&gt;2. Requêtes Optimisées&lt;/strong&gt;&lt;code&gt;phppublic function getOptimizedStatistics(string $organizationId, \DateTime $from, \DateTime $to): array{ $query = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [ ['term' =&amp;gt; ['organizationId' =&amp;gt; $organizationId]], ['range' =&amp;gt; [ 'processedAt' =&amp;gt; [ 'gte' =&amp;gt; $from-&amp;gt;format('c'), 'lte' =&amp;gt; $to-&amp;gt;format('c') ] ]] ] ] ], 'aggs' =&amp;gt; [ 'status_stats' =&amp;gt; [ 'terms' =&amp;gt; [ 'field' =&amp;gt; 'status', 'size' =&amp;gt; 10 ], 'aggs' =&amp;gt; [ 'total_amount' =&amp;gt; ['sum' =&amp;gt; ['field' =&amp;gt; 'amount']] ] ] ], 'size' =&amp;gt; 0 // Pas besoin des documents, seulement les agrégations ]; return $this-&amp;gt;search($query);}&lt;/code&gt;#### &lt;strong&gt;3. Cache et Pagination&lt;/strong&gt;&lt;code&gt;phppublic function searchWithCache(PaymentSearchCriteria $criteria): PaymentSearchResult{ $cacheKey = 'payment_search_' . md5(serialize($criteria)); if ($cached = $this-&amp;gt;cache-&amp;gt;get($cacheKey)) { return $cached; } $result = $this-&amp;gt;searchPayments($criteria); $this-&amp;gt;cache-&amp;gt;set($cacheKey, $result, 300); // 5 minutes return $result;}&lt;/code&gt;## 🎯 &lt;strong&gt;Critères d&amp;rsquo;Adoption&lt;/strong&gt;### &lt;strong&gt;Quand Utiliser ElasticSearch Classique&lt;/strong&gt;#### &lt;strong&gt;✅ Avantages&lt;/strong&gt;- &lt;strong&gt;Recherche puissante&lt;/strong&gt; : Full-text search avec scoring- &lt;strong&gt;Analytics avancées&lt;/strong&gt; : Agrégations complexes- &lt;strong&gt;Scalabilité&lt;/strong&gt; : Distribution horizontale native- &lt;strong&gt;Flexibilité&lt;/strong&gt; : Mapping dynamique des données- &lt;strong&gt;Performance&lt;/strong&gt; : Requêtes très rapides sur de gros volumes#### &lt;strong&gt;❌ Inconvénients&lt;/strong&gt;- &lt;strong&gt;Complexité&lt;/strong&gt; : Courbe d&amp;rsquo;apprentissage importante- &lt;strong&gt;Ressources&lt;/strong&gt; : Consommation mémoire importante- &lt;strong&gt;Consistance&lt;/strong&gt; : Eventual consistency- &lt;strong&gt;Coût&lt;/strong&gt; : Infrastructure plus coûteuse#### &lt;strong&gt;🎯 Critères d&amp;rsquo;Adoption&lt;/strong&gt;- &lt;strong&gt;Recherche full-text&lt;/strong&gt; : Besoin de recherche dans le contenu- &lt;strong&gt;Analytics&lt;/strong&gt; : Besoin d&amp;rsquo;agrégations complexes- &lt;strong&gt;Logs&lt;/strong&gt; : Stockage et analyse de logs- &lt;strong&gt;Time-series&lt;/strong&gt; : Données temporelles avec requêtes rapides- &lt;strong&gt;Équipe expérimentée&lt;/strong&gt; : Maîtrise d&amp;rsquo;ElasticSearch- &lt;strong&gt;Volume important&lt;/strong&gt; : Gros volumes de données## 🚀 &lt;strong&gt;Votre Prochaine Étape&lt;/strong&gt;

&lt;div class="chapter-navigation"&gt;
 &lt;h2 class="chapter-nav-title"&gt;🎯 Votre Prochaine Étape&lt;/h2&gt;
 &lt;p class="chapter-nav-subtitle"&gt;Maintenant que vous comprenez les concepts de base et que j'ai partagé mon expérience avec Gyroscops, quel est votre contexte ?&lt;/p&gt;</description></item><item><title>Stockage ElasticSearch - CQS</title><link>http://localhost:1313/chapitres/stockage/elasticsearch/chapitre-35-stockage-elasticsearch-cqs/</link><pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/chapitres/stockage/elasticsearch/chapitre-35-stockage-elasticsearch-cqs/</guid><description>&lt;h2 id="-contexte-et-objectifs-pourquoi-cqs-avec-elasticsearch-après-avoir-exploré-lapproche-classique-delasticsearch-nous-allons-maintenant-implémenter-le-command-query-separation-cqs-pour-optimiser-les-performances-et-la-scalabilité-avantages-de-cqs-avec-elasticsearch--performance-optimisée--séparation-claire-entre-écriture-et-lecture--scalabilité--possibilité-de-scaler-indépendamment-les-commandes-et-requêtes--flexibilité--requêtes-optimisées-pour-chaque-usage--maintenabilité--code-plus-clair-et-organisé-contexte-gyroscopsdans-notre-écosystème-user--organization--workflow--cloud-resources--billing-cqs-avec-elasticsearch-est-particulièrement-pertinent-pour---logs-d--écriture-rapide-des-logs-lecture-optimisée-pour-lanalyse--métriques-de-performance--collecte-des-métriques-requêtes-danalytics--recherche-de-factures--indexation-des-factures-recherche-full-text--analytics-business--agrégations-complexes-pour-les-rapports--architecture-cqs-avec-elasticsearch-séparation-des-responsabilités-côté-commande-write--command-handlers--traitement-des-commandes-métier--elasticsearch-writer--indexation-des-documents--event-handlers--gestion-des-événements-de-domaine--bulk-operations--optimisation-des-écritures-côté-requête-read--query-handlers--traitement-des-requêtes--elasticsearch-reader--requêtes-optimisées--search-services--services-de-recherche-spécialisés--caches--optimisation-des-performances-flux-de-donnéesmermaidgraph-td----acommand----bcommand-handler----b----celasticsearch-writer----c----delasticsearch-cluster----d----eindex-document--------fquery----gquery-handler----g----helasticsearch-reader----h----d----d----isearch-results----i----jresponse--------kevent----levent-handler----l----c--implémentation-pratique-1-command-side-implementation-elasticsearch-writerphpphpnamespace-appinfrastructureelasticsearchcommanduse-elasticsearchclientuse-psrlogloggerinterfaceclass-elasticsearchwriter----private-client-client----private-string-index----private-loggerinterface-logger----private-array-bulkbuffer------private-int-bulksize----public-function-__constructclient-client-string-index-loggerinterface-logger-int-bulksize--100------------this-client--client--------this-index--index--------this-logger--logger--------this-bulksize--bulksize--------public-function-indexdocumentstring-id-array-document-void------------this-bulkbuffer--------------index------------------_index--this-index----------------_id--id----------------------------this-bulkbuffer--document--------if-countthis-bulkbuffer--this-bulksize--2-------------this-flushbulk----------------public-function-updatedocumentstring-id-array-document-void------------this-bulkbuffer--------------update------------------_index--this-index----------------_id--id----------------------------this-bulkbuffer--------------doc--document------------doc_as_upsert--true----------------if-countthis-bulkbuffer--this-bulksize--2-------------this-flushbulk----------------public-function-deletedocumentstring-id-void------------this-bulkbuffer--------------delete------------------_index--this-index----------------_id--id----------------------------if-countthis-bulkbuffer--this-bulksize--2-------------this-flushbulk----------------public-function-flushbulk-void------------if-emptythis-bulkbuffer-------------return----------------try-------------response--this-client-bulk----------------body--this-bulkbuffer----------------refresh--false------------------------this-logger-infobulk-operation-completed-----------------index--this-index----------------operations--countthis-bulkbuffer--2----------------errors--responseerrors------------------------this-bulkbuffer-----------catch-exception-e-------------this-logger-errorbulk-operation-failed-----------------index--this-index----------------error--e-getmessage----------------operations--countthis-bulkbuffer--2------------------------throw-e----------------public-function-createindexarray-mapping---void------------params--------------index--this-index------------body------------------settings----------------------number_of_shards--1--------------------number_of_replicas--0--------------------refresh_interval--30s--------------------------------------------if-emptymapping-------------paramsbodymappings--mapping----------------try-------------this-client-indices-createparams------------this-logger-infoindex-created-index--this-index---------catch-exception-e-------------this-logger-errorfailed-to-create-index-----------------index--this-index----------------error--e-getmessage------------------------throw-e----------------public-function-refreshindex-void------------try-------------this-client-indices-refreshindex--this-index------------this-logger-infoindex-refreshed-index--this-index---------catch-exception-e-------------this-logger-errorfailed-to-refresh-index-----------------index--this-index----------------error--e-getmessage------------------------throw-e-------------command-handler-pour-les-paiementsphpphpnamespace-appapplicationcommandpaymentuse-appdomainpaymentpaymentuse-appdomainpaymentpaymentrepositoryinterfaceuse-appinfrastructureelasticsearchcommandelasticsearchwriteruse-psrlogloggerinterfaceclass-createpaymentcommandhandler----public-function-__construct--------private-paymentrepositoryinterface-paymentrepository--------private-elasticsearchwriter-elasticsearchwriter--------private-loggerinterface-logger---------public-function-handlecreatepaymentcommand-command-void------------try--------------créer-le-paiement-dans-le-repository-principal------------payment--new-payment----------------command-getpaymentid----------------command-getorganizationid----------------command-getuserid----------------command-getamount----------------command-getcurrency----------------pending----------------command-getdescription----------------new-datetime----------------command-getmetadata------------------------this-paymentrepository-savepayment-------------indexer-dans-elasticsearch-pour-la-recherche------------this-indexpaymentforsearchpayment------------this-logger-infopayment-created-and-indexed-----------------paymentid--payment-getid----------------organizationid--payment-getorganizationid---------------------catch-exception-e-------------this-logger-errorfailed-to-create-payment-----------------paymentid--command-getpaymentid----------------error--e-getmessage------------------------throw-e----------------private-function-indexpaymentforsearchpayment-payment-void------------document--------------paymentid--payment-getid------------organizationid--payment-getorganizationid------------userid--payment-getuserid------------amount--payment-getamount------------currency--payment-getcurrency------------status--payment-getstatus------------description--payment-getdescription------------processedat--payment-getprocessedat-formatc------------metadata--payment-getmetadata------------indexedat--new-datetime-formatc----------------this-elasticsearchwriter-indexdocumentpayment-getid-document-----event-handler-pour-la-synchronisationphpphpnamespace-appapplicationeventhandlerpaymentuse-appdomaineventdomaineventuse-appinfrastructureelasticsearchcommandelasticsearchwriteruse-psrlogloggerinterfaceclass-paymenteventhandler----public-function-__construct--------private-elasticsearchwriter-elasticsearchwriter--------private-loggerinterface-logger---------public-function-handledomainevent-event-void------------switch-event-geteventtype-------------case-paymentprocessed----------------this-handlepaymentprocessedevent----------------break------------case-paymentfailed----------------this-handlepaymentfailedevent----------------break------------case-paymentrefunded----------------this-handlepaymentrefundedevent----------------break----------------private-function-handlepaymentprocesseddomainevent-event-void------------update--------------status--completed------------processedat--event-gettimestamp-formatc------------updatedat--new-datetime-formatc----------------this-elasticsearchwriter-updatedocumentevent-getaggregateid-update--------this-logger-infopayment-processed-event-handled-------------paymentid--event-getaggregateid------------status--completed----------------private-function-handlepaymentfaileddomainevent-event-void------------update--------------status--failed------------error--event-getdataerror------------failedat--event-gettimestamp-formatc------------updatedat--new-datetime-formatc----------------this-elasticsearchwriter-updatedocumentevent-getaggregateid-update--------this-logger-infopayment-failed-event-handled-------------paymentid--event-getaggregateid------------status--failed----------------private-function-handlepaymentrefundeddomainevent-event-void------------update--------------status--refunded------------refundamount--event-getdatarefundamount------------refundedat--event-gettimestamp-formatc------------updatedat--new-datetime-formatc----------------this-elasticsearchwriter-updatedocumentevent-getaggregateid-update--------this-logger-infopayment-refunded-event-handled-------------paymentid--event-getaggregateid------------status--refunded-------------2-query-side-implementation-elasticsearch-readerphpphpnamespace-appinfrastructureelasticsearchqueryuse-elasticsearchclientuse-psrlogloggerinterfaceuse-psrcachecacheitempoolinterfaceclass-elasticsearchreader----private-client-client----private-string-index----private-loggerinterface-logger----private-cacheitempoolinterface-cache----public-function-__construct--------client-client---------string-index---------loggerinterface-logger--------cacheitempoolinterface-cache-------------this-client--client--------this-index--index--------this-logger--logger--------this-cache--cache--------public-function-searcharray-query-string-cachekey--null-array-------------vérifier-le-cache--------if-cachekey-------------cacheditem--this-cache-getitemcachekey------------if-cacheditem-ishit-----------------this-logger-debugsearch-result-served-from-cache---------------------index--this-index--------------------cachekey--cachekey--------------------------------return-cacheditem-get----------------------------try-------------response--this-client-search----------------index--this-index----------------body--query-------------------------mettre-en-cache------------if-cachekey-----------------cacheditem-setresponse----------------cacheditem-expiresafter300--5-minutes----------------this-cache-savecacheditem------------------------this-logger-infosearch-executed-----------------index--this-index----------------hits--responsehitstotalvalue----------------took--responsetook------------------------return-response---------catch-exception-e-------------this-logger-errorsearch-failed-----------------index--this-index----------------query--query----------------error--e-getmessage------------------------throw-e----------------public-function-getdocumentstring-id-array------------try-------------response--this-client-get----------------index--this-index----------------id--id------------------------return-response_source---------catch-elasticsearchcommonexceptionsmissing404exception-e-------------return-null---------catch-exception-e-------------this-logger-errorfailed-to-get-document-----------------index--this-index----------------id--id----------------error--e-getmessage------------------------throw-e----------------public-function-getsuggestionsstring-query-string-field--description-int-size--10-array------------searchquery--------------suggest------------------payment_suggestions----------------------prefix--query--------------------completion--------------------------field--field--suggest------------------------size--size------------------------------------------------------------size--0----------------response--this-searchsearchquery--------suggestions----------if-issetresponsesuggestpayment_suggestions0options-------------foreach-responsesuggestpayment_suggestions0options-as-option-----------------suggestions----------------------text--optiontext--------------------score--optionscore--------------------------------------------return-suggestions-----query-handler-pour-les-paiementsphpphpnamespace-appapplicationquerypaymentuse-appinfrastructureelasticsearchqueryelasticsearchreaderuse-appdomainpaymentpaymentuse-psrlogloggerinterfaceclass-paymentqueryhandler----private-elasticsearchreader-reader----private-loggerinterface-logger----public-function-__constructelasticsearchreader-reader-loggerinterface-logger------------this-reader--reader--------this-logger--logger--------public-function-handlegetpaymentbyidquery-query-payment------------document--this-reader-getdocumentquery-getpaymentid----------------if-document-------------return-null------------------------return-this-documenttopaymentdocument--------public-function-handlesearchpaymentsquery-query-paymentsearchresult------------searchquery--this-buildsearchqueryquery--------cachekey--this-generatecachekeyquery----------------response--this-reader-searchsearchquery-cachekey----------------payments----------foreach-responsehitshits-as-hit-------------payments--this-documenttopaymenthit_source------------------------return-new-paymentsearchresult------------payments------------responsehitstotalvalue------------query-getpage------------query-getsize----------------public-function-handlegetpaymentstatisticsquery-query-array------------searchquery--------------query------------------bool----------------------must--------------------------term--organizationid--query-getorganizationid------------------------range------------------------------processedat----------------------------------gte--query-getfrom-formatc--------------------------------lte--query-getto-formatc----------------------------------------------------------------------------------------------------------------aggs------------------status_stats----------------------terms--field--status--------------------aggs--------------------------total_amount--sum--field--amount------------------------avg_amount--avg--field--amount----------------------------------------------------currency_stats----------------------terms--field--currency--------------------aggs--------------------------total_amount--sum--field--amount----------------------------------------------------daily_stats----------------------date_histogram--------------------------field--processedat------------------------calendar_interval--day----------------------------------------aggs--------------------------total_amount--sum--field--amount------------------------count--value_count--field--paymentid------------------------------------------------------------size--0------------------------cachekey--payment_stats_--md5serializequery--------response--this-reader-searchsearchquery-cachekey----------------return-------------status_stats--responseaggregationsstatus_statsbuckets------------currency_stats--responseaggregationscurrency_statsbuckets------------daily_stats--responseaggregationsdaily_statsbuckets----------------public-function-handlegetpaymentsuggestionsquery-query-array------------return-this-reader-getsuggestions------------query-getquery------------description------------query-getsize----------------private-function-buildsearchquerysearchpaymentsquery-query-array------------searchquery--------------query------------------bool----------------------must------------------------------------------sort------------------_score--order--desc----------------processedat--order--desc------------------------from--query-getoffset------------size--query-getsize-------------------------filtres-obligatoires--------if-query-getorganizationid-------------searchqueryqueryboolmust------------------term--organizationid--query-getorganizationid-------------------------------------recherche-textuelle--------if-query-getsearchtext-------------searchqueryqueryboolmust------------------multi_match----------------------query--query-getsearchtext--------------------fields--description2-paymentid-metadatatags--------------------type--best_fields--------------------fuzziness--auto-----------------------------------------------------filtres-de-statut--------if-query-getstatuses-------------searchqueryqueryboolmust------------------terms--status--query-getstatuses-------------------------------------filtres-de-devise--------if-query-getcurrencies-------------searchqueryqueryboolmust------------------terms--currency--query-getcurrencies-------------------------------------filtres-de-montant--------if-query-getminamount--query-getmaxamount-------------range--------------if-query-getminamount-----------------rangegte--query-getminamount------------------------if-query-getmaxamount-----------------rangelte--query-getmaxamount------------------------------------searchqueryqueryboolmust------------------range--amount--range-------------------------------------filtres-de-date--------if-query-getfrom--query-getto-------------range--------------if-query-getfrom-----------------rangegte--query-getfrom-formatc------------------------if-query-getto-----------------rangelte--query-getto-formatc------------------------------------searchqueryqueryboolmust------------------range--processedat--range------------------------------------return-searchquery--------private-function-generatecachekeysearchpaymentsquery-query-string------------return-payment_search_--md5serializequery--------private-function-documenttopaymentarray-document-payment------------return-new-payment------------documentpaymentid------------documentorganizationid------------documentuserid------------documentamount------------documentcurrency------------documentstatus------------documentdescription------------new-datetimedocumentprocessedat------------documentmetadata---------------3-service-de-synchronisation-service-de-synchronisation-bidirectionnellephpphpnamespace-appapplicationserviceelasticsearchuse-appdomainpaymentpaymentrepositoryinterfaceuse-appinfrastructureelasticsearchcommandelasticsearchwriteruse-appinfrastructureelasticsearchqueryelasticsearchreaderuse-psrlogloggerinterfaceclass-paymentsynchronizationservice----public-function-__construct--------private-paymentrepositoryinterface-paymentrepository--------private-elasticsearchwriter-elasticsearchwriter--------private-elasticsearchreader-elasticsearchreader--------private-loggerinterface-logger---------public-function-synchronizepaymentstring-paymentid-void------------try--------------récupérer-le-paiement-depuis-le-repository-principal------------payment--this-paymentrepository-findbyidpaymentid------------------------if-payment-----------------this-logger-warningpayment-not-found-for-synchronization---------------------paymentid--paymentid--------------------------------return-------------------------indexer-dans-elasticsearch------------document------------------paymentid--payment-getid----------------organizationid--payment-getorganizationid----------------userid--payment-getuserid----------------amount--payment-getamount----------------currency--payment-getcurrency----------------status--payment-getstatus----------------description--payment-getdescription----------------processedat--payment-getprocessedat-formatc----------------metadata--payment-getmetadata----------------synchronizedat--new-datetime-formatc------------------------this-elasticsearchwriter-indexdocumentpaymentid-document------------this-logger-infopayment-synchronized-----------------paymentid--paymentid----------------status--payment-getstatus---------------------catch-exception-e-------------this-logger-errorpayment-synchronization-failed-----------------paymentid--paymentid----------------error--e-getmessage------------------------throw-e----------------public-function-synchronizeallpaymentsstring-organizationid--null-void------------try-------------payments--organizationid------------------this-paymentrepository-findbyorganizationorganizationid-----------------this-paymentrepository-findall------------count--0------------foreach-payments-as-payment-----------------this-synchronizepaymentpayment-getid----------------count------------------------this-logger-infoall-payments-synchronized-----------------count--count----------------organizationid--organizationid---------------------catch-exception-e-------------this-logger-errorbulk-synchronization-failed-----------------organizationid--organizationid----------------error--e-getmessage------------------------throw-e----------------public-function-verifysynchronizationstring-paymentid-bool------------try-------------payment--this-paymentrepository-findbyidpaymentid------------document--this-elasticsearchreader-getdocumentpaymentid------------if-payment--document-----------------return-false-------------------------vérifier-que-les-données-correspondent------------return-payment-getstatus--documentstatus--------------------payment-getamount--documentamount--------------------payment-getcurrency--documentcurrency---------catch-exception-e-------------this-logger-errorsynchronization-verification-failed-----------------paymentid--paymentid----------------error--e-getmessage------------------------return-false--------------tests-et-validation-tests-dphpphpnamespace-apptestsintegrationelasticsearchuse-appapplicationcommandpaymentcreatepaymentcommanduse-appapplicationcommandpaymentcreatepaymentcommandhandleruse-appapplicationquerypaymentgetpaymentbyidqueryuse-appapplicationquerypaymentsearchpaymentsqueryuse-appapplicationquerypaymentpaymentqueryhandleruse-appinfrastructureelasticsearchcommandelasticsearchwriteruse-appinfrastructureelasticsearchqueryelasticsearchreaderuse-elasticsearchclientbuilderclass-elasticsearchcqstest-extends-testcase----private-elasticsearchwriter-writer----private-elasticsearchreader-reader----private-createpaymentcommandhandler-commandhandler----private-paymentqueryhandler-queryhandler----protected-function-setup-void------------client--clientbuildercreate-sethostslocalhost9200-build----------------this-writer--new-elasticsearchwriterclient-test-payments-this-createmockloggerinterfaceclass--------this-reader--new-elasticsearchreaderclient-test-payments-this-createmockloggerinterfaceclass-this-createmockcacheitempoolinterfaceclass----------------this-commandhandler--new-createpaymentcommandhandler------------this-createmockpaymentrepositoryinterfaceclass------------this-writer------------this-createmockloggerinterfaceclass------------------------this-queryhandler--new-paymentqueryhandlerthis-reader-this-createmockloggerinterfaceclass--------public-function-testcommandqueryseparation-void-------------exécuter-une-commande--------command--new-createpaymentcommand------------payment-123------------org-456------------user-789------------10000------------eur------------test-payment------------source--test------------------------this-commandhandler-handlecommand-----------------vérifier-avec-une-requête--------query--new-getpaymentbyidquerypayment-123--------payment--this-queryhandler-handlequery----------------this-assertnotnullpayment--------this-assertequalspayment-123-payment-getid--------this-assertequals10000-payment-getamount--------public-function-testsearchfunctionality-void-------------créer-plusieurs-paiements--------payments--------------new-createpaymentcommandpayment-1-org-456-user-1-10000-eur-payment-1-------------new-createpaymentcommandpayment-2-org-456-user-2-20000-usd-payment-2-------------new-createpaymentcommandpayment-3-org-789-user-3-30000-eur-payment-3-------------------------foreach-payments-as-command-------------this-commandhandler-handlecommand-------------------------rechercher-par-organisation--------searchquery--new-searchpaymentsqueryorg-456-0-10--------result--this-queryhandler-handlesearchquery----------------this-assertcount2-result-getpayments--------this-assertequals2-result-gettotal------performance-et-optimisation-stratégies-d-1-bulk-operationsphppublic-function-bulkindexpaymentsarray-payments-void----foreach-payments-as-payment---------this-elasticsearchwriter-indexdocumentpayment-getid-this-paymenttodocumentpayment------------this-elasticsearchwriter-flushbulk-2-cache-stratégiquephppublic-function-searchwithcachesearchpaymentsquery-query-paymentsearchresult----cachekey--payment_search_--md5serializequery--------if-cached--this-cache-getcachekey---------return-cached------------result--this-searchpaymentsquery----this-cache-setcachekey-result-300--------return-result-3-index-optimisésjson--mappings-----properties-------paymentid--type-keyword-------organizationid--type-keyword-------description----------type-text--------fields-----------suggest--type-completion---------------------processedat--type-date-------amount--type-double---------settings-----number_of_shards-1----number_of_replicas-0----refresh_interval-30s----critères-d-quand-utiliser-cqs-avec-elasticsearch--avantages--performance-optimisée--séparation-claire-entre-écriture-et-lecture--scalabilité--possibilité-de-scaler-indépendamment--flexibilité--requêtes-optimisées-pour-chaque-usage--maintenabilité--code-plus-clair-et-organisé--cache-efficace--mise-en-cache-des-requêtes--inconvénients--complexité--architecture-plus-complexe--synchronisation--besoin-de-synchroniser-les-données--latence--délai-entre-écriture-et-lecture--expertise--équipe-expérimentée-requise--critères-d--performance-importante--besoins-de-performance-élevée--recherche-complexe--besoins-de-recherche-avancée--équipe-expérimentée--maîtrise-delasticsearch-et-cqs--volume-important--gros-volumes-de-données--scalabilité--besoin-de-scaler-indépendamment--votre-prochaine-étapehahahugoshortcode56s0hbhbcqs-avec-elasticsearch-offre-un-équilibre-optimal-entre-performance-et-simplicité-parfaitement-adapté-aux-besoins-de-recherche-et-d"&gt;🎯 &lt;strong&gt;Contexte et Objectifs&lt;/strong&gt;### **Pourquoi CQS avec ElasticSearch ?**Après avoir exploré l&amp;rsquo;approche classique d&amp;rsquo;ElasticSearch, nous allons maintenant implémenter le &lt;strong&gt;Command Query Separation (CQS)&lt;/strong&gt; pour optimiser les performances et la scalabilité.#### &lt;strong&gt;Avantages de CQS avec ElasticSearch&lt;/strong&gt;- &lt;strong&gt;Performance optimisée&lt;/strong&gt; : Séparation claire entre écriture et lecture- &lt;strong&gt;Scalabilité&lt;/strong&gt; : Possibilité de scaler indépendamment les commandes et requêtes- &lt;strong&gt;Flexibilité&lt;/strong&gt; : Requêtes optimisées pour chaque usage- &lt;strong&gt;Maintenabilité&lt;/strong&gt; : Code plus clair et organisé### &lt;strong&gt;Contexte Gyroscops&lt;/strong&gt;Dans notre écosystème &lt;strong&gt;User → Organization → Workflow → Cloud Resources → Billing&lt;/strong&gt;, CQS avec ElasticSearch est particulièrement pertinent pour :- &lt;strong&gt;Logs d&amp;rsquo;application&lt;/strong&gt; : Écriture rapide des logs, lecture optimisée pour l&amp;rsquo;analyse- &lt;strong&gt;Métriques de performance&lt;/strong&gt; : Collecte des métriques, requêtes d&amp;rsquo;analytics- &lt;strong&gt;Recherche de factures&lt;/strong&gt; : Indexation des factures, recherche full-text- &lt;strong&gt;Analytics business&lt;/strong&gt; : Agrégations complexes pour les rapports## 🏗️ &lt;strong&gt;Architecture CQS avec ElasticSearch&lt;/strong&gt;### &lt;strong&gt;Séparation des Responsabilités&lt;/strong&gt;#### &lt;strong&gt;Côté Commande (Write)&lt;/strong&gt;- &lt;strong&gt;Command Handlers&lt;/strong&gt; : Traitement des commandes métier- &lt;strong&gt;ElasticSearch Writer&lt;/strong&gt; : Indexation des documents- &lt;strong&gt;Event Handlers&lt;/strong&gt; : Gestion des événements de domaine- &lt;strong&gt;Bulk Operations&lt;/strong&gt; : Optimisation des écritures#### &lt;strong&gt;Côté Requête (Read)&lt;/strong&gt;- &lt;strong&gt;Query Handlers&lt;/strong&gt; : Traitement des requêtes- &lt;strong&gt;ElasticSearch Reader&lt;/strong&gt; : Requêtes optimisées- &lt;strong&gt;Search Services&lt;/strong&gt; : Services de recherche spécialisés- &lt;strong&gt;Caches&lt;/strong&gt; : Optimisation des performances### &lt;strong&gt;Flux de Données&lt;/strong&gt;&lt;code&gt;mermaidgraph TD A[Command] --&amp;gt; B[Command Handler] B --&amp;gt; C[ElasticSearch Writer] C --&amp;gt; D[ElasticSearch Cluster] D --&amp;gt; E[Index Document] F[Query] --&amp;gt; G[Query Handler] G --&amp;gt; H[ElasticSearch Reader] H --&amp;gt; D D --&amp;gt; I[Search Results] I --&amp;gt; J[Response] K[Event] --&amp;gt; L[Event Handler] L --&amp;gt; C&lt;/code&gt;## 💻 &lt;strong&gt;Implémentation Pratique&lt;/strong&gt;### &lt;strong&gt;1. Command Side Implementation&lt;/strong&gt;#### &lt;strong&gt;ElasticSearch Writer&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Infrastructure\ElasticSearch\Command;use Elasticsearch\Client;use Psr\Log\LoggerInterface;class ElasticSearchWriter{ private Client $client; private string $index; private LoggerInterface $logger; private array $bulkBuffer = []; private int $bulkSize; public function __construct(Client $client, string $index, LoggerInterface $logger, int $bulkSize = 100) { $this-&amp;gt;client = $client; $this-&amp;gt;index = $index; $this-&amp;gt;logger = $logger; $this-&amp;gt;bulkSize = $bulkSize; } public function indexDocument(string $id, array $document): void { $this-&amp;gt;bulkBuffer[] = [ 'index' =&amp;gt; [ '_index' =&amp;gt; $this-&amp;gt;index, '_id' =&amp;gt; $id ] ]; $this-&amp;gt;bulkBuffer[] = $document; if (count($this-&amp;gt;bulkBuffer) &amp;gt;= $this-&amp;gt;bulkSize * 2) { $this-&amp;gt;flushBulk(); } } public function updateDocument(string $id, array $document): void { $this-&amp;gt;bulkBuffer[] = [ 'update' =&amp;gt; [ '_index' =&amp;gt; $this-&amp;gt;index, '_id' =&amp;gt; $id ] ]; $this-&amp;gt;bulkBuffer[] = [ 'doc' =&amp;gt; $document, 'doc_as_upsert' =&amp;gt; true ]; if (count($this-&amp;gt;bulkBuffer) &amp;gt;= $this-&amp;gt;bulkSize * 2) { $this-&amp;gt;flushBulk(); } } public function deleteDocument(string $id): void { $this-&amp;gt;bulkBuffer[] = [ 'delete' =&amp;gt; [ '_index' =&amp;gt; $this-&amp;gt;index, '_id' =&amp;gt; $id ] ]; if (count($this-&amp;gt;bulkBuffer) &amp;gt;= $this-&amp;gt;bulkSize * 2) { $this-&amp;gt;flushBulk(); } } public function flushBulk(): void { if (empty($this-&amp;gt;bulkBuffer)) { return; } try { $response = $this-&amp;gt;client-&amp;gt;bulk([ 'body' =&amp;gt; $this-&amp;gt;bulkBuffer, 'refresh' =&amp;gt; false ]); $this-&amp;gt;logger-&amp;gt;info('Bulk operation completed', [ 'index' =&amp;gt; $this-&amp;gt;index, 'operations' =&amp;gt; count($this-&amp;gt;bulkBuffer) / 2, 'errors' =&amp;gt; $response['errors'] ]); $this-&amp;gt;bulkBuffer = []; } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Bulk operation failed', [ 'index' =&amp;gt; $this-&amp;gt;index, 'error' =&amp;gt; $e-&amp;gt;getMessage(), 'operations' =&amp;gt; count($this-&amp;gt;bulkBuffer) / 2 ]); throw $e; } } public function createIndex(array $mapping = []): void { $params = [ 'index' =&amp;gt; $this-&amp;gt;index, 'body' =&amp;gt; [ 'settings' =&amp;gt; [ 'number_of_shards' =&amp;gt; 1, 'number_of_replicas' =&amp;gt; 0, 'refresh_interval' =&amp;gt; '30s' ] ] ]; if (!empty($mapping)) { $params['body']['mappings'] = $mapping; } try { $this-&amp;gt;client-&amp;gt;indices()-&amp;gt;create($params); $this-&amp;gt;logger-&amp;gt;info('Index created', ['index' =&amp;gt; $this-&amp;gt;index]); } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Failed to create index', [ 'index' =&amp;gt; $this-&amp;gt;index, 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); throw $e; } } public function refreshIndex(): void { try { $this-&amp;gt;client-&amp;gt;indices()-&amp;gt;refresh(['index' =&amp;gt; $this-&amp;gt;index]); $this-&amp;gt;logger-&amp;gt;info('Index refreshed', ['index' =&amp;gt; $this-&amp;gt;index]); } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Failed to refresh index', [ 'index' =&amp;gt; $this-&amp;gt;index, 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); throw $e; } }}&lt;/code&gt;#### &lt;strong&gt;Command Handler pour les Paiements&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Application\Command\Payment;use App\Domain\Payment\Payment;use App\Domain\Payment\PaymentRepositoryInterface;use App\Infrastructure\ElasticSearch\Command\ElasticSearchWriter;use Psr\Log\LoggerInterface;class CreatePaymentCommandHandler{ public function __construct( private PaymentRepositoryInterface $paymentRepository, private ElasticSearchWriter $elasticSearchWriter, private LoggerInterface $logger ) {} public function handle(CreatePaymentCommand $command): void { try { // Créer le paiement dans le repository principal $payment = new Payment( $command-&amp;gt;getPaymentId(), $command-&amp;gt;getOrganizationId(), $command-&amp;gt;getUserId(), $command-&amp;gt;getAmount(), $command-&amp;gt;getCurrency(), 'pending', $command-&amp;gt;getDescription(), new \DateTime(), $command-&amp;gt;getMetadata() ); $this-&amp;gt;paymentRepository-&amp;gt;save($payment); // Indexer dans ElasticSearch pour la recherche $this-&amp;gt;indexPaymentForSearch($payment); $this-&amp;gt;logger-&amp;gt;info('Payment created and indexed', [ 'paymentId' =&amp;gt; $payment-&amp;gt;getId(), 'organizationId' =&amp;gt; $payment-&amp;gt;getOrganizationId() ]); } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Failed to create payment', [ 'paymentId' =&amp;gt; $command-&amp;gt;getPaymentId(), 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); throw $e; } } private function indexPaymentForSearch(Payment $payment): void { $document = [ 'paymentId' =&amp;gt; $payment-&amp;gt;getId(), 'organizationId' =&amp;gt; $payment-&amp;gt;getOrganizationId(), 'userId' =&amp;gt; $payment-&amp;gt;getUserId(), 'amount' =&amp;gt; $payment-&amp;gt;getAmount(), 'currency' =&amp;gt; $payment-&amp;gt;getCurrency(), 'status' =&amp;gt; $payment-&amp;gt;getStatus(), 'description' =&amp;gt; $payment-&amp;gt;getDescription(), 'processedAt' =&amp;gt; $payment-&amp;gt;getProcessedAt()-&amp;gt;format('c'), 'metadata' =&amp;gt; $payment-&amp;gt;getMetadata(), 'indexedAt' =&amp;gt; (new \DateTime())-&amp;gt;format('c') ]; $this-&amp;gt;elasticSearchWriter-&amp;gt;indexDocument($payment-&amp;gt;getId(), $document); }}&lt;/code&gt;#### &lt;strong&gt;Event Handler pour la Synchronisation&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Application\EventHandler\Payment;use App\Domain\Event\DomainEvent;use App\Infrastructure\ElasticSearch\Command\ElasticSearchWriter;use Psr\Log\LoggerInterface;class PaymentEventHandler{ public function __construct( private ElasticSearchWriter $elasticSearchWriter, private LoggerInterface $logger ) {} public function handle(DomainEvent $event): void { switch ($event-&amp;gt;getEventType()) { case 'PaymentProcessed': $this-&amp;gt;handlePaymentProcessed($event); break; case 'PaymentFailed': $this-&amp;gt;handlePaymentFailed($event); break; case 'PaymentRefunded': $this-&amp;gt;handlePaymentRefunded($event); break; } } private function handlePaymentProcessed(DomainEvent $event): void { $update = [ 'status' =&amp;gt; 'completed', 'processedAt' =&amp;gt; $event-&amp;gt;getTimestamp()-&amp;gt;format('c'), 'updatedAt' =&amp;gt; (new \DateTime())-&amp;gt;format('c') ]; $this-&amp;gt;elasticSearchWriter-&amp;gt;updateDocument($event-&amp;gt;getAggregateId(), $update); $this-&amp;gt;logger-&amp;gt;info('Payment processed event handled', [ 'paymentId' =&amp;gt; $event-&amp;gt;getAggregateId(), 'status' =&amp;gt; 'completed' ]); } private function handlePaymentFailed(DomainEvent $event): void { $update = [ 'status' =&amp;gt; 'failed', 'error' =&amp;gt; $event-&amp;gt;getData()['error'], 'failedAt' =&amp;gt; $event-&amp;gt;getTimestamp()-&amp;gt;format('c'), 'updatedAt' =&amp;gt; (new \DateTime())-&amp;gt;format('c') ]; $this-&amp;gt;elasticSearchWriter-&amp;gt;updateDocument($event-&amp;gt;getAggregateId(), $update); $this-&amp;gt;logger-&amp;gt;info('Payment failed event handled', [ 'paymentId' =&amp;gt; $event-&amp;gt;getAggregateId(), 'status' =&amp;gt; 'failed' ]); } private function handlePaymentRefunded(DomainEvent $event): void { $update = [ 'status' =&amp;gt; 'refunded', 'refundAmount' =&amp;gt; $event-&amp;gt;getData()['refundAmount'], 'refundedAt' =&amp;gt; $event-&amp;gt;getTimestamp()-&amp;gt;format('c'), 'updatedAt' =&amp;gt; (new \DateTime())-&amp;gt;format('c') ]; $this-&amp;gt;elasticSearchWriter-&amp;gt;updateDocument($event-&amp;gt;getAggregateId(), $update); $this-&amp;gt;logger-&amp;gt;info('Payment refunded event handled', [ 'paymentId' =&amp;gt; $event-&amp;gt;getAggregateId(), 'status' =&amp;gt; 'refunded' ]); }}&lt;/code&gt;### &lt;strong&gt;2. Query Side Implementation&lt;/strong&gt;#### &lt;strong&gt;ElasticSearch Reader&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Infrastructure\ElasticSearch\Query;use Elasticsearch\Client;use Psr\Log\LoggerInterface;use Psr\Cache\CacheItemPoolInterface;class ElasticSearchReader{ private Client $client; private string $index; private LoggerInterface $logger; private CacheItemPoolInterface $cache; public function __construct( Client $client, string $index, LoggerInterface $logger, CacheItemPoolInterface $cache ) { $this-&amp;gt;client = $client; $this-&amp;gt;index = $index; $this-&amp;gt;logger = $logger; $this-&amp;gt;cache = $cache; } public function search(array $query, string $cacheKey = null): array { // Vérifier le cache if ($cacheKey) { $cachedItem = $this-&amp;gt;cache-&amp;gt;getItem($cacheKey); if ($cachedItem-&amp;gt;isHit()) { $this-&amp;gt;logger-&amp;gt;debug('Search result served from cache', [ 'index' =&amp;gt; $this-&amp;gt;index, 'cacheKey' =&amp;gt; $cacheKey ]); return $cachedItem-&amp;gt;get(); } } try { $response = $this-&amp;gt;client-&amp;gt;search([ 'index' =&amp;gt; $this-&amp;gt;index, 'body' =&amp;gt; $query ]); // Mettre en cache if ($cacheKey) { $cachedItem-&amp;gt;set($response); $cachedItem-&amp;gt;expiresAfter(300); // 5 minutes $this-&amp;gt;cache-&amp;gt;save($cachedItem); } $this-&amp;gt;logger-&amp;gt;info('Search executed', [ 'index' =&amp;gt; $this-&amp;gt;index, 'hits' =&amp;gt; $response['hits']['total']['value'], 'took' =&amp;gt; $response['took'] ]); return $response; } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Search failed', [ 'index' =&amp;gt; $this-&amp;gt;index, 'query' =&amp;gt; $query, 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); throw $e; } } public function getDocument(string $id): ?array { try { $response = $this-&amp;gt;client-&amp;gt;get([ 'index' =&amp;gt; $this-&amp;gt;index, 'id' =&amp;gt; $id ]); return $response['_source']; } catch (\Elasticsearch\Common\Exceptions\Missing404Exception $e) { return null; } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Failed to get document', [ 'index' =&amp;gt; $this-&amp;gt;index, 'id' =&amp;gt; $id, 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); throw $e; } } public function getSuggestions(string $query, string $field = 'description', int $size = 10): array { $searchQuery = [ 'suggest' =&amp;gt; [ 'payment_suggestions' =&amp;gt; [ 'prefix' =&amp;gt; $query, 'completion' =&amp;gt; [ 'field' =&amp;gt; $field . '.suggest', 'size' =&amp;gt; $size ] ] ], 'size' =&amp;gt; 0 ]; $response = $this-&amp;gt;search($searchQuery); $suggestions = []; if (isset($response['suggest']['payment_suggestions'][0]['options'])) { foreach ($response['suggest']['payment_suggestions'][0]['options'] as $option) { $suggestions[] = [ 'text' =&amp;gt; $option['text'], 'score' =&amp;gt; $option['score'] ]; } } return $suggestions; }}&lt;/code&gt;#### &lt;strong&gt;Query Handler pour les Paiements&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Application\Query\Payment;use App\Infrastructure\ElasticSearch\Query\ElasticSearchReader;use App\Domain\Payment\Payment;use Psr\Log\LoggerInterface;class PaymentQueryHandler{ private ElasticSearchReader $reader; private LoggerInterface $logger; public function __construct(ElasticSearchReader $reader, LoggerInterface $logger) { $this-&amp;gt;reader = $reader; $this-&amp;gt;logger = $logger; } public function handle(GetPaymentByIdQuery $query): ?Payment { $document = $this-&amp;gt;reader-&amp;gt;getDocument($query-&amp;gt;getPaymentId()); if (!$document) { return null; } return $this-&amp;gt;documentToPayment($document); } public function handle(SearchPaymentsQuery $query): PaymentSearchResult { $searchQuery = $this-&amp;gt;buildSearchQuery($query); $cacheKey = $this-&amp;gt;generateCacheKey($query); $response = $this-&amp;gt;reader-&amp;gt;search($searchQuery, $cacheKey); $payments = []; foreach ($response['hits']['hits'] as $hit) { $payments[] = $this-&amp;gt;documentToPayment($hit['_source']); } return new PaymentSearchResult( $payments, $response['hits']['total']['value'], $query-&amp;gt;getPage(), $query-&amp;gt;getSize() ); } public function handle(GetPaymentStatisticsQuery $query): array { $searchQuery = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [ ['term' =&amp;gt; ['organizationId' =&amp;gt; $query-&amp;gt;getOrganizationId()]], ['range' =&amp;gt; [ 'processedAt' =&amp;gt; [ 'gte' =&amp;gt; $query-&amp;gt;getFrom()-&amp;gt;format('c'), 'lte' =&amp;gt; $query-&amp;gt;getTo()-&amp;gt;format('c') ] ]] ] ] ], 'aggs' =&amp;gt; [ 'status_stats' =&amp;gt; [ 'terms' =&amp;gt; ['field' =&amp;gt; 'status'], 'aggs' =&amp;gt; [ 'total_amount' =&amp;gt; ['sum' =&amp;gt; ['field' =&amp;gt; 'amount']], 'avg_amount' =&amp;gt; ['avg' =&amp;gt; ['field' =&amp;gt; 'amount']] ] ], 'currency_stats' =&amp;gt; [ 'terms' =&amp;gt; ['field' =&amp;gt; 'currency'], 'aggs' =&amp;gt; [ 'total_amount' =&amp;gt; ['sum' =&amp;gt; ['field' =&amp;gt; 'amount']] ] ], 'daily_stats' =&amp;gt; [ 'date_histogram' =&amp;gt; [ 'field' =&amp;gt; 'processedAt', 'calendar_interval' =&amp;gt; 'day' ], 'aggs' =&amp;gt; [ 'total_amount' =&amp;gt; ['sum' =&amp;gt; ['field' =&amp;gt; 'amount']], 'count' =&amp;gt; ['value_count' =&amp;gt; ['field' =&amp;gt; 'paymentId']] ] ] ], 'size' =&amp;gt; 0 ]; $cacheKey = 'payment_stats_' . md5(serialize($query)); $response = $this-&amp;gt;reader-&amp;gt;search($searchQuery, $cacheKey); return [ 'status_stats' =&amp;gt; $response['aggregations']['status_stats']['buckets'], 'currency_stats' =&amp;gt; $response['aggregations']['currency_stats']['buckets'], 'daily_stats' =&amp;gt; $response['aggregations']['daily_stats']['buckets'] ]; } public function handle(GetPaymentSuggestionsQuery $query): array { return $this-&amp;gt;reader-&amp;gt;getSuggestions( $query-&amp;gt;getQuery(), 'description', $query-&amp;gt;getSize() ); } private function buildSearchQuery(SearchPaymentsQuery $query): array { $searchQuery = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [] ] ], 'sort' =&amp;gt; [ ['_score' =&amp;gt; ['order' =&amp;gt; 'desc']], ['processedAt' =&amp;gt; ['order' =&amp;gt; 'desc']] ], 'from' =&amp;gt; $query-&amp;gt;getOffset(), 'size' =&amp;gt; $query-&amp;gt;getSize() ]; // Filtres obligatoires if ($query-&amp;gt;getOrganizationId()) { $searchQuery['query']['bool']['must'][] = [ 'term' =&amp;gt; ['organizationId' =&amp;gt; $query-&amp;gt;getOrganizationId()] ]; } // Recherche textuelle if ($query-&amp;gt;getSearchText()) { $searchQuery['query']['bool']['must'][] = [ 'multi_match' =&amp;gt; [ 'query' =&amp;gt; $query-&amp;gt;getSearchText(), 'fields' =&amp;gt; ['description^2', 'paymentId', 'metadata.tags'], 'type' =&amp;gt; 'best_fields', 'fuzziness' =&amp;gt; 'AUTO' ] ]; } // Filtres de statut if ($query-&amp;gt;getStatuses()) { $searchQuery['query']['bool']['must'][] = [ 'terms' =&amp;gt; ['status' =&amp;gt; $query-&amp;gt;getStatuses()] ]; } // Filtres de devise if ($query-&amp;gt;getCurrencies()) { $searchQuery['query']['bool']['must'][] = [ 'terms' =&amp;gt; ['currency' =&amp;gt; $query-&amp;gt;getCurrencies()] ]; } // Filtres de montant if ($query-&amp;gt;getMinAmount() || $query-&amp;gt;getMaxAmount()) { $range = []; if ($query-&amp;gt;getMinAmount()) { $range['gte'] = $query-&amp;gt;getMinAmount(); } if ($query-&amp;gt;getMaxAmount()) { $range['lte'] = $query-&amp;gt;getMaxAmount(); } $searchQuery['query']['bool']['must'][] = [ 'range' =&amp;gt; ['amount' =&amp;gt; $range] ]; } // Filtres de date if ($query-&amp;gt;getFrom() || $query-&amp;gt;getTo()) { $range = []; if ($query-&amp;gt;getFrom()) { $range['gte'] = $query-&amp;gt;getFrom()-&amp;gt;format('c'); } if ($query-&amp;gt;getTo()) { $range['lte'] = $query-&amp;gt;getTo()-&amp;gt;format('c'); } $searchQuery['query']['bool']['must'][] = [ 'range' =&amp;gt; ['processedAt' =&amp;gt; $range] ]; } return $searchQuery; } private function generateCacheKey(SearchPaymentsQuery $query): string { return 'payment_search_' . md5(serialize($query)); } private function documentToPayment(array $document): Payment { return new Payment( $document['paymentId'], $document['organizationId'], $document['userId'], $document['amount'], $document['currency'], $document['status'], $document['description'], new \DateTime($document['processedAt']), $document['metadata'] ?? [] ); }}&lt;/code&gt;### &lt;strong&gt;3. Service de Synchronisation&lt;/strong&gt;#### &lt;strong&gt;Service de Synchronisation Bidirectionnelle&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Application\Service\ElasticSearch;use App\Domain\Payment\PaymentRepositoryInterface;use App\Infrastructure\ElasticSearch\Command\ElasticSearchWriter;use App\Infrastructure\ElasticSearch\Query\ElasticSearchReader;use Psr\Log\LoggerInterface;class PaymentSynchronizationService{ public function __construct( private PaymentRepositoryInterface $paymentRepository, private ElasticSearchWriter $elasticSearchWriter, private ElasticSearchReader $elasticSearchReader, private LoggerInterface $logger ) {} public function synchronizePayment(string $paymentId): void { try { // Récupérer le paiement depuis le repository principal $payment = $this-&amp;gt;paymentRepository-&amp;gt;findById($paymentId); if (!$payment) { $this-&amp;gt;logger-&amp;gt;warning('Payment not found for synchronization', [ 'paymentId' =&amp;gt; $paymentId ]); return; } // Indexer dans ElasticSearch $document = [ 'paymentId' =&amp;gt; $payment-&amp;gt;getId(), 'organizationId' =&amp;gt; $payment-&amp;gt;getOrganizationId(), 'userId' =&amp;gt; $payment-&amp;gt;getUserId(), 'amount' =&amp;gt; $payment-&amp;gt;getAmount(), 'currency' =&amp;gt; $payment-&amp;gt;getCurrency(), 'status' =&amp;gt; $payment-&amp;gt;getStatus(), 'description' =&amp;gt; $payment-&amp;gt;getDescription(), 'processedAt' =&amp;gt; $payment-&amp;gt;getProcessedAt()-&amp;gt;format('c'), 'metadata' =&amp;gt; $payment-&amp;gt;getMetadata(), 'synchronizedAt' =&amp;gt; (new \DateTime())-&amp;gt;format('c') ]; $this-&amp;gt;elasticSearchWriter-&amp;gt;indexDocument($paymentId, $document); $this-&amp;gt;logger-&amp;gt;info('Payment synchronized', [ 'paymentId' =&amp;gt; $paymentId, 'status' =&amp;gt; $payment-&amp;gt;getStatus() ]); } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Payment synchronization failed', [ 'paymentId' =&amp;gt; $paymentId, 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); throw $e; } } public function synchronizeAllPayments(string $organizationId = null): void { try { $payments = $organizationId ? $this-&amp;gt;paymentRepository-&amp;gt;findByOrganization($organizationId) : $this-&amp;gt;paymentRepository-&amp;gt;findAll(); $count = 0; foreach ($payments as $payment) { $this-&amp;gt;synchronizePayment($payment-&amp;gt;getId()); $count++; } $this-&amp;gt;logger-&amp;gt;info('All payments synchronized', [ 'count' =&amp;gt; $count, 'organizationId' =&amp;gt; $organizationId ]); } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Bulk synchronization failed', [ 'organizationId' =&amp;gt; $organizationId, 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); throw $e; } } public function verifySynchronization(string $paymentId): bool { try { $payment = $this-&amp;gt;paymentRepository-&amp;gt;findById($paymentId); $document = $this-&amp;gt;elasticSearchReader-&amp;gt;getDocument($paymentId); if (!$payment || !$document) { return false; } // Vérifier que les données correspondent return $payment-&amp;gt;getStatus() === $document['status'] &amp;amp;&amp;amp; $payment-&amp;gt;getAmount() === $document['amount'] &amp;amp;&amp;amp; $payment-&amp;gt;getCurrency() === $document['currency']; } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Synchronization verification failed', [ 'paymentId' =&amp;gt; $paymentId, 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); return false; } }}&lt;/code&gt;## 🧪 &lt;strong&gt;Tests et Validation&lt;/strong&gt;### &lt;strong&gt;Tests d&amp;rsquo;Intégration CQS&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Tests\Integration\ElasticSearch;use App\Application\Command\Payment\CreatePaymentCommand;use App\Application\Command\Payment\CreatePaymentCommandHandler;use App\Application\Query\Payment\GetPaymentByIdQuery;use App\Application\Query\Payment\SearchPaymentsQuery;use App\Application\Query\Payment\PaymentQueryHandler;use App\Infrastructure\ElasticSearch\Command\ElasticSearchWriter;use App\Infrastructure\ElasticSearch\Query\ElasticSearchReader;use Elasticsearch\ClientBuilder;class ElasticSearchCqsTest extends TestCase{ private ElasticSearchWriter $writer; private ElasticSearchReader $reader; private CreatePaymentCommandHandler $commandHandler; private PaymentQueryHandler $queryHandler; protected function setUp(): void { $client = ClientBuilder::create()-&amp;gt;setHosts(['localhost:9200'])-&amp;gt;build(); $this-&amp;gt;writer = new ElasticSearchWriter($client, 'test-payments', $this-&amp;gt;createMock(LoggerInterface::class)); $this-&amp;gt;reader = new ElasticSearchReader($client, 'test-payments', $this-&amp;gt;createMock(LoggerInterface::class), $this-&amp;gt;createMock(CacheItemPoolInterface::class)); $this-&amp;gt;commandHandler = new CreatePaymentCommandHandler( $this-&amp;gt;createMock(PaymentRepositoryInterface::class), $this-&amp;gt;writer, $this-&amp;gt;createMock(LoggerInterface::class) ); $this-&amp;gt;queryHandler = new PaymentQueryHandler($this-&amp;gt;reader, $this-&amp;gt;createMock(LoggerInterface::class)); } public function testCommandQuerySeparation(): void { // Exécuter une commande $command = new CreatePaymentCommand( 'payment-123', 'org-456', 'user-789', 100.00, 'EUR', 'Test payment', ['source' =&amp;gt; 'test'] ); $this-&amp;gt;commandHandler-&amp;gt;handle($command); // Vérifier avec une requête $query = new GetPaymentByIdQuery('payment-123'); $payment = $this-&amp;gt;queryHandler-&amp;gt;handle($query); $this-&amp;gt;assertNotNull($payment); $this-&amp;gt;assertEquals('payment-123', $payment-&amp;gt;getId()); $this-&amp;gt;assertEquals(100.00, $payment-&amp;gt;getAmount()); } public function testSearchFunctionality(): void { // Créer plusieurs paiements $payments = [ new CreatePaymentCommand('payment-1', 'org-456', 'user-1', 100.00, 'EUR', 'Payment 1', []), new CreatePaymentCommand('payment-2', 'org-456', 'user-2', 200.00, 'USD', 'Payment 2', []), new CreatePaymentCommand('payment-3', 'org-789', 'user-3', 300.00, 'EUR', 'Payment 3', []) ]; foreach ($payments as $command) { $this-&amp;gt;commandHandler-&amp;gt;handle($command); } // Rechercher par organisation $searchQuery = new SearchPaymentsQuery('org-456', 0, 10); $result = $this-&amp;gt;queryHandler-&amp;gt;handle($searchQuery); $this-&amp;gt;assertCount(2, $result-&amp;gt;getPayments()); $this-&amp;gt;assertEquals(2, $result-&amp;gt;getTotal()); }}&lt;/code&gt;## 📊 &lt;strong&gt;Performance et Optimisation&lt;/strong&gt;### &lt;strong&gt;Stratégies d&amp;rsquo;Optimisation CQS&lt;/strong&gt;#### &lt;strong&gt;1. Bulk Operations&lt;/strong&gt;&lt;code&gt;phppublic function bulkIndexPayments(array $payments): void{ foreach ($payments as $payment) { $this-&amp;gt;elasticSearchWriter-&amp;gt;indexDocument($payment-&amp;gt;getId(), $this-&amp;gt;paymentToDocument($payment)); } $this-&amp;gt;elasticSearchWriter-&amp;gt;flushBulk();}&lt;/code&gt;#### &lt;strong&gt;2. Cache Stratégique&lt;/strong&gt;&lt;code&gt;phppublic function searchWithCache(SearchPaymentsQuery $query): PaymentSearchResult{ $cacheKey = 'payment_search_' . md5(serialize($query)); if ($cached = $this-&amp;gt;cache-&amp;gt;get($cacheKey)) { return $cached; } $result = $this-&amp;gt;searchPayments($query); $this-&amp;gt;cache-&amp;gt;set($cacheKey, $result, 300); return $result;}&lt;/code&gt;#### &lt;strong&gt;3. Index Optimisés&lt;/strong&gt;&lt;code&gt;json{ &amp;quot;mappings&amp;quot;: { &amp;quot;properties&amp;quot;: { &amp;quot;paymentId&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;organizationId&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;description&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;text&amp;quot;, &amp;quot;fields&amp;quot;: { &amp;quot;suggest&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;completion&amp;quot; } } }, &amp;quot;processedAt&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;date&amp;quot; }, &amp;quot;amount&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;double&amp;quot; } } }, &amp;quot;settings&amp;quot;: { &amp;quot;number_of_shards&amp;quot;: 1, &amp;quot;number_of_replicas&amp;quot;: 0, &amp;quot;refresh_interval&amp;quot;: &amp;quot;30s&amp;quot; }}&lt;/code&gt;## 🎯 &lt;strong&gt;Critères d&amp;rsquo;Adoption&lt;/strong&gt;### &lt;strong&gt;Quand Utiliser CQS avec ElasticSearch&lt;/strong&gt;#### &lt;strong&gt;✅ Avantages&lt;/strong&gt;- &lt;strong&gt;Performance optimisée&lt;/strong&gt; : Séparation claire entre écriture et lecture- &lt;strong&gt;Scalabilité&lt;/strong&gt; : Possibilité de scaler indépendamment- &lt;strong&gt;Flexibilité&lt;/strong&gt; : Requêtes optimisées pour chaque usage- &lt;strong&gt;Maintenabilité&lt;/strong&gt; : Code plus clair et organisé- &lt;strong&gt;Cache efficace&lt;/strong&gt; : Mise en cache des requêtes#### &lt;strong&gt;❌ Inconvénients&lt;/strong&gt;- &lt;strong&gt;Complexité&lt;/strong&gt; : Architecture plus complexe- &lt;strong&gt;Synchronisation&lt;/strong&gt; : Besoin de synchroniser les données- &lt;strong&gt;Latence&lt;/strong&gt; : Délai entre écriture et lecture- &lt;strong&gt;Expertise&lt;/strong&gt; : Équipe expérimentée requise#### &lt;strong&gt;🎯 Critères d&amp;rsquo;Adoption&lt;/strong&gt;- &lt;strong&gt;Performance importante&lt;/strong&gt; : Besoins de performance élevée- &lt;strong&gt;Recherche complexe&lt;/strong&gt; : Besoins de recherche avancée- &lt;strong&gt;Équipe expérimentée&lt;/strong&gt; : Maîtrise d&amp;rsquo;ElasticSearch et CQS- &lt;strong&gt;Volume important&lt;/strong&gt; : Gros volumes de données- &lt;strong&gt;Scalabilité&lt;/strong&gt; : Besoin de scaler indépendamment## 🚀 &lt;strong&gt;Votre Prochaine Étape&lt;/strong&gt;

&lt;div class="chapter-navigation"&gt;
 &lt;h2 class="chapter-nav-title"&gt;🎯 Votre Prochaine Étape&lt;/h2&gt;
 &lt;p class="chapter-nav-subtitle"&gt;Maintenant que vous comprenez les concepts de base et que j'ai partagé mon expérience avec Gyroscops, quel est votre contexte ?&lt;/p&gt;</description></item><item><title>Stockage ElasticSearch - CQRS</title><link>http://localhost:1313/chapitres/stockage/elasticsearch/chapitre-36-stockage-elasticsearch-cqrs/</link><pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/chapitres/stockage/elasticsearch/chapitre-36-stockage-elasticsearch-cqrs/</guid><description>&lt;h2 id="-contexte-et-objectifs-lnous-arrivons-maintenant-à-lapproche-la-plus-sophistiquée--cqrs-complet-avec-elasticsearch-cette-combinaison-offre-une-architecture-hautement-scalable-et-flexible-parfaite-pour-les-systèmes-complexes-nécessitant-recherche-et-analytics-pourquoi-cqrs-avec-elasticsearch---séparation-totale--commandes-et-requêtes-complètement-découplées--scalabilité-maximale--possibilité-de-scaler-indépendamment-chaque-côté--flexibilité--projections-multiples-pour-différents-besoins--performance-optimale--chaque-côté-optimisé-pour-son-usage--analytics-avancées--agrégations-complexes-et-rapports-contexte-gyroscopsdans-notre-écosystème-user--organization--workflow--cloud-resources--billing-cqrs-avec-elasticsearch-est-idéal-pour---système-de-facturation--commandes-de-paiement-requêtes-danalytics--logs-d--écriture-des-logs-analyse-et-monitoring--métriques-de-performance--collecte-des-métriques-dashboards--recherche-avancée--full-text-search-avec-scoring-et-suggestions--architecture-cqrs-avec-elasticsearch-séparation-complète-des-responsabilités-command-side-write--command-handlers--traitement-des-commandes-métier--elasticsearch-writer--indexation-des-documents--event-handlers--gestion-des-événements-de-domaine--command-bus--orchestration-des-commandes--bulk-operations--optimisation-des-écritures-query-side-read--query-handlers--traitement-des-requêtes--elasticsearch-reader--requêtes-optimisées--search-services--services-de-recherche-spécialisés--query-bus--orchestration-des-requêtes--caches--optimisation-des-performances-flux-de-données-completmermaidgraph-td----acommand----bcommand-bus----b----ccommand-handler----c----delasticsearch-writer----d----eelasticsearch-cluster----e----findex-document--------gquery----hquery-bus----h----iquery-handler----i----jelasticsearch-reader----j----e----e----ksearch-results----k----lresponse--------mevent----nevent-handler----n----d--------oprojection----pelasticsearch-writer----p----e--implémentation-complète-1-command-side-implementation-command-bus-avec-middlewarephpphpnamespace-appapplicationcommandbususe-appdomaincommandcommandinterfaceuse-appdomaincommandcommandhandlerinterfaceuse-psrlogloggerinterfaceclass-commandbus----private-array-handlers------private-array-middleware------private-loggerinterface-logger----public-function-__constructloggerinterface-logger------------this-logger--logger--------public-function-registerhandlerstring-commandclass-commandhandlerinterface-handler-void------------this-handlerscommandclass--handler--------public-function-addmiddlewarecallable-middleware-void------------this-middleware--middleware--------public-function-handlecommandinterface-command-void------------commandclass--get_classcommand----------------if-issetthis-handlerscommandclass-------------throw-new-invalidargumentexceptionno-handler-registered-for-command-commandclass----------------handler--this-handlerscommandclass-----------------exécuter-les-middleware--------this-executemiddlewarecommand-function-use-handler-command-------------this-logger-infoexecuting-command-----------------command--get_classcommand----------------data--command-toarray------------------------------------handler-handlecommand----------------private-function-executemiddlewarecommandinterface-command-callable-next-void------------middleware--array_reversethis-middleware----------------foreach-middleware-as-mw-------------next--function-use-mw-command-next-----------------return-mwcommand-next------------------------------------next-----elasticsearch-writer-avancéphpphpnamespace-appinfrastructureelasticsearchcommanduse-elasticsearchclientuse-psrlogloggerinterfaceclass-elasticsearchwriter----private-client-client----private-string-index----private-loggerinterface-logger----private-array-bulkbuffer------private-int-bulksize----private-string-routingfield----public-function-__construct--------client-client---------string-index---------loggerinterface-logger---------int-bulksize--100--------string-routingfield--organizationid-------------this-client--client--------this-index--index--------this-logger--logger--------this-bulksize--bulksize--------this-routingfield--routingfield--------public-function-indexdocumentstring-id-array-document-string-routing--null-void------------operation--------------index------------------_index--this-index----------------_id--id----------------------------if-routing-------------operationindexrouting--routing----------------this-bulkbuffer--operation--------this-bulkbuffer--document--------if-countthis-bulkbuffer--this-bulksize--2-------------this-flushbulk----------------public-function-updatedocumentstring-id-array-document-string-routing--null-void------------operation--------------update------------------_index--this-index----------------_id--id----------------------------if-routing-------------operationupdaterouting--routing----------------this-bulkbuffer--operation--------this-bulkbuffer--------------doc--document------------doc_as_upsert--true----------------if-countthis-bulkbuffer--this-bulksize--2-------------this-flushbulk----------------public-function-deletedocumentstring-id-string-routing--null-void------------operation--------------delete------------------_index--this-index----------------_id--id----------------------------if-routing-------------operationdeleterouting--routing----------------this-bulkbuffer--operation--------if-countthis-bulkbuffer--this-bulksize--2-------------this-flushbulk----------------public-function-flushbulk-void------------if-emptythis-bulkbuffer-------------return----------------try-------------response--this-client-bulk----------------body--this-bulkbuffer----------------refresh--false------------------------this-logger-infobulk-operation-completed-----------------index--this-index----------------operations--countthis-bulkbuffer--2----------------errors--responseerrors------------------------this-bulkbuffer-----------catch-exception-e-------------this-logger-errorbulk-operation-failed-----------------index--this-index----------------error--e-getmessage----------------operations--countthis-bulkbuffer--2------------------------throw-e----------------public-function-createindexwithmappingarray-mapping-void------------params--------------index--this-index------------body------------------settings----------------------number_of_shards--3--------------------number_of_replicas--1--------------------refresh_interval--30s--------------------analysis--------------------------analyzer------------------------------payment_analyzer----------------------------------type--custom--------------------------------tokenizer--standard--------------------------------filter--lowercase-stop--------------------------------------------------------------------------------------------------------mappings--mapping----------------------------try-------------this-client-indices-createparams------------this-logger-infoindex-created-with-mapping-index--this-index---------catch-exception-e-------------this-logger-errorfailed-to-create-index-----------------index--this-index----------------error--e-getmessage------------------------throw-e-------------command-handler-pour-les-paiementsphpphpnamespace-appapplicationcommandpaymentuse-appdomainpaymentpaymentuse-appdomainpaymentpaymentrepositoryinterfaceuse-appinfrastructureelasticsearchcommandelasticsearchwriteruse-appdomaineventeventbusinterfaceuse-psrlogloggerinterfaceclass-processpaymentcommandhandler-implements-commandhandlerinterface----public-function-__construct--------private-paymentrepositoryinterface-paymentrepository--------private-elasticsearchwriter-elasticsearchwriter--------private-eventbusinterface-eventbus--------private-loggerinterface-logger---------public-function-handleprocesspaymentcommand-command-void------------try--------------charger-le-paiement------------payment--this-paymentrepository-findbyidcommand-getpaymentid------------------------if-payment-----------------throw-new-invalidargumentexceptionpayment-not-found-command-getpaymentid-------------------------traiter-le-paiement------------payment-processpaymentcommand-getamount-command-getcurrency-------------------------sauvegarder-dans-le-repository-principal------------this-paymentrepository-savepayment-------------indexer-dans-elasticsearch-pour-la-recherche------------this-indexpaymentforsearchpayment-------------publier-lévénement------------event--new-paymentprocessedevent----------------payment-getid----------------payment-getamount----------------payment-getcurrency----------------payment-getorganizationid------------------------------------this-eventbus-publishevent------------this-logger-infopayment-processed-and-indexed-----------------paymentid--payment-getid----------------organizationid--payment-getorganizationid----------------amount--payment-getamount---------------------catch-exception-e-------------this-logger-errorpayment-processing-failed-----------------paymentid--command-getpaymentid----------------error--e-getmessage------------------------throw-e----------------private-function-indexpaymentforsearchpayment-payment-void------------document--------------paymentid--payment-getid------------organizationid--payment-getorganizationid------------userid--payment-getuserid------------amount--payment-getamount------------currency--payment-getcurrency------------status--payment-getstatus------------description--payment-getdescription------------processedat--payment-getprocessedat-formatc------------metadata--payment-getmetadata------------indexedat--new-datetime-formatc----------------this-elasticsearchwriter-indexdocument------------payment-getid------------document------------payment-getorganizationid-------------2-query-side-implementation-query-bus-avec-cachephpphpnamespace-appapplicationquerybususe-appdomainqueryqueryinterfaceuse-appdomainqueryqueryhandlerinterfaceuse-psrcachecacheitempoolinterfaceuse-psrlogloggerinterfaceclass-querybus----private-array-handlers------private-cacheitempoolinterface-cache----private-loggerinterface-logger----public-function-__constructcacheitempoolinterface-cache-loggerinterface-logger------------this-cache--cache--------this-logger--logger--------public-function-registerhandlerstring-queryclass-queryhandlerinterface-handler-void------------this-handlersqueryclass--handler--------public-function-handlequeryinterface-query-mixed------------queryclass--get_classquery----------------if-issetthis-handlersqueryclass-------------throw-new-invalidargumentexceptionno-handler-registered-for-query-queryclass-----------------vérifier-le-cache--------cachekey--this-generatecachekeyquery--------cacheditem--this-cache-getitemcachekey----------------if-cacheditem-ishit-------------this-logger-debugquery-result-served-from-cache-----------------query--queryclass----------------cachekey--cachekey------------------------------------return-cacheditem-get-----------------exécuter-la-requête--------handler--this-handlersqueryclass--------result--handler-handlequery-----------------mettre-en-cache--------cacheditem-setresult--------cacheditem-expiresafter300--5-minutes--------this-cache-savecacheditem----------------this-logger-infoquery-executed-and-cached-------------query--queryclass------------cachekey--cachekey------------------------return-result--------private-function-generatecachekeyqueryinterface-query-string------------return-query_--md5serializequery-----elasticsearch-reader-avancéphpphpnamespace-appinfrastructureelasticsearchqueryuse-elasticsearchclientuse-psrlogloggerinterfaceuse-psrcachecacheitempoolinterfaceclass-elasticsearchreader----private-client-client----private-string-index----private-loggerinterface-logger----private-cacheitempoolinterface-cache----public-function-__construct--------client-client---------string-index---------loggerinterface-logger--------cacheitempoolinterface-cache-------------this-client--client--------this-index--index--------this-logger--logger--------this-cache--cache--------public-function-searcharray-query-string-cachekey--null-array-------------vérifier-le-cache--------if-cachekey-------------cacheditem--this-cache-getitemcachekey------------if-cacheditem-ishit-----------------this-logger-debugsearch-result-served-from-cache---------------------index--this-index--------------------cachekey--cachekey--------------------------------return-cacheditem-get----------------------------try-------------response--this-client-search----------------index--this-index----------------body--query-------------------------mettre-en-cache------------if-cachekey-----------------cacheditem-setresponse----------------cacheditem-expiresafter300--5-minutes----------------this-cache-savecacheditem------------------------this-logger-infosearch-executed-----------------index--this-index----------------hits--responsehitstotalvalue----------------took--responsetook------------------------return-response---------catch-exception-e-------------this-logger-errorsearch-failed-----------------index--this-index----------------query--query----------------error--e-getmessage------------------------throw-e----------------public-function-getdocumentstring-id-string-routing--null-array------------params--------------index--this-index------------id--id----------------if-routing-------------paramsrouting--routing----------------try-------------response--this-client-getparams------------return-response_source---------catch-elasticsearchcommonexceptionsmissing404exception-e-------------return-null---------catch-exception-e-------------this-logger-errorfailed-to-get-document-----------------index--this-index----------------id--id----------------error--e-getmessage------------------------throw-e----------------public-function-getsuggestionsstring-query-string-field--description-int-size--10-array------------searchquery--------------suggest------------------payment_suggestions----------------------prefix--query--------------------completion--------------------------field--field--suggest------------------------size--size------------------------------------------------------------size--0----------------response--this-searchsearchquery--------suggestions----------if-issetresponsesuggestpayment_suggestions0options-------------foreach-responsesuggestpayment_suggestions0options-as-option-----------------suggestions----------------------text--optiontext--------------------score--optionscore--------------------------------------------return-suggestions--------public-function-getanalyticsarray-query-array------------querysize--0--pas-besoin-des-documents-seulement-les-agrégations----------------response--this-searchquery----------------return-responseaggregations-------query-handler-pour-les-paiementsphpphpnamespace-appapplicationquerypaymentuse-appinfrastructureelasticsearchqueryelasticsearchreaderuse-appdomainpaymentpaymentuse-psrlogloggerinterfaceclass-paymentqueryhandler-implements-queryhandlerinterface----private-elasticsearchreader-reader----private-loggerinterface-logger----public-function-__constructelasticsearchreader-reader-loggerinterface-logger------------this-reader--reader--------this-logger--logger--------public-function-handlegetpaymentbyidquery-query-payment------------document--this-reader-getdocument------------query-getpaymentid------------query-getorganizationid------------------------if-document-------------return-null------------------------return-this-documenttopaymentdocument--------public-function-handlesearchpaymentsquery-query-paymentsearchresult------------searchquery--this-buildsearchqueryquery--------cachekey--this-generatecachekeyquery----------------response--this-reader-searchsearchquery-cachekey----------------payments----------foreach-responsehitshits-as-hit-------------payments--this-documenttopaymenthit_source------------------------return-new-paymentsearchresult------------payments------------responsehitstotalvalue------------query-getpage------------query-getsize----------------public-function-handlegetpaymentstatisticsquery-query-array------------searchquery--------------query------------------bool----------------------must--------------------------term--organizationid--query-getorganizationid------------------------range------------------------------processedat----------------------------------gte--query-getfrom-formatc--------------------------------lte--query-getto-formatc----------------------------------------------------------------------------------------------------------------aggs------------------status_stats----------------------terms--field--status--------------------aggs--------------------------total_amount--sum--field--amount------------------------avg_amount--avg--field--amount----------------------------------------------------currency_stats----------------------terms--field--currency--------------------aggs--------------------------total_amount--sum--field--amount----------------------------------------------------daily_stats----------------------date_histogram--------------------------field--processedat------------------------calendar_interval--day----------------------------------------aggs--------------------------total_amount--sum--field--amount------------------------count--value_count--field--paymentid------------------------------------------------------------------------cachekey--payment_stats_--md5serializequery--------response--this-reader-searchsearchquery-cachekey----------------return-------------status_stats--responseaggregationsstatus_statsbuckets------------currency_stats--responseaggregationscurrency_statsbuckets------------daily_stats--responseaggregationsdaily_statsbuckets----------------public-function-handlegetpaymentsuggestionsquery-query-array------------return-this-reader-getsuggestions------------query-getquery------------description------------query-getsize----------------private-function-buildsearchquerysearchpaymentsquery-query-array------------searchquery--------------query------------------bool----------------------must------------------------------------------sort------------------_score--order--desc----------------processedat--order--desc------------------------from--query-getoffset------------size--query-getsize-------------------------filtres-obligatoires--------if-query-getorganizationid-------------searchqueryqueryboolmust------------------term--organizationid--query-getorganizationid-------------------------------------recherche-textuelle--------if-query-getsearchtext-------------searchqueryqueryboolmust------------------multi_match----------------------query--query-getsearchtext--------------------fields--description2-paymentid-metadatatags--------------------type--best_fields--------------------fuzziness--auto-----------------------------------------------------filtres-de-statut--------if-query-getstatuses-------------searchqueryqueryboolmust------------------terms--status--query-getstatuses-------------------------------------filtres-de-devise--------if-query-getcurrencies-------------searchqueryqueryboolmust------------------terms--currency--query-getcurrencies-------------------------------------filtres-de-montant--------if-query-getminamount--query-getmaxamount-------------range--------------if-query-getminamount-----------------rangegte--query-getminamount------------------------if-query-getmaxamount-----------------rangelte--query-getmaxamount------------------------------------searchqueryqueryboolmust------------------range--amount--range-------------------------------------filtres-de-date--------if-query-getfrom--query-getto-------------range--------------if-query-getfrom-----------------rangegte--query-getfrom-formatc------------------------if-query-getto-----------------rangelte--query-getto-formatc------------------------------------searchqueryqueryboolmust------------------range--processedat--range------------------------------------return-searchquery--------private-function-generatecachekeysearchpaymentsquery-query-string------------return-payment_search_--md5serializequery--------private-function-documenttopaymentarray-document-payment------------return-new-payment------------documentpaymentid------------documentorganizationid------------documentuserid------------documentamount------------documentcurrency------------documentstatus------------documentdescription------------new-datetimedocumentprocessedat------------documentmetadata---------------3-service-de-projection-service-de-projection-pour-les-analyticsphpphpnamespace-appapplicationserviceelasticsearchuse-appdomaineventdomaineventuse-appinfrastructureelasticsearchcommandelasticsearchwriteruse-psrlogloggerinterfaceclass-paymentprojectionservice----private-elasticsearchwriter-writer----private-loggerinterface-logger----public-function-__constructelasticsearchwriter-writer-loggerinterface-logger------------this-writer--writer--------this-logger--logger--------public-function-handleeventdomainevent-event-void------------switch-event-geteventtype-------------case-paymentprocessed----------------this-handlepaymentprocessedevent----------------break------------case-paymentfailed----------------this-handlepaymentfailedevent----------------break------------case-paymentrefunded----------------this-handlepaymentrefundedevent----------------break----------------private-function-handlepaymentprocesseddomainevent-event-void------------update--------------status--completed------------processedat--event-gettimestamp-formatc------------updatedat--new-datetime-formatc----------------this-writer-updatedocument------------event-getaggregateid------------update------------event-getmetadataorganizationid--null----------------this-logger-infopayment-processed-projection-updated-------------paymentid--event-getaggregateid------------status--completed----------------private-function-handlepaymentfaileddomainevent-event-void------------update--------------status--failed------------error--event-getdataerror------------failedat--event-gettimestamp-formatc------------updatedat--new-datetime-formatc----------------this-writer-updatedocument------------event-getaggregateid------------update------------event-getmetadataorganizationid--null----------------this-logger-infopayment-failed-projection-updated-------------paymentid--event-getaggregateid------------status--failed----------------private-function-handlepaymentrefundeddomainevent-event-void------------update--------------status--refunded------------refundamount--event-getdatarefundamount------------refundedat--event-gettimestamp-formatc------------updatedat--new-datetime-formatc----------------this-writer-updatedocument------------event-getaggregateid------------update------------event-getmetadataorganizationid--null----------------this-logger-infopayment-refunded-projection-updated-------------paymentid--event-getaggregateid------------status--refunded--------------tests-et-validation-tests-dphpphpnamespace-apptestsintegrationelasticsearchuse-appapplicationcommandpaymentprocesspaymentcommanduse-appapplicationcommandpaymentprocesspaymentcommandhandleruse-appapplicationquerypaymentgetpaymentbyidqueryuse-appapplicationquerypaymentsearchpaymentsqueryuse-appapplicationquerypaymentpaymentqueryhandleruse-appinfrastructureelasticsearchcommandelasticsearchwriteruse-appinfrastructureelasticsearchqueryelasticsearchreaderuse-elasticsearchclientbuilderclass-elasticsearchcqrstest-extends-testcase----private-elasticsearchwriter-writer----private-elasticsearchreader-reader----private-processpaymentcommandhandler-commandhandler----private-paymentqueryhandler-queryhandler----protected-function-setup-void------------client--clientbuildercreate-sethostslocalhost9200-build----------------this-writer--new-elasticsearchwriterclient-test-payments-this-createmockloggerinterfaceclass--------this-reader--new-elasticsearchreaderclient-test-payments-this-createmockloggerinterfaceclass-this-createmockcacheitempoolinterfaceclass----------------this-commandhandler--new-processpaymentcommandhandler------------this-createmockpaymentrepositoryinterfaceclass------------this-writer------------this-createmockeventbusinterfaceclass------------this-createmockloggerinterfaceclass------------------------this-queryhandler--new-paymentqueryhandlerthis-reader-this-createmockloggerinterfaceclass--------public-function-testcqrsseparation-void-------------exécuter-une-commande--------command--new-processpaymentcommand------------payment-123------------10000------------eur------------org-456------------------------this-commandhandler-handlecommand-----------------vérifier-avec-une-requête--------query--new-getpaymentbyidquerypayment-123-org-456--------payment--this-queryhandler-handlequery----------------this-assertnotnullpayment--------this-assertequalspayment-123-payment-getid--------this-assertequals10000-payment-getamount--------public-function-testsearchwithanalytics-void-------------créer-plusieurs-paiements--------payments--------------new-processpaymentcommandpayment-1-10000-eur-org-456------------new-processpaymentcommandpayment-2-20000-usd-org-456------------new-processpaymentcommandpayment-3-30000-eur-org-789------------------------foreach-payments-as-command-------------this-commandhandler-handlecommand-------------------------rechercher-avec-analytics--------searchquery--new-searchpaymentsqueryorg-456-0-10--------result--this-queryhandler-handlesearchquery----------------this-assertcount2-result-getpayments--------this-assertequals2-result-gettotal------performance-et-optimisation-stratégies-d-1-index-optimisés-avec-routingjson--mappings-----properties-------paymentid--type-keyword-------organizationid--type-keyword-------description----------type-text--------analyzer-payment_analyzer--------fields-----------suggest--type-completion---------------------processedat--type-date-------amount--type-double---------settings-----number_of_shards-3----number_of_replicas-1----refresh_interval-30s---2-cache-multi-niveauxphppublic-function-searchwithmultilevelcachesearchpaymentsquery-query-paymentsearchresult-----cache-l1-mémoire----if-issetthis-memorycachequery-getcachekey---------return-this-memorycachequery-getcachekey-------------cache-l2-redis----cached--this-redis-getpayment_searchquery-getcachekey----if-cached---------result--paymentsearchresultfromarrayjson_decodecached-true--------this-memorycachequery-getcachekey--result--------return-result-------------elasticsearch----result--this-searchpaymentsquery---------mettre-en-cache----this-memorycachequery-getcachekey--result----this-redis-setexpayment_searchquery-getcachekey-300-json_encoderesult-toarray--------return-result-3-projections-asynchronesphppublic-function-handleeventasyncdomainevent-event-void-----mettre-en-queue-pour-traitement-asynchrone----this-messagebus-dispatchnew-processprojectioncommandevent--critères-d-quand-utiliser-cqrs-avec-elasticsearch--avantages--scalabilité-maximale--possibilité-de-scaler-indépendamment--performance-optimale--chaque-côté-optimisé-pour-son-usage--flexibilité--projections-multiples-pour-différents-besoins--analytics-avancées--agrégations-complexes-et-rapports--recherche-puissante--full-text-search-avec-scoring--inconvénients--complexité-maximale--architecture-très-complexe--latence--délai-entre-écriture-et-lecture--synchronisation--besoin-de-synchroniser-les-données--expertise--équipe-très-expérimentée-requise--coût--infrastructure-plus-coûteuse--critères-d--système-très-complexe--besoins-de-scalabilité-maximale--équipe-très-expérimentée--maîtrise-delasticsearch-et-cqrs--budget-important--investissement-en-complexité-justifié--performance-critique--besoins-de-performance-maximale--analytics-avancées--besoins-de-rapports-complexes--recherche-complexe--besoins-de-recherche-full-text-avancée--votre-prochaine-étapehahahugoshortcode57s0hbhbcqrs-avec-elasticsearch-représente-l"&gt;🎯 &lt;strong&gt;Contexte et Objectifs&lt;/strong&gt;### &lt;strong&gt;L&amp;rsquo;Approche CQRS Complète avec ElasticSearch&lt;/strong&gt;Nous arrivons maintenant à l&amp;rsquo;approche la plus sophistiquée : &lt;strong&gt;CQRS complet avec ElasticSearch&lt;/strong&gt;. Cette combinaison offre une architecture hautement scalable et flexible, parfaite pour les systèmes complexes nécessitant recherche et analytics.#### &lt;strong&gt;Pourquoi CQRS avec ElasticSearch ?&lt;/strong&gt;- &lt;strong&gt;Séparation totale&lt;/strong&gt; : Commandes et requêtes complètement découplées- &lt;strong&gt;Scalabilité maximale&lt;/strong&gt; : Possibilité de scaler indépendamment chaque côté- &lt;strong&gt;Flexibilité&lt;/strong&gt; : Projections multiples pour différents besoins- &lt;strong&gt;Performance optimale&lt;/strong&gt; : Chaque côté optimisé pour son usage- &lt;strong&gt;Analytics avancées&lt;/strong&gt; : Agrégations complexes et rapports### &lt;strong&gt;Contexte Gyroscops&lt;/strong&gt;Dans notre écosystème &lt;strong&gt;User → Organization → Workflow → Cloud Resources → Billing&lt;/strong&gt;, CQRS avec ElasticSearch est idéal pour :- &lt;strong&gt;Système de facturation&lt;/strong&gt; : Commandes de paiement, requêtes d&amp;rsquo;analytics- &lt;strong&gt;Logs d&amp;rsquo;application&lt;/strong&gt; : Écriture des logs, analyse et monitoring- &lt;strong&gt;Métriques de performance&lt;/strong&gt; : Collecte des métriques, dashboards- &lt;strong&gt;Recherche avancée&lt;/strong&gt; : Full-text search avec scoring et suggestions## 🏗️ &lt;strong&gt;Architecture CQRS avec ElasticSearch&lt;/strong&gt;### &lt;strong&gt;Séparation Complète des Responsabilités&lt;/strong&gt;#### &lt;strong&gt;Command Side (Write)&lt;/strong&gt;- &lt;strong&gt;Command Handlers&lt;/strong&gt; : Traitement des commandes métier- &lt;strong&gt;ElasticSearch Writer&lt;/strong&gt; : Indexation des documents- &lt;strong&gt;Event Handlers&lt;/strong&gt; : Gestion des événements de domaine- &lt;strong&gt;Command Bus&lt;/strong&gt; : Orchestration des commandes- &lt;strong&gt;Bulk Operations&lt;/strong&gt; : Optimisation des écritures#### &lt;strong&gt;Query Side (Read)&lt;/strong&gt;- &lt;strong&gt;Query Handlers&lt;/strong&gt; : Traitement des requêtes- &lt;strong&gt;ElasticSearch Reader&lt;/strong&gt; : Requêtes optimisées- &lt;strong&gt;Search Services&lt;/strong&gt; : Services de recherche spécialisés- &lt;strong&gt;Query Bus&lt;/strong&gt; : Orchestration des requêtes- &lt;strong&gt;Caches&lt;/strong&gt; : Optimisation des performances### &lt;strong&gt;Flux de Données Complet&lt;/strong&gt;&lt;code&gt;mermaidgraph TD A[Command] --&amp;gt; B[Command Bus] B --&amp;gt; C[Command Handler] C --&amp;gt; D[ElasticSearch Writer] D --&amp;gt; E[ElasticSearch Cluster] E --&amp;gt; F[Index Document] G[Query] --&amp;gt; H[Query Bus] H --&amp;gt; I[Query Handler] I --&amp;gt; J[ElasticSearch Reader] J --&amp;gt; E E --&amp;gt; K[Search Results] K --&amp;gt; L[Response] M[Event] --&amp;gt; N[Event Handler] N --&amp;gt; D O[Projection] --&amp;gt; P[ElasticSearch Writer] P --&amp;gt; E&lt;/code&gt;## 💻 &lt;strong&gt;Implémentation Complète&lt;/strong&gt;### &lt;strong&gt;1. Command Side Implementation&lt;/strong&gt;#### &lt;strong&gt;Command Bus avec Middleware&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Application\CommandBus;use App\Domain\Command\CommandInterface;use App\Domain\Command\CommandHandlerInterface;use Psr\Log\LoggerInterface;class CommandBus{ private array $handlers = []; private array $middleware = []; private LoggerInterface $logger; public function __construct(LoggerInterface $logger) { $this-&amp;gt;logger = $logger; } public function registerHandler(string $commandClass, CommandHandlerInterface $handler): void { $this-&amp;gt;handlers[$commandClass] = $handler; } public function addMiddleware(callable $middleware): void { $this-&amp;gt;middleware[] = $middleware; } public function handle(CommandInterface $command): void { $commandClass = get_class($command); if (!isset($this-&amp;gt;handlers[$commandClass])) { throw new \InvalidArgumentException(&amp;quot;No handler registered for command: $commandClass&amp;quot;); } $handler = $this-&amp;gt;handlers[$commandClass]; // Exécuter les middleware $this-&amp;gt;executeMiddleware($command, function() use ($handler, $command) { $this-&amp;gt;logger-&amp;gt;info('Executing command', [ 'command' =&amp;gt; get_class($command), 'data' =&amp;gt; $command-&amp;gt;toArray() ]); $handler-&amp;gt;handle($command); }); } private function executeMiddleware(CommandInterface $command, callable $next): void { $middleware = array_reverse($this-&amp;gt;middleware); foreach ($middleware as $mw) { $next = function() use ($mw, $command, $next) { return $mw($command, $next); }; } $next(); }}&lt;/code&gt;#### &lt;strong&gt;ElasticSearch Writer Avancé&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Infrastructure\ElasticSearch\Command;use Elasticsearch\Client;use Psr\Log\LoggerInterface;class ElasticSearchWriter{ private Client $client; private string $index; private LoggerInterface $logger; private array $bulkBuffer = []; private int $bulkSize; private string $routingField; public function __construct( Client $client, string $index, LoggerInterface $logger, int $bulkSize = 100, string $routingField = 'organizationId' ) { $this-&amp;gt;client = $client; $this-&amp;gt;index = $index; $this-&amp;gt;logger = $logger; $this-&amp;gt;bulkSize = $bulkSize; $this-&amp;gt;routingField = $routingField; } public function indexDocument(string $id, array $document, string $routing = null): void { $operation = [ 'index' =&amp;gt; [ '_index' =&amp;gt; $this-&amp;gt;index, '_id' =&amp;gt; $id ] ]; if ($routing) { $operation['index']['routing'] = $routing; } $this-&amp;gt;bulkBuffer[] = $operation; $this-&amp;gt;bulkBuffer[] = $document; if (count($this-&amp;gt;bulkBuffer) &amp;gt;= $this-&amp;gt;bulkSize * 2) { $this-&amp;gt;flushBulk(); } } public function updateDocument(string $id, array $document, string $routing = null): void { $operation = [ 'update' =&amp;gt; [ '_index' =&amp;gt; $this-&amp;gt;index, '_id' =&amp;gt; $id ] ]; if ($routing) { $operation['update']['routing'] = $routing; } $this-&amp;gt;bulkBuffer[] = $operation; $this-&amp;gt;bulkBuffer[] = [ 'doc' =&amp;gt; $document, 'doc_as_upsert' =&amp;gt; true ]; if (count($this-&amp;gt;bulkBuffer) &amp;gt;= $this-&amp;gt;bulkSize * 2) { $this-&amp;gt;flushBulk(); } } public function deleteDocument(string $id, string $routing = null): void { $operation = [ 'delete' =&amp;gt; [ '_index' =&amp;gt; $this-&amp;gt;index, '_id' =&amp;gt; $id ] ]; if ($routing) { $operation['delete']['routing'] = $routing; } $this-&amp;gt;bulkBuffer[] = $operation; if (count($this-&amp;gt;bulkBuffer) &amp;gt;= $this-&amp;gt;bulkSize * 2) { $this-&amp;gt;flushBulk(); } } public function flushBulk(): void { if (empty($this-&amp;gt;bulkBuffer)) { return; } try { $response = $this-&amp;gt;client-&amp;gt;bulk([ 'body' =&amp;gt; $this-&amp;gt;bulkBuffer, 'refresh' =&amp;gt; false ]); $this-&amp;gt;logger-&amp;gt;info('Bulk operation completed', [ 'index' =&amp;gt; $this-&amp;gt;index, 'operations' =&amp;gt; count($this-&amp;gt;bulkBuffer) / 2, 'errors' =&amp;gt; $response['errors'] ]); $this-&amp;gt;bulkBuffer = []; } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Bulk operation failed', [ 'index' =&amp;gt; $this-&amp;gt;index, 'error' =&amp;gt; $e-&amp;gt;getMessage(), 'operations' =&amp;gt; count($this-&amp;gt;bulkBuffer) / 2 ]); throw $e; } } public function createIndexWithMapping(array $mapping): void { $params = [ 'index' =&amp;gt; $this-&amp;gt;index, 'body' =&amp;gt; [ 'settings' =&amp;gt; [ 'number_of_shards' =&amp;gt; 3, 'number_of_replicas' =&amp;gt; 1, 'refresh_interval' =&amp;gt; '30s', 'analysis' =&amp;gt; [ 'analyzer' =&amp;gt; [ 'payment_analyzer' =&amp;gt; [ 'type' =&amp;gt; 'custom', 'tokenizer' =&amp;gt; 'standard', 'filter' =&amp;gt; ['lowercase', 'stop'] ] ] ] ], 'mappings' =&amp;gt; $mapping ] ]; try { $this-&amp;gt;client-&amp;gt;indices()-&amp;gt;create($params); $this-&amp;gt;logger-&amp;gt;info('Index created with mapping', ['index' =&amp;gt; $this-&amp;gt;index]); } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Failed to create index', [ 'index' =&amp;gt; $this-&amp;gt;index, 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); throw $e; } }}&lt;/code&gt;#### &lt;strong&gt;Command Handler pour les Paiements&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Application\Command\Payment;use App\Domain\Payment\Payment;use App\Domain\Payment\PaymentRepositoryInterface;use App\Infrastructure\ElasticSearch\Command\ElasticSearchWriter;use App\Domain\Event\EventBusInterface;use Psr\Log\LoggerInterface;class ProcessPaymentCommandHandler implements CommandHandlerInterface{ public function __construct( private PaymentRepositoryInterface $paymentRepository, private ElasticSearchWriter $elasticSearchWriter, private EventBusInterface $eventBus, private LoggerInterface $logger ) {} public function handle(ProcessPaymentCommand $command): void { try { // Charger le paiement $payment = $this-&amp;gt;paymentRepository-&amp;gt;findById($command-&amp;gt;getPaymentId()); if (!$payment) { throw new \InvalidArgumentException(&amp;quot;Payment not found: {$command-&amp;gt;getPaymentId()}&amp;quot;); } // Traiter le paiement $payment-&amp;gt;processPayment($command-&amp;gt;getAmount(), $command-&amp;gt;getCurrency()); // Sauvegarder dans le repository principal $this-&amp;gt;paymentRepository-&amp;gt;save($payment); // Indexer dans ElasticSearch pour la recherche $this-&amp;gt;indexPaymentForSearch($payment); // Publier l'événement $event = new PaymentProcessedEvent( $payment-&amp;gt;getId(), $payment-&amp;gt;getAmount(), $payment-&amp;gt;getCurrency(), $payment-&amp;gt;getOrganizationId() ); $this-&amp;gt;eventBus-&amp;gt;publish($event); $this-&amp;gt;logger-&amp;gt;info('Payment processed and indexed', [ 'paymentId' =&amp;gt; $payment-&amp;gt;getId(), 'organizationId' =&amp;gt; $payment-&amp;gt;getOrganizationId(), 'amount' =&amp;gt; $payment-&amp;gt;getAmount() ]); } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Payment processing failed', [ 'paymentId' =&amp;gt; $command-&amp;gt;getPaymentId(), 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); throw $e; } } private function indexPaymentForSearch(Payment $payment): void { $document = [ 'paymentId' =&amp;gt; $payment-&amp;gt;getId(), 'organizationId' =&amp;gt; $payment-&amp;gt;getOrganizationId(), 'userId' =&amp;gt; $payment-&amp;gt;getUserId(), 'amount' =&amp;gt; $payment-&amp;gt;getAmount(), 'currency' =&amp;gt; $payment-&amp;gt;getCurrency(), 'status' =&amp;gt; $payment-&amp;gt;getStatus(), 'description' =&amp;gt; $payment-&amp;gt;getDescription(), 'processedAt' =&amp;gt; $payment-&amp;gt;getProcessedAt()-&amp;gt;format('c'), 'metadata' =&amp;gt; $payment-&amp;gt;getMetadata(), 'indexedAt' =&amp;gt; (new \DateTime())-&amp;gt;format('c') ]; $this-&amp;gt;elasticSearchWriter-&amp;gt;indexDocument( $payment-&amp;gt;getId(), $document, $payment-&amp;gt;getOrganizationId() ); }}&lt;/code&gt;### &lt;strong&gt;2. Query Side Implementation&lt;/strong&gt;#### &lt;strong&gt;Query Bus avec Cache&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Application\QueryBus;use App\Domain\Query\QueryInterface;use App\Domain\Query\QueryHandlerInterface;use Psr\Cache\CacheItemPoolInterface;use Psr\Log\LoggerInterface;class QueryBus{ private array $handlers = []; private CacheItemPoolInterface $cache; private LoggerInterface $logger; public function __construct(CacheItemPoolInterface $cache, LoggerInterface $logger) { $this-&amp;gt;cache = $cache; $this-&amp;gt;logger = $logger; } public function registerHandler(string $queryClass, QueryHandlerInterface $handler): void { $this-&amp;gt;handlers[$queryClass] = $handler; } public function handle(QueryInterface $query): mixed { $queryClass = get_class($query); if (!isset($this-&amp;gt;handlers[$queryClass])) { throw new \InvalidArgumentException(&amp;quot;No handler registered for query: $queryClass&amp;quot;); } // Vérifier le cache $cacheKey = $this-&amp;gt;generateCacheKey($query); $cachedItem = $this-&amp;gt;cache-&amp;gt;getItem($cacheKey); if ($cachedItem-&amp;gt;isHit()) { $this-&amp;gt;logger-&amp;gt;debug('Query result served from cache', [ 'query' =&amp;gt; $queryClass, 'cacheKey' =&amp;gt; $cacheKey ]); return $cachedItem-&amp;gt;get(); } // Exécuter la requête $handler = $this-&amp;gt;handlers[$queryClass]; $result = $handler-&amp;gt;handle($query); // Mettre en cache $cachedItem-&amp;gt;set($result); $cachedItem-&amp;gt;expiresAfter(300); // 5 minutes $this-&amp;gt;cache-&amp;gt;save($cachedItem); $this-&amp;gt;logger-&amp;gt;info('Query executed and cached', [ 'query' =&amp;gt; $queryClass, 'cacheKey' =&amp;gt; $cacheKey ]); return $result; } private function generateCacheKey(QueryInterface $query): string { return 'query_' . md5(serialize($query)); }}&lt;/code&gt;#### &lt;strong&gt;ElasticSearch Reader Avancé&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Infrastructure\ElasticSearch\Query;use Elasticsearch\Client;use Psr\Log\LoggerInterface;use Psr\Cache\CacheItemPoolInterface;class ElasticSearchReader{ private Client $client; private string $index; private LoggerInterface $logger; private CacheItemPoolInterface $cache; public function __construct( Client $client, string $index, LoggerInterface $logger, CacheItemPoolInterface $cache ) { $this-&amp;gt;client = $client; $this-&amp;gt;index = $index; $this-&amp;gt;logger = $logger; $this-&amp;gt;cache = $cache; } public function search(array $query, string $cacheKey = null): array { // Vérifier le cache if ($cacheKey) { $cachedItem = $this-&amp;gt;cache-&amp;gt;getItem($cacheKey); if ($cachedItem-&amp;gt;isHit()) { $this-&amp;gt;logger-&amp;gt;debug('Search result served from cache', [ 'index' =&amp;gt; $this-&amp;gt;index, 'cacheKey' =&amp;gt; $cacheKey ]); return $cachedItem-&amp;gt;get(); } } try { $response = $this-&amp;gt;client-&amp;gt;search([ 'index' =&amp;gt; $this-&amp;gt;index, 'body' =&amp;gt; $query ]); // Mettre en cache if ($cacheKey) { $cachedItem-&amp;gt;set($response); $cachedItem-&amp;gt;expiresAfter(300); // 5 minutes $this-&amp;gt;cache-&amp;gt;save($cachedItem); } $this-&amp;gt;logger-&amp;gt;info('Search executed', [ 'index' =&amp;gt; $this-&amp;gt;index, 'hits' =&amp;gt; $response['hits']['total']['value'], 'took' =&amp;gt; $response['took'] ]); return $response; } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Search failed', [ 'index' =&amp;gt; $this-&amp;gt;index, 'query' =&amp;gt; $query, 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); throw $e; } } public function getDocument(string $id, string $routing = null): ?array { $params = [ 'index' =&amp;gt; $this-&amp;gt;index, 'id' =&amp;gt; $id ]; if ($routing) { $params['routing'] = $routing; } try { $response = $this-&amp;gt;client-&amp;gt;get($params); return $response['_source']; } catch (\Elasticsearch\Common\Exceptions\Missing404Exception $e) { return null; } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Failed to get document', [ 'index' =&amp;gt; $this-&amp;gt;index, 'id' =&amp;gt; $id, 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); throw $e; } } public function getSuggestions(string $query, string $field = 'description', int $size = 10): array { $searchQuery = [ 'suggest' =&amp;gt; [ 'payment_suggestions' =&amp;gt; [ 'prefix' =&amp;gt; $query, 'completion' =&amp;gt; [ 'field' =&amp;gt; $field . '.suggest', 'size' =&amp;gt; $size ] ] ], 'size' =&amp;gt; 0 ]; $response = $this-&amp;gt;search($searchQuery); $suggestions = []; if (isset($response['suggest']['payment_suggestions'][0]['options'])) { foreach ($response['suggest']['payment_suggestions'][0]['options'] as $option) { $suggestions[] = [ 'text' =&amp;gt; $option['text'], 'score' =&amp;gt; $option['score'] ]; } } return $suggestions; } public function getAnalytics(array $query): array { $query['size'] = 0; // Pas besoin des documents, seulement les agrégations $response = $this-&amp;gt;search($query); return $response['aggregations'] ?? []; }}&lt;/code&gt;#### &lt;strong&gt;Query Handler pour les Paiements&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Application\Query\Payment;use App\Infrastructure\ElasticSearch\Query\ElasticSearchReader;use App\Domain\Payment\Payment;use Psr\Log\LoggerInterface;class PaymentQueryHandler implements QueryHandlerInterface{ private ElasticSearchReader $reader; private LoggerInterface $logger; public function __construct(ElasticSearchReader $reader, LoggerInterface $logger) { $this-&amp;gt;reader = $reader; $this-&amp;gt;logger = $logger; } public function handle(GetPaymentByIdQuery $query): ?Payment { $document = $this-&amp;gt;reader-&amp;gt;getDocument( $query-&amp;gt;getPaymentId(), $query-&amp;gt;getOrganizationId() ); if (!$document) { return null; } return $this-&amp;gt;documentToPayment($document); } public function handle(SearchPaymentsQuery $query): PaymentSearchResult { $searchQuery = $this-&amp;gt;buildSearchQuery($query); $cacheKey = $this-&amp;gt;generateCacheKey($query); $response = $this-&amp;gt;reader-&amp;gt;search($searchQuery, $cacheKey); $payments = []; foreach ($response['hits']['hits'] as $hit) { $payments[] = $this-&amp;gt;documentToPayment($hit['_source']); } return new PaymentSearchResult( $payments, $response['hits']['total']['value'], $query-&amp;gt;getPage(), $query-&amp;gt;getSize() ); } public function handle(GetPaymentStatisticsQuery $query): array { $searchQuery = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [ ['term' =&amp;gt; ['organizationId' =&amp;gt; $query-&amp;gt;getOrganizationId()]], ['range' =&amp;gt; [ 'processedAt' =&amp;gt; [ 'gte' =&amp;gt; $query-&amp;gt;getFrom()-&amp;gt;format('c'), 'lte' =&amp;gt; $query-&amp;gt;getTo()-&amp;gt;format('c') ] ]] ] ] ], 'aggs' =&amp;gt; [ 'status_stats' =&amp;gt; [ 'terms' =&amp;gt; ['field' =&amp;gt; 'status'], 'aggs' =&amp;gt; [ 'total_amount' =&amp;gt; ['sum' =&amp;gt; ['field' =&amp;gt; 'amount']], 'avg_amount' =&amp;gt; ['avg' =&amp;gt; ['field' =&amp;gt; 'amount']] ] ], 'currency_stats' =&amp;gt; [ 'terms' =&amp;gt; ['field' =&amp;gt; 'currency'], 'aggs' =&amp;gt; [ 'total_amount' =&amp;gt; ['sum' =&amp;gt; ['field' =&amp;gt; 'amount']] ] ], 'daily_stats' =&amp;gt; [ 'date_histogram' =&amp;gt; [ 'field' =&amp;gt; 'processedAt', 'calendar_interval' =&amp;gt; 'day' ], 'aggs' =&amp;gt; [ 'total_amount' =&amp;gt; ['sum' =&amp;gt; ['field' =&amp;gt; 'amount']], 'count' =&amp;gt; ['value_count' =&amp;gt; ['field' =&amp;gt; 'paymentId']] ] ] ] ]; $cacheKey = 'payment_stats_' . md5(serialize($query)); $response = $this-&amp;gt;reader-&amp;gt;search($searchQuery, $cacheKey); return [ 'status_stats' =&amp;gt; $response['aggregations']['status_stats']['buckets'], 'currency_stats' =&amp;gt; $response['aggregations']['currency_stats']['buckets'], 'daily_stats' =&amp;gt; $response['aggregations']['daily_stats']['buckets'] ]; } public function handle(GetPaymentSuggestionsQuery $query): array { return $this-&amp;gt;reader-&amp;gt;getSuggestions( $query-&amp;gt;getQuery(), 'description', $query-&amp;gt;getSize() ); } private function buildSearchQuery(SearchPaymentsQuery $query): array { $searchQuery = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [] ] ], 'sort' =&amp;gt; [ ['_score' =&amp;gt; ['order' =&amp;gt; 'desc']], ['processedAt' =&amp;gt; ['order' =&amp;gt; 'desc']] ], 'from' =&amp;gt; $query-&amp;gt;getOffset(), 'size' =&amp;gt; $query-&amp;gt;getSize() ]; // Filtres obligatoires if ($query-&amp;gt;getOrganizationId()) { $searchQuery['query']['bool']['must'][] = [ 'term' =&amp;gt; ['organizationId' =&amp;gt; $query-&amp;gt;getOrganizationId()] ]; } // Recherche textuelle if ($query-&amp;gt;getSearchText()) { $searchQuery['query']['bool']['must'][] = [ 'multi_match' =&amp;gt; [ 'query' =&amp;gt; $query-&amp;gt;getSearchText(), 'fields' =&amp;gt; ['description^2', 'paymentId', 'metadata.tags'], 'type' =&amp;gt; 'best_fields', 'fuzziness' =&amp;gt; 'AUTO' ] ]; } // Filtres de statut if ($query-&amp;gt;getStatuses()) { $searchQuery['query']['bool']['must'][] = [ 'terms' =&amp;gt; ['status' =&amp;gt; $query-&amp;gt;getStatuses()] ]; } // Filtres de devise if ($query-&amp;gt;getCurrencies()) { $searchQuery['query']['bool']['must'][] = [ 'terms' =&amp;gt; ['currency' =&amp;gt; $query-&amp;gt;getCurrencies()] ]; } // Filtres de montant if ($query-&amp;gt;getMinAmount() || $query-&amp;gt;getMaxAmount()) { $range = []; if ($query-&amp;gt;getMinAmount()) { $range['gte'] = $query-&amp;gt;getMinAmount(); } if ($query-&amp;gt;getMaxAmount()) { $range['lte'] = $query-&amp;gt;getMaxAmount(); } $searchQuery['query']['bool']['must'][] = [ 'range' =&amp;gt; ['amount' =&amp;gt; $range] ]; } // Filtres de date if ($query-&amp;gt;getFrom() || $query-&amp;gt;getTo()) { $range = []; if ($query-&amp;gt;getFrom()) { $range['gte'] = $query-&amp;gt;getFrom()-&amp;gt;format('c'); } if ($query-&amp;gt;getTo()) { $range['lte'] = $query-&amp;gt;getTo()-&amp;gt;format('c'); } $searchQuery['query']['bool']['must'][] = [ 'range' =&amp;gt; ['processedAt' =&amp;gt; $range] ]; } return $searchQuery; } private function generateCacheKey(SearchPaymentsQuery $query): string { return 'payment_search_' . md5(serialize($query)); } private function documentToPayment(array $document): Payment { return new Payment( $document['paymentId'], $document['organizationId'], $document['userId'], $document['amount'], $document['currency'], $document['status'], $document['description'], new \DateTime($document['processedAt']), $document['metadata'] ?? [] ); }}&lt;/code&gt;### &lt;strong&gt;3. Service de Projection&lt;/strong&gt;#### &lt;strong&gt;Service de Projection pour les Analytics&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Application\Service\ElasticSearch;use App\Domain\Event\DomainEvent;use App\Infrastructure\ElasticSearch\Command\ElasticSearchWriter;use Psr\Log\LoggerInterface;class PaymentProjectionService{ private ElasticSearchWriter $writer; private LoggerInterface $logger; public function __construct(ElasticSearchWriter $writer, LoggerInterface $logger) { $this-&amp;gt;writer = $writer; $this-&amp;gt;logger = $logger; } public function handleEvent(DomainEvent $event): void { switch ($event-&amp;gt;getEventType()) { case 'PaymentProcessed': $this-&amp;gt;handlePaymentProcessed($event); break; case 'PaymentFailed': $this-&amp;gt;handlePaymentFailed($event); break; case 'PaymentRefunded': $this-&amp;gt;handlePaymentRefunded($event); break; } } private function handlePaymentProcessed(DomainEvent $event): void { $update = [ 'status' =&amp;gt; 'completed', 'processedAt' =&amp;gt; $event-&amp;gt;getTimestamp()-&amp;gt;format('c'), 'updatedAt' =&amp;gt; (new \DateTime())-&amp;gt;format('c') ]; $this-&amp;gt;writer-&amp;gt;updateDocument( $event-&amp;gt;getAggregateId(), $update, $event-&amp;gt;getMetadata()['organizationId'] ?? null ); $this-&amp;gt;logger-&amp;gt;info('Payment processed projection updated', [ 'paymentId' =&amp;gt; $event-&amp;gt;getAggregateId(), 'status' =&amp;gt; 'completed' ]); } private function handlePaymentFailed(DomainEvent $event): void { $update = [ 'status' =&amp;gt; 'failed', 'error' =&amp;gt; $event-&amp;gt;getData()['error'], 'failedAt' =&amp;gt; $event-&amp;gt;getTimestamp()-&amp;gt;format('c'), 'updatedAt' =&amp;gt; (new \DateTime())-&amp;gt;format('c') ]; $this-&amp;gt;writer-&amp;gt;updateDocument( $event-&amp;gt;getAggregateId(), $update, $event-&amp;gt;getMetadata()['organizationId'] ?? null ); $this-&amp;gt;logger-&amp;gt;info('Payment failed projection updated', [ 'paymentId' =&amp;gt; $event-&amp;gt;getAggregateId(), 'status' =&amp;gt; 'failed' ]); } private function handlePaymentRefunded(DomainEvent $event): void { $update = [ 'status' =&amp;gt; 'refunded', 'refundAmount' =&amp;gt; $event-&amp;gt;getData()['refundAmount'], 'refundedAt' =&amp;gt; $event-&amp;gt;getTimestamp()-&amp;gt;format('c'), 'updatedAt' =&amp;gt; (new \DateTime())-&amp;gt;format('c') ]; $this-&amp;gt;writer-&amp;gt;updateDocument( $event-&amp;gt;getAggregateId(), $update, $event-&amp;gt;getMetadata()['organizationId'] ?? null ); $this-&amp;gt;logger-&amp;gt;info('Payment refunded projection updated', [ 'paymentId' =&amp;gt; $event-&amp;gt;getAggregateId(), 'status' =&amp;gt; 'refunded' ]); }}&lt;/code&gt;## 🧪 &lt;strong&gt;Tests et Validation&lt;/strong&gt;### &lt;strong&gt;Tests d&amp;rsquo;Intégration CQRS&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Tests\Integration\ElasticSearch;use App\Application\Command\Payment\ProcessPaymentCommand;use App\Application\Command\Payment\ProcessPaymentCommandHandler;use App\Application\Query\Payment\GetPaymentByIdQuery;use App\Application\Query\Payment\SearchPaymentsQuery;use App\Application\Query\Payment\PaymentQueryHandler;use App\Infrastructure\ElasticSearch\Command\ElasticSearchWriter;use App\Infrastructure\ElasticSearch\Query\ElasticSearchReader;use Elasticsearch\ClientBuilder;class ElasticSearchCqrsTest extends TestCase{ private ElasticSearchWriter $writer; private ElasticSearchReader $reader; private ProcessPaymentCommandHandler $commandHandler; private PaymentQueryHandler $queryHandler; protected function setUp(): void { $client = ClientBuilder::create()-&amp;gt;setHosts(['localhost:9200'])-&amp;gt;build(); $this-&amp;gt;writer = new ElasticSearchWriter($client, 'test-payments', $this-&amp;gt;createMock(LoggerInterface::class)); $this-&amp;gt;reader = new ElasticSearchReader($client, 'test-payments', $this-&amp;gt;createMock(LoggerInterface::class), $this-&amp;gt;createMock(CacheItemPoolInterface::class)); $this-&amp;gt;commandHandler = new ProcessPaymentCommandHandler( $this-&amp;gt;createMock(PaymentRepositoryInterface::class), $this-&amp;gt;writer, $this-&amp;gt;createMock(EventBusInterface::class), $this-&amp;gt;createMock(LoggerInterface::class) ); $this-&amp;gt;queryHandler = new PaymentQueryHandler($this-&amp;gt;reader, $this-&amp;gt;createMock(LoggerInterface::class)); } public function testCqrsSeparation(): void { // Exécuter une commande $command = new ProcessPaymentCommand( 'payment-123', 100.00, 'EUR', 'org-456' ); $this-&amp;gt;commandHandler-&amp;gt;handle($command); // Vérifier avec une requête $query = new GetPaymentByIdQuery('payment-123', 'org-456'); $payment = $this-&amp;gt;queryHandler-&amp;gt;handle($query); $this-&amp;gt;assertNotNull($payment); $this-&amp;gt;assertEquals('payment-123', $payment-&amp;gt;getId()); $this-&amp;gt;assertEquals(100.00, $payment-&amp;gt;getAmount()); } public function testSearchWithAnalytics(): void { // Créer plusieurs paiements $payments = [ new ProcessPaymentCommand('payment-1', 100.00, 'EUR', 'org-456'), new ProcessPaymentCommand('payment-2', 200.00, 'USD', 'org-456'), new ProcessPaymentCommand('payment-3', 300.00, 'EUR', 'org-789') ]; foreach ($payments as $command) { $this-&amp;gt;commandHandler-&amp;gt;handle($command); } // Rechercher avec analytics $searchQuery = new SearchPaymentsQuery('org-456', 0, 10); $result = $this-&amp;gt;queryHandler-&amp;gt;handle($searchQuery); $this-&amp;gt;assertCount(2, $result-&amp;gt;getPayments()); $this-&amp;gt;assertEquals(2, $result-&amp;gt;getTotal()); }}&lt;/code&gt;## 📊 &lt;strong&gt;Performance et Optimisation&lt;/strong&gt;### &lt;strong&gt;Stratégies d&amp;rsquo;Optimisation CQRS&lt;/strong&gt;#### &lt;strong&gt;1. Index Optimisés avec Routing&lt;/strong&gt;&lt;code&gt;json{ &amp;quot;mappings&amp;quot;: { &amp;quot;properties&amp;quot;: { &amp;quot;paymentId&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;organizationId&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;description&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;text&amp;quot;, &amp;quot;analyzer&amp;quot;: &amp;quot;payment_analyzer&amp;quot;, &amp;quot;fields&amp;quot;: { &amp;quot;suggest&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;completion&amp;quot; } } }, &amp;quot;processedAt&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;date&amp;quot; }, &amp;quot;amount&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;double&amp;quot; } } }, &amp;quot;settings&amp;quot;: { &amp;quot;number_of_shards&amp;quot;: 3, &amp;quot;number_of_replicas&amp;quot;: 1, &amp;quot;refresh_interval&amp;quot;: &amp;quot;30s&amp;quot; }}&lt;/code&gt;#### &lt;strong&gt;2. Cache Multi-Niveaux&lt;/strong&gt;&lt;code&gt;phppublic function searchWithMultiLevelCache(SearchPaymentsQuery $query): PaymentSearchResult{ // Cache L1: Mémoire if (isset($this-&amp;gt;memoryCache[$query-&amp;gt;getCacheKey()])) { return $this-&amp;gt;memoryCache[$query-&amp;gt;getCacheKey()]; } // Cache L2: Redis $cached = $this-&amp;gt;redis-&amp;gt;get(&amp;quot;payment_search:{$query-&amp;gt;getCacheKey()}&amp;quot;); if ($cached) { $result = PaymentSearchResult::fromArray(json_decode($cached, true)); $this-&amp;gt;memoryCache[$query-&amp;gt;getCacheKey()] = $result; return $result; } // ElasticSearch $result = $this-&amp;gt;searchPayments($query); // Mettre en cache $this-&amp;gt;memoryCache[$query-&amp;gt;getCacheKey()] = $result; $this-&amp;gt;redis-&amp;gt;setex(&amp;quot;payment_search:{$query-&amp;gt;getCacheKey()}&amp;quot;, 300, json_encode($result-&amp;gt;toArray())); return $result;}&lt;/code&gt;#### &lt;strong&gt;3. Projections Asynchrones&lt;/strong&gt;&lt;code&gt;phppublic function handleEventAsync(DomainEvent $event): void{ // Mettre en queue pour traitement asynchrone $this-&amp;gt;messageBus-&amp;gt;dispatch(new ProcessProjectionCommand($event));}&lt;/code&gt;## 🎯 &lt;strong&gt;Critères d&amp;rsquo;Adoption&lt;/strong&gt;### &lt;strong&gt;Quand Utiliser CQRS avec ElasticSearch&lt;/strong&gt;#### &lt;strong&gt;✅ Avantages&lt;/strong&gt;- &lt;strong&gt;Scalabilité maximale&lt;/strong&gt; : Possibilité de scaler indépendamment- &lt;strong&gt;Performance optimale&lt;/strong&gt; : Chaque côté optimisé pour son usage- &lt;strong&gt;Flexibilité&lt;/strong&gt; : Projections multiples pour différents besoins- &lt;strong&gt;Analytics avancées&lt;/strong&gt; : Agrégations complexes et rapports- &lt;strong&gt;Recherche puissante&lt;/strong&gt; : Full-text search avec scoring#### &lt;strong&gt;❌ Inconvénients&lt;/strong&gt;- &lt;strong&gt;Complexité maximale&lt;/strong&gt; : Architecture très complexe- &lt;strong&gt;Latence&lt;/strong&gt; : Délai entre écriture et lecture- &lt;strong&gt;Synchronisation&lt;/strong&gt; : Besoin de synchroniser les données- &lt;strong&gt;Expertise&lt;/strong&gt; : Équipe très expérimentée requise- &lt;strong&gt;Coût&lt;/strong&gt; : Infrastructure plus coûteuse#### &lt;strong&gt;🎯 Critères d&amp;rsquo;Adoption&lt;/strong&gt;- &lt;strong&gt;Système très complexe&lt;/strong&gt; : Besoins de scalabilité maximale- &lt;strong&gt;Équipe très expérimentée&lt;/strong&gt; : Maîtrise d&amp;rsquo;ElasticSearch et CQRS- &lt;strong&gt;Budget important&lt;/strong&gt; : Investissement en complexité justifié- &lt;strong&gt;Performance critique&lt;/strong&gt; : Besoins de performance maximale- &lt;strong&gt;Analytics avancées&lt;/strong&gt; : Besoins de rapports complexes- &lt;strong&gt;Recherche complexe&lt;/strong&gt; : Besoins de recherche full-text avancée## 🚀 &lt;strong&gt;Votre Prochaine Étape&lt;/strong&gt;

&lt;div class="chapter-navigation"&gt;
 &lt;h2 class="chapter-nav-title"&gt;🎯 Votre Prochaine Étape&lt;/h2&gt;
 &lt;p class="chapter-nav-subtitle"&gt;Maintenant que vous comprenez les concepts de base et que j'ai partagé mon expérience avec Gyroscops, quel est votre contexte ?&lt;/p&gt;</description></item><item><title>Stockage ElasticSearch - Event Sourcing</title><link>http://localhost:1313/chapitres/stockage/elasticsearch/chapitre-37-stockage-elasticsearch-event-sourcing/</link><pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/chapitres/stockage/elasticsearch/chapitre-37-stockage-elasticsearch-event-sourcing/</guid><description/></item><item><title>Stockage ElasticSearch - Event Sourcing + CQS</title><link>http://localhost:1313/chapitres/stockage/elasticsearch/chapitre-38-stockage-elasticsearch-event-sourcing-cqs/</link><pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/chapitres/stockage/elasticsearch/chapitre-38-stockage-elasticsearch-event-sourcing-cqs/</guid><description>&lt;h2 id="-contexte-et-objectifs-pourquoi-event-sourcing--cqs-avec-elasticsearch-cette-combinaison-offre-le-meilleur-des-deux-mondes--laudit-trail-complet-de-levent-sourcing-avec-la-séparation-optimisée-des-responsabilités-du-cqs-le-tout-sur-une-plateforme-de-recherche-et-danalytics-puissante-avantages-de-cette-combinaison--audit-trail-complet--historique-de-tous-les-événements--performance-optimisée--séparation-claire-entre-écriture-et-lecture--recherche-avancée--full-text-search-sur-les-événements--analytics-temporelles--analyse-des-tendances-dans-le-temps--scalabilité--possibilité-de-scaler-indépendamment-contexte-gyroscopsdans-notre-écosystème-user--organization--workflow--cloud-resources--billing-event-sourcing--cqs-avec-elasticsearch-est-idéal-pour---système-de-facturation--audit-trail-des-paiements-avec-recherche-avancée--logs-d--historique-complet-avec-analytics--métriques-de-performance--traçabilité-des-performances-dans-le-temps--workflows--historique-des-étapes-avec-recherche-et-analytics--architecture-event-sourcing--cqs-séparation-des-responsabilités-command-side-write--command-handlers--traitement-des-commandes-métier--event-store--persistance-des-événements-dans-elasticsearch--event-handlers--gestion-des-événements-de-domaine--bulk-operations--optimisation-des-écritures-query-side-read--query-handlers--traitement-des-requêtes--event-search--recherche-dans-les-événements--analytics-services--services-danalytics-temporelles--caches--optimisation-des-performances-flux-de-données-completmermaidgraph-td----acommand----bcommand-handler----b----caggregate----c----devents----d----eevent-store-elasticsearch----e----fevent-handlers----f----gprojections----g----hread-models--------iquery----jquery-handler----j----kevent-search----k----e----e----lsearch-results----l----mresponse--------nanalytics----oanalytics-service----o----e----e----phistorical-data----p----qanalytics-results--implémentation-pratique-1-command-side-implementation-event-store-elasticsearch-avancéphpphpnamespace-appinfrastructureeventstoreuse-elasticsearchclientuse-appdomaineventdomaineventuse-appdomaineventeventstoreinterfaceuse-psrlogloggerinterfaceclass-elasticsearcheventstore-implements-eventstoreinterface----private-client-client----private-string-index----private-loggerinterface-logger----private-array-bulkbuffer------private-int-bulksize----public-function-__construct--------client-client---------string-index---------loggerinterface-logger--------int-bulksize--100-------------this-client--client--------this-index--index--------this-logger--logger--------this-bulksize--bulksize--------public-function-appendeventsstring-aggregateid-array-events-int-expectedversion-void------------try--------------vérifier-la-version-attendue------------lastevent--this-getlasteventaggregateid------------------------if-lastevent--lasteventversion--expectedversion-----------------throw-new-concurrencyexceptionversion-mismatch-------------------------------------préparer-les-événements-pour-linsertion------------version--expectedversion--1------------------------foreach-events-as-event-----------------this-bulkbuffer----------------------index--------------------------_index--this-index------------------------_id--event-getid--------------------------------------------------------------------this-bulkbuffer----------------------eventid--event-getid--------------------aggregateid--aggregateid--------------------aggregatetype--event-getaggregatetype--------------------eventtype--event-geteventtype--------------------eventdata--event-toarray--------------------version--version--------------------timestamp--event-gettimestamp-formatc--------------------correlationid--event-getcorrelationid--------------------causationid--event-getcausationid--------------------metadata--event-getmetadata------------------------------------------------if-countthis-bulkbuffer--this-bulksize--2---------------------this-flushbulk----------------------------------------------------this-flushbulk---------------------catch-exception-e-------------this-logger-errorfailed-to-append-events-----------------aggregateid--aggregateid----------------events--countevents----------------error--e-getmessage------------------------------------throw-e----------------public-function-geteventsstring-aggregateid-int-fromversion--0-array------------query--------------query------------------bool----------------------must--------------------------term--aggregateid--aggregateid------------------------range--version--gte--fromversion------------------------------------------------------------sort--version--order--asc------------------------response--this-client-search------------index--this-index------------body--query------------------------events----------foreach-responsehitshits-as-hit-------------events--this-deserializeeventhit_source------------------------return-events--------public-function-searcheventsarray-criteria-array------------query--------------query------------------bool----------------------must------------------------------------------sort--timestamp--order--desc------------------------if-issetcriteriaaggregatetype-------------queryqueryboolmust------------------term--aggregatetype--criteriaaggregatetype------------------------------------if-issetcriteriaeventtype-------------queryqueryboolmust------------------term--eventtype--criteriaeventtype------------------------------------if-issetcriteriasearchtext-------------queryqueryboolmust------------------multi_match----------------------query--criteriasearchtext--------------------fields--eventdata-metadata----------------------------------------------------if-issetcriteriafrom--issetcriteriato-------------range--------------if-issetcriteriafrom-----------------rangegte--criteriafrom-formatc------------------------if-issetcriteriato-----------------rangelte--criteriato-formatc------------------------------------queryqueryboolmust------------------range--timestamp--range------------------------------------response--this-client-search------------index--this-index------------body--query------------------------events----------foreach-responsehitshits-as-hit-------------events--this-deserializeeventhit_source------------------------return-events--------private-function-getlasteventstring-aggregateid-array------------query--------------query------------------term--aggregateid--aggregateid------------------------sort--version--order--desc------------size--1------------------------response--this-client-search------------index--this-index------------body--query------------------------if-emptyresponsehitshits-------------return-null------------------------return-responsehitshits0_source--------private-function-flushbulk-void------------if-emptythis-bulkbuffer-------------return----------------try-------------response--this-client-bulk----------------body--this-bulkbuffer----------------refresh--false------------------------this-logger-infobulk-events-inserted-----------------index--this-index----------------operations--countthis-bulkbuffer--2----------------errors--responseerrors------------------------this-bulkbuffer-----------catch-exception-e-------------this-logger-errorbulk-events-insertion-failed-----------------index--this-index----------------error--e-getmessage----------------operations--countthis-bulkbuffer--2------------------------throw-e----------------private-function-deserializeeventarray-document-domainevent------------eventclass--documenteventtype--------return-eventclassfromarraydocumenteventdata-----command-handler-avec-event-sourcingphpphpnamespace-appapplicationcommandpaymentuse-appdomainpaymentpaymentaggregateuse-appdomaineventeventstoreinterfaceuse-appdomaineventeventbusinterfaceuse-psrlogloggerinterfaceclass-processpaymentcommandhandler----public-function-__construct--------private-eventstoreinterface-eventstore--------private-eventbusinterface-eventbus--------private-loggerinterface-logger---------public-function-handleprocesspaymentcommand-command-void------------try--------------charger-lagrégat-depuis-les-événements------------events--this-eventstore-geteventscommand-getpaymentid------------payment--paymentaggregatefromeventsevents-------------------------exécuter-la-commande------------payment-processpaymentcommand-getamount-command-getcurrency-------------------------sauvegarder-les-événements------------this-eventstore-appendevents----------------command-getpaymentid----------------payment-getuncommittedevents----------------payment-getversion-------------------------------------publier-les-événements------------foreach-payment-getuncommittedevents-as-event-----------------this-eventbus-publishevent-------------------------------------nettoyer-les-événements-non-commités------------payment-markeventsascommitted------------------------this-logger-infopayment-processed-with-event-sourcing-----------------paymentid--command-getpaymentid----------------amount--command-getamount----------------currency--command-getcurrency----------------events--countpayment-getuncommittedevents---------------------------------catch-exception-e-------------this-logger-errorpayment-processing-failed-----------------paymentid--command-getpaymentid----------------error--e-getmessage------------------------------------throw-e-------------2-query-side-implementation-event-search-servicephpphpnamespace-appinfrastructureelasticsearchqueryuse-elasticsearchclientuse-psrlogloggerinterfaceuse-psrcachecacheitempoolinterfaceclass-eventsearchservice----private-client-client----private-string-index----private-loggerinterface-logger----private-cacheitempoolinterface-cache----public-function-__construct--------client-client---------string-index---------loggerinterface-logger--------cacheitempoolinterface-cache-------------this-client--client--------this-index--index--------this-logger--logger--------this-cache--cache--------public-function-searcheventsarray-query-string-cachekey--null-array-------------vérifier-le-cache--------if-cachekey-------------cacheditem--this-cache-getitemcachekey------------if-cacheditem-ishit-----------------this-logger-debugevent-search-result-served-from-cache---------------------index--this-index--------------------cachekey--cachekey--------------------------------return-cacheditem-get----------------------------try-------------response--this-client-search----------------index--this-index----------------body--query-------------------------mettre-en-cache------------if-cachekey-----------------cacheditem-setresponse----------------cacheditem-expiresafter300--5-minutes----------------this-cache-savecacheditem------------------------this-logger-infoevent-search-executed-----------------index--this-index----------------hits--responsehitstotalvalue----------------took--responsetook------------------------return-response---------catch-exception-e-------------this-logger-errorevent-search-failed-----------------index--this-index----------------query--query----------------error--e-getmessage------------------------throw-e----------------public-function-geteventbyidstring-eventid-array------------try-------------response--this-client-get----------------index--this-index----------------id--eventid------------------------return-response_source---------catch-elasticsearchcommonexceptionsmissing404exception-e-------------return-null---------catch-exception-e-------------this-logger-errorfailed-to-get-event-----------------index--this-index----------------eventid--eventid----------------error--e-getmessage------------------------throw-e----------------public-function-geteventsbyaggregatestring-aggregateid-int-fromversion--0-array------------query--------------query------------------bool----------------------must--------------------------term--aggregateid--aggregateid------------------------range--version--gte--fromversion------------------------------------------------------------sort--version--order--asc------------------------response--this-searcheventsquery----------------events----------foreach-responsehitshits-as-hit-------------events--hit_source------------------------return-events--------public-function-geteventsbytypestring-eventtype-datetime-from--null-datetime-to--null-array------------query--------------query------------------bool----------------------must--------------------------term--eventtype--eventtype------------------------------------------------------------sort--timestamp--order--desc------------------------if-from--to-------------range--------------if-from-----------------rangegte--from-formatc------------------------if-to-----------------rangelte--to-formatc------------------------------------queryqueryboolmust------------------range--timestamp--range------------------------------------response--this-searcheventsquery----------------events----------foreach-responsehitshits-as-hit-------------events--hit_source------------------------return-events--------public-function-geteventstatisticsstring-eventtype-datetime-from-datetime-to-array------------query--------------query------------------bool----------------------must--------------------------term--eventtype--eventtype------------------------range------------------------------timestamp----------------------------------gte--from-formatc--------------------------------lte--to-formatc----------------------------------------------------------------------------------------------------------------aggs------------------by_hour----------------------date_histogram--------------------------field--timestamp------------------------calendar_interval--hour----------------------------------------------------by_organization----------------------terms--------------------------field--metadataorganizationid----------------------------------------------------by_user----------------------terms--------------------------field--metadatauserid------------------------------------------------------------size--0------------------------cachekey--event_stats_eventtype_from-gettimestamp_to-gettimestamp--------response--this-searcheventsquery-cachekey----------------return-------------total--responsehitstotalvalue------------by_hour--responseaggregationsby_hourbuckets------------by_organization--responseaggregationsby_organizationbuckets------------by_user--responseaggregationsby_userbuckets-------------query-handler-pour-les-événementsphpphpnamespace-appapplicationquerypaymentuse-appinfrastructureelasticsearchqueryeventsearchserviceuse-appdomainpaymentpaymentuse-psrlogloggerinterfaceclass-paymenteventqueryhandler----private-eventsearchservice-eventsearch----private-loggerinterface-logger----public-function-__constructeventsearchservice-eventsearch-loggerinterface-logger------------this-eventsearch--eventsearch--------this-logger--logger--------public-function-handlegetpaymenthistoryquery-query-array------------events--this-eventsearch-geteventsbyaggregatequery-getpaymentid----------------history----------foreach-events-as-event-------------history------------------eventid--eventeventid----------------eventtype--eventeventtype----------------timestamp--eventtimestamp----------------data--eventeventdata----------------metadata--eventmetadata------------------------------------return-history--------public-function-handlesearchpaymenteventsquery-query-array------------searchquery--------------query------------------bool----------------------must--------------------------term--aggregatetype--payment------------------------------------------------------------sort--timestamp--order--desc------------from--query-getoffset------------size--query-getsize------------------------if-query-geteventtype-------------searchqueryqueryboolmust------------------term--eventtype--query-geteventtype------------------------------------if-query-getsearchtext-------------searchqueryqueryboolmust------------------multi_match----------------------query--query-getsearchtext--------------------fields--eventdata-metadata----------------------------------------------------if-query-getfrom--query-getto-------------range--------------if-query-getfrom-----------------rangegte--query-getfrom-formatc------------------------if-query-getto-----------------rangelte--query-getto-formatc------------------------------------searchqueryqueryboolmust------------------range--timestamp--range------------------------------------cachekey--payment_events_--md5serializequery--------response--this-eventsearch-searcheventssearchquery-cachekey----------------results----------foreach-responsehitshits-as-hit-------------results------------------eventid--hit_sourceeventid----------------aggregateid--hit_sourceaggregateid----------------eventtype--hit_sourceeventtype----------------timestamp--hit_sourcetimestamp----------------data--hit_sourceeventdata----------------metadata--hit_sourcemetadata------------------------------------return-results--------public-function-handlegetpaymenteventstatisticsquery-query-array------------return-this-eventsearch-geteventstatistics------------query-geteventtype------------query-getfrom------------query-getto----------------public-function-handlereplaypaymenteventsquery-query-payment------------events--this-eventsearch-geteventsbyaggregatequery-getpaymentid-----------------reconstruire-lagrégat-depuis-les-événements--------payment--paymentaggregatefromeventsevents----------------return-payment-topayment-----3-service-d-service-dphpphpnamespace-appapplicationserviceelasticsearchuse-appinfrastructureelasticsearchqueryeventsearchserviceuse-psrlogloggerinterfaceclass-eventanalyticsservice----private-eventsearchservice-eventsearch----private-loggerinterface-logger----public-function-__constructeventsearchservice-eventsearch-loggerinterface-logger------------this-eventsearch--eventsearch--------this-logger--logger--------public-function-geteventtrendsstring-eventtype-datetime-from-datetime-to-string-interval--day-array------------query--------------query------------------bool----------------------must--------------------------term--eventtype--eventtype------------------------range------------------------------timestamp----------------------------------gte--from-formatc--------------------------------lte--to-formatc----------------------------------------------------------------------------------------------------------------aggs------------------trends----------------------date_histogram--------------------------field--timestamp------------------------calendar_interval--interval------------------------------------------------------------size--0------------------------cachekey--event_trends_eventtype_interval_from-gettimestamp_to-gettimestamp--------response--this-eventsearch-searcheventsquery-cachekey----------------trends----------foreach-responseaggregationstrendsbuckets-as-bucket-------------trends------------------date--bucketkey_as_string----------------count--bucketdoc_count------------------------------------return-trends--------public-function-geteventcorrelationsstring-correlationid-array------------query--------------query------------------term--correlationid--correlationid------------------------sort--timestamp--order--asc------------------------response--this-eventsearch-searcheventsquery----------------correlations----------foreach-responsehitshits-as-hit-------------correlations------------------eventtype--hit_sourceeventtype----------------aggregateid--hit_sourceaggregateid----------------timestamp--hit_sourcetimestamp----------------data--hit_sourceeventdata------------------------------------return-correlations--------public-function-geteventheatmapstring-eventtype-datetime-from-datetime-to-array------------query--------------query------------------bool----------------------must--------------------------term--eventtype--eventtype------------------------range------------------------------timestamp----------------------------------gte--from-formatc--------------------------------lte--to-formatc----------------------------------------------------------------------------------------------------------------aggs------------------by_hour----------------------date_histogram--------------------------field--timestamp------------------------calendar_interval--hour----------------------------------------------------by_day----------------------date_histogram--------------------------field--timestamp------------------------calendar_interval--day------------------------------------------------------------size--0------------------------cachekey--event_heatmap_eventtype_from-gettimestamp_to-gettimestamp--------response--this-eventsearch-searcheventsquery-cachekey----------------return-------------by_hour--responseaggregationsby_hourbuckets------------by_day--responseaggregationsby_daybuckets----------------public-function-searcheventdatastring-searchtext-array-filters---array------------query--------------query------------------bool----------------------must--------------------------multi_match------------------------------query--searchtext----------------------------fields--eventdata-metadata------------------------------------------------------------------------------------sort--timestamp--order--desc------------------------if-issetfiltersaggregatetype-------------queryqueryboolmust------------------term--aggregatetype--filtersaggregatetype------------------------------------if-issetfilterseventtype-------------queryqueryboolmust------------------term--eventtype--filterseventtype------------------------------------if-issetfiltersfrom--issetfiltersto-------------range--------------if-issetfiltersfrom-----------------rangegte--filtersfrom-formatc------------------------if-issetfiltersto-----------------rangelte--filtersto-formatc------------------------------------queryqueryboolmust------------------range--timestamp--range------------------------------------cachekey--event_search_--md5searchtext--serializefilters--------response--this-eventsearch-searcheventsquery-cachekey----------------results----------foreach-responsehitshits-as-hit-------------results------------------eventid--hit_sourceeventid----------------aggregateid--hit_sourceaggregateid----------------eventtype--hit_sourceeventtype----------------timestamp--hit_sourcetimestamp----------------data--hit_sourceeventdata----------------metadata--hit_sourcemetadata------------------------------------return-results------tests-et-validation-tests-dphpphpnamespace-apptestsintegrationelasticsearchuse-appapplicationcommandpaymentprocesspaymentcommanduse-appapplicationcommandpaymentprocesspaymentcommandhandleruse-appapplicationquerypaymentgetpaymenthistoryqueryuse-appapplicationquerypaymentpaymenteventqueryhandleruse-appinfrastructureeventstoreelasticsearcheventstoreuse-appinfrastructureelasticsearchqueryeventsearchserviceuse-elasticsearchclientbuilderclass-elasticsearcheventsourcingcqstest-extends-testcase----private-elasticsearcheventstore-eventstore----private-eventsearchservice-eventsearch----private-processpaymentcommandhandler-commandhandler----private-paymenteventqueryhandler-queryhandler----protected-function-setup-void------------client--clientbuildercreate-sethostslocalhost9200-build----------------this-eventstore--new-elasticsearcheventstoreclient-test-events-this-createmockloggerinterfaceclass--------this-eventsearch--new-eventsearchserviceclient-test-events-this-createmockloggerinterfaceclass-this-createmockcacheitempoolinterfaceclass----------------this-commandhandler--new-processpaymentcommandhandler------------this-eventstore------------this-createmockeventbusinterfaceclass------------this-createmockloggerinterfaceclass------------------------this-queryhandler--new-paymenteventqueryhandlerthis-eventsearch-this-createmockloggerinterfaceclass--------public-function-testeventsourcingcqsflow-void-------------exécuter-une-commande--------command--new-processpaymentcommand------------payment-123------------10000------------eur------------------------this-commandhandler-handlecommand-----------------vérifier-lhistorique-des-événements--------query--new-getpaymenthistoryquerypayment-123--------history--this-queryhandler-handlequery----------------this-assertnotemptyhistory--------this-assertcount1-history--------this-assertequalspaymentprocessed-history0eventtype--------public-function-testeventsearchwithanalytics-void-------------créer-plusieurs-événements--------commands--------------new-processpaymentcommandpayment-1-10000-eur------------new-processpaymentcommandpayment-2-20000-usd------------new-processpaymentcommandpayment-3-30000-eur------------------------foreach-commands-as-command-------------this-commandhandler-handlecommand-------------------------rechercher-les-événements--------searchquery--new-searchpaymenteventsquery------------new-datetime2024-01-01------------new-datetime2024-12-31------------------------results--this-queryhandler-handlesearchquery----------------this-assertcount3-results--------this-assertequalspaymentprocessed-results0eventtype------performance-et-optimisation-stratégies-d-1-index-optimisés-pour-les-événementsjson--mappings-----properties-------eventid--type-keyword-------aggregateid--type-keyword-------aggregatetype--type-keyword-------eventtype--type-keyword-------eventdata--type-object-------version--type-integer-------timestamp--type-date-------correlationid--type-keyword-------causationid--type-keyword-------metadata--type-object---------settings-----number_of_shards-3----number_of_replicas-1----refresh_interval-30s---2-cache-multi-niveauxphppublic-function-searcheventswithcachearray-query-string-cachekey--null-array-----cache-l1-mémoire----if-issetthis-memorycachecachekey---------return-this-memorycachecachekey-------------cache-l2-redis----if-cached--this-redis-getevent_searchcachekey---------result--json_decodecached-true--------this-memorycachecachekey--result--------return-result-------------elasticsearch----result--this-searcheventsquery---------mettre-en-cache----this-memorycachecachekey--result----this-redis-setexevent_searchcachekey-300-json_encoderesult--------return-result-3-bulk-operations-optimiséesphppublic-function-appendeventsbulkarray-aggregateevents-void----bulk----------foreach-aggregateevents-as-aggregateid--events---------foreach-events-as-event-------------bulk------------------index----------------------_index--this-index--------------------_id--event-getid----------------------------------------bulk--this-eventtodocumentevent--------------------this-client-bulk--------body--bulk--------refresh--false------critères-d-quand-utiliser-event-sourcing--cqs-avec-elasticsearch--avantages--audit-trail-complet--historique-de-tous-les-événements--performance-optimisée--séparation-claire-entre-écriture-et-lecture--recherche-avancée--full-text-search-sur-les-événements--analytics-temporelles--analyse-des-tendances-dans-le-temps--scalabilité--possibilité-de-scaler-indépendamment--inconvénients--complexité-élevée--architecture-très-complexe--stockage-important--beaucoup-despace-disque-nécessaire--performance--requêtes-plus-lentes-sur-de-gros-volumes--expertise--équipe-très-expérimentée-requise--critères-d--audit-trail-critique--besoin-de-traçabilité-complète--recherche-avancée--besoin-de-rechercher-dans-les-événements--analytics-temporelles--besoin-danalyser-les-tendances--performance-importante--besoins-de-performance-élevée--équipe-très-expérimentée--maîtrise-devent-sourcing-cqs-et-elasticsearch--budget-important--investissement-en-complexité-justifié--votre-prochaine-étapehahahugoshortcode47s0hbhbevent-sourcing--cqs-avec-elasticsearch-offre-une-approche-sophistiquée-pour-l"&gt;🎯 &lt;strong&gt;Contexte et Objectifs&lt;/strong&gt;### **Pourquoi Event Sourcing + CQS avec ElasticSearch ?**Cette combinaison offre le meilleur des deux mondes : l&amp;rsquo;audit trail complet de l&amp;rsquo;Event Sourcing avec la séparation optimisée des responsabilités du CQS, le tout sur une plateforme de recherche et d&amp;rsquo;analytics puissante.#### &lt;strong&gt;Avantages de cette Combinaison&lt;/strong&gt;- &lt;strong&gt;Audit trail complet&lt;/strong&gt; : Historique de tous les événements- &lt;strong&gt;Performance optimisée&lt;/strong&gt; : Séparation claire entre écriture et lecture- &lt;strong&gt;Recherche avancée&lt;/strong&gt; : Full-text search sur les événements- &lt;strong&gt;Analytics temporelles&lt;/strong&gt; : Analyse des tendances dans le temps- &lt;strong&gt;Scalabilité&lt;/strong&gt; : Possibilité de scaler indépendamment### &lt;strong&gt;Contexte Gyroscops&lt;/strong&gt;Dans notre écosystème &lt;strong&gt;User → Organization → Workflow → Cloud Resources → Billing&lt;/strong&gt;, Event Sourcing + CQS avec ElasticSearch est idéal pour :- &lt;strong&gt;Système de facturation&lt;/strong&gt; : Audit trail des paiements avec recherche avancée- &lt;strong&gt;Logs d&amp;rsquo;application&lt;/strong&gt; : Historique complet avec analytics- &lt;strong&gt;Métriques de performance&lt;/strong&gt; : Traçabilité des performances dans le temps- &lt;strong&gt;Workflows&lt;/strong&gt; : Historique des étapes avec recherche et analytics## 🏗️ &lt;strong&gt;Architecture Event Sourcing + CQS&lt;/strong&gt;### &lt;strong&gt;Séparation des Responsabilités&lt;/strong&gt;#### &lt;strong&gt;Command Side (Write)&lt;/strong&gt;- &lt;strong&gt;Command Handlers&lt;/strong&gt; : Traitement des commandes métier- &lt;strong&gt;Event Store&lt;/strong&gt; : Persistance des événements dans ElasticSearch- &lt;strong&gt;Event Handlers&lt;/strong&gt; : Gestion des événements de domaine- &lt;strong&gt;Bulk Operations&lt;/strong&gt; : Optimisation des écritures#### &lt;strong&gt;Query Side (Read)&lt;/strong&gt;- &lt;strong&gt;Query Handlers&lt;/strong&gt; : Traitement des requêtes- &lt;strong&gt;Event Search&lt;/strong&gt; : Recherche dans les événements- &lt;strong&gt;Analytics Services&lt;/strong&gt; : Services d&amp;rsquo;analytics temporelles- &lt;strong&gt;Caches&lt;/strong&gt; : Optimisation des performances### &lt;strong&gt;Flux de Données Complet&lt;/strong&gt;&lt;code&gt;mermaidgraph TD A[Command] --&amp;gt; B[Command Handler] B --&amp;gt; C[Aggregate] C --&amp;gt; D[Events] D --&amp;gt; E[Event Store ElasticSearch] E --&amp;gt; F[Event Handlers] F --&amp;gt; G[Projections] G --&amp;gt; H[Read Models] I[Query] --&amp;gt; J[Query Handler] J --&amp;gt; K[Event Search] K --&amp;gt; E E --&amp;gt; L[Search Results] L --&amp;gt; M[Response] N[Analytics] --&amp;gt; O[Analytics Service] O --&amp;gt; E E --&amp;gt; P[Historical Data] P --&amp;gt; Q[Analytics Results]&lt;/code&gt;## 💻 &lt;strong&gt;Implémentation Pratique&lt;/strong&gt;### &lt;strong&gt;1. Command Side Implementation&lt;/strong&gt;#### &lt;strong&gt;Event Store ElasticSearch Avancé&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Infrastructure\EventStore;use Elasticsearch\Client;use App\Domain\Event\DomainEvent;use App\Domain\Event\EventStoreInterface;use Psr\Log\LoggerInterface;class ElasticSearchEventStore implements EventStoreInterface{ private Client $client; private string $index; private LoggerInterface $logger; private array $bulkBuffer = []; private int $bulkSize; public function __construct( Client $client, string $index, LoggerInterface $logger, int $bulkSize = 100 ) { $this-&amp;gt;client = $client; $this-&amp;gt;index = $index; $this-&amp;gt;logger = $logger; $this-&amp;gt;bulkSize = $bulkSize; } public function appendEvents(string $aggregateId, array $events, int $expectedVersion): void { try { // Vérifier la version attendue $lastEvent = $this-&amp;gt;getLastEvent($aggregateId); if ($lastEvent &amp;amp;&amp;amp; $lastEvent['version'] !== $expectedVersion) { throw new ConcurrencyException('Version mismatch'); } // Préparer les événements pour l'insertion $version = $expectedVersion + 1; foreach ($events as $event) { $this-&amp;gt;bulkBuffer[] = [ 'index' =&amp;gt; [ '_index' =&amp;gt; $this-&amp;gt;index, '_id' =&amp;gt; $event-&amp;gt;getId() ] ]; $this-&amp;gt;bulkBuffer[] = [ 'eventId' =&amp;gt; $event-&amp;gt;getId(), 'aggregateId' =&amp;gt; $aggregateId, 'aggregateType' =&amp;gt; $event-&amp;gt;getAggregateType(), 'eventType' =&amp;gt; $event-&amp;gt;getEventType(), 'eventData' =&amp;gt; $event-&amp;gt;toArray(), 'version' =&amp;gt; $version++, 'timestamp' =&amp;gt; $event-&amp;gt;getTimestamp()-&amp;gt;format('c'), 'correlationId' =&amp;gt; $event-&amp;gt;getCorrelationId(), 'causationId' =&amp;gt; $event-&amp;gt;getCausationId(), 'metadata' =&amp;gt; $event-&amp;gt;getMetadata() ]; if (count($this-&amp;gt;bulkBuffer) &amp;gt;= $this-&amp;gt;bulkSize * 2) { $this-&amp;gt;flushBulk(); } } $this-&amp;gt;flushBulk(); } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Failed to append events', [ 'aggregateId' =&amp;gt; $aggregateId, 'events' =&amp;gt; count($events), 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); throw $e; } } public function getEvents(string $aggregateId, int $fromVersion = 0): array { $query = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [ ['term' =&amp;gt; ['aggregateId' =&amp;gt; $aggregateId]], ['range' =&amp;gt; ['version' =&amp;gt; ['gte' =&amp;gt; $fromVersion]]] ] ] ], 'sort' =&amp;gt; [['version' =&amp;gt; ['order' =&amp;gt; 'asc']]] ]; $response = $this-&amp;gt;client-&amp;gt;search([ 'index' =&amp;gt; $this-&amp;gt;index, 'body' =&amp;gt; $query ]); $events = []; foreach ($response['hits']['hits'] as $hit) { $events[] = $this-&amp;gt;deserializeEvent($hit['_source']); } return $events; } public function searchEvents(array $criteria): array { $query = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [] ] ], 'sort' =&amp;gt; [['timestamp' =&amp;gt; ['order' =&amp;gt; 'desc']]] ]; if (isset($criteria['aggregateType'])) { $query['query']['bool']['must'][] = [ 'term' =&amp;gt; ['aggregateType' =&amp;gt; $criteria['aggregateType']] ]; } if (isset($criteria['eventType'])) { $query['query']['bool']['must'][] = [ 'term' =&amp;gt; ['eventType' =&amp;gt; $criteria['eventType']] ]; } if (isset($criteria['searchText'])) { $query['query']['bool']['must'][] = [ 'multi_match' =&amp;gt; [ 'query' =&amp;gt; $criteria['searchText'], 'fields' =&amp;gt; ['eventData.*', 'metadata.*'] ] ]; } if (isset($criteria['from']) || isset($criteria['to'])) { $range = []; if (isset($criteria['from'])) { $range['gte'] = $criteria['from']-&amp;gt;format('c'); } if (isset($criteria['to'])) { $range['lte'] = $criteria['to']-&amp;gt;format('c'); } $query['query']['bool']['must'][] = [ 'range' =&amp;gt; ['timestamp' =&amp;gt; $range] ]; } $response = $this-&amp;gt;client-&amp;gt;search([ 'index' =&amp;gt; $this-&amp;gt;index, 'body' =&amp;gt; $query ]); $events = []; foreach ($response['hits']['hits'] as $hit) { $events[] = $this-&amp;gt;deserializeEvent($hit['_source']); } return $events; } private function getLastEvent(string $aggregateId): ?array { $query = [ 'query' =&amp;gt; [ 'term' =&amp;gt; ['aggregateId' =&amp;gt; $aggregateId] ], 'sort' =&amp;gt; [['version' =&amp;gt; ['order' =&amp;gt; 'desc']]], 'size' =&amp;gt; 1 ]; $response = $this-&amp;gt;client-&amp;gt;search([ 'index' =&amp;gt; $this-&amp;gt;index, 'body' =&amp;gt; $query ]); if (empty($response['hits']['hits'])) { return null; } return $response['hits']['hits'][0]['_source']; } private function flushBulk(): void { if (empty($this-&amp;gt;bulkBuffer)) { return; } try { $response = $this-&amp;gt;client-&amp;gt;bulk([ 'body' =&amp;gt; $this-&amp;gt;bulkBuffer, 'refresh' =&amp;gt; false ]); $this-&amp;gt;logger-&amp;gt;info('Bulk events inserted', [ 'index' =&amp;gt; $this-&amp;gt;index, 'operations' =&amp;gt; count($this-&amp;gt;bulkBuffer) / 2, 'errors' =&amp;gt; $response['errors'] ]); $this-&amp;gt;bulkBuffer = []; } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Bulk events insertion failed', [ 'index' =&amp;gt; $this-&amp;gt;index, 'error' =&amp;gt; $e-&amp;gt;getMessage(), 'operations' =&amp;gt; count($this-&amp;gt;bulkBuffer) / 2 ]); throw $e; } } private function deserializeEvent(array $document): DomainEvent { $eventClass = $document['eventType']; return $eventClass::fromArray($document['eventData']); }}&lt;/code&gt;#### &lt;strong&gt;Command Handler avec Event Sourcing&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Application\Command\Payment;use App\Domain\Payment\PaymentAggregate;use App\Domain\Event\EventStoreInterface;use App\Domain\Event\EventBusInterface;use Psr\Log\LoggerInterface;class ProcessPaymentCommandHandler{ public function __construct( private EventStoreInterface $eventStore, private EventBusInterface $eventBus, private LoggerInterface $logger ) {} public function handle(ProcessPaymentCommand $command): void { try { // Charger l'agrégat depuis les événements $events = $this-&amp;gt;eventStore-&amp;gt;getEvents($command-&amp;gt;getPaymentId()); $payment = PaymentAggregate::fromEvents($events); // Exécuter la commande $payment-&amp;gt;processPayment($command-&amp;gt;getAmount(), $command-&amp;gt;getCurrency()); // Sauvegarder les événements $this-&amp;gt;eventStore-&amp;gt;appendEvents( $command-&amp;gt;getPaymentId(), $payment-&amp;gt;getUncommittedEvents(), $payment-&amp;gt;getVersion() ); // Publier les événements foreach ($payment-&amp;gt;getUncommittedEvents() as $event) { $this-&amp;gt;eventBus-&amp;gt;publish($event); } // Nettoyer les événements non commités $payment-&amp;gt;markEventsAsCommitted(); $this-&amp;gt;logger-&amp;gt;info('Payment processed with event sourcing', [ 'paymentId' =&amp;gt; $command-&amp;gt;getPaymentId(), 'amount' =&amp;gt; $command-&amp;gt;getAmount(), 'currency' =&amp;gt; $command-&amp;gt;getCurrency(), 'events' =&amp;gt; count($payment-&amp;gt;getUncommittedEvents()) ]); } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Payment processing failed', [ 'paymentId' =&amp;gt; $command-&amp;gt;getPaymentId(), 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); throw $e; } }}&lt;/code&gt;### &lt;strong&gt;2. Query Side Implementation&lt;/strong&gt;#### &lt;strong&gt;Event Search Service&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Infrastructure\ElasticSearch\Query;use Elasticsearch\Client;use Psr\Log\LoggerInterface;use Psr\Cache\CacheItemPoolInterface;class EventSearchService{ private Client $client; private string $index; private LoggerInterface $logger; private CacheItemPoolInterface $cache; public function __construct( Client $client, string $index, LoggerInterface $logger, CacheItemPoolInterface $cache ) { $this-&amp;gt;client = $client; $this-&amp;gt;index = $index; $this-&amp;gt;logger = $logger; $this-&amp;gt;cache = $cache; } public function searchEvents(array $query, string $cacheKey = null): array { // Vérifier le cache if ($cacheKey) { $cachedItem = $this-&amp;gt;cache-&amp;gt;getItem($cacheKey); if ($cachedItem-&amp;gt;isHit()) { $this-&amp;gt;logger-&amp;gt;debug('Event search result served from cache', [ 'index' =&amp;gt; $this-&amp;gt;index, 'cacheKey' =&amp;gt; $cacheKey ]); return $cachedItem-&amp;gt;get(); } } try { $response = $this-&amp;gt;client-&amp;gt;search([ 'index' =&amp;gt; $this-&amp;gt;index, 'body' =&amp;gt; $query ]); // Mettre en cache if ($cacheKey) { $cachedItem-&amp;gt;set($response); $cachedItem-&amp;gt;expiresAfter(300); // 5 minutes $this-&amp;gt;cache-&amp;gt;save($cachedItem); } $this-&amp;gt;logger-&amp;gt;info('Event search executed', [ 'index' =&amp;gt; $this-&amp;gt;index, 'hits' =&amp;gt; $response['hits']['total']['value'], 'took' =&amp;gt; $response['took'] ]); return $response; } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Event search failed', [ 'index' =&amp;gt; $this-&amp;gt;index, 'query' =&amp;gt; $query, 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); throw $e; } } public function getEventById(string $eventId): ?array { try { $response = $this-&amp;gt;client-&amp;gt;get([ 'index' =&amp;gt; $this-&amp;gt;index, 'id' =&amp;gt; $eventId ]); return $response['_source']; } catch (\Elasticsearch\Common\Exceptions\Missing404Exception $e) { return null; } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Failed to get event', [ 'index' =&amp;gt; $this-&amp;gt;index, 'eventId' =&amp;gt; $eventId, 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); throw $e; } } public function getEventsByAggregate(string $aggregateId, int $fromVersion = 0): array { $query = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [ ['term' =&amp;gt; ['aggregateId' =&amp;gt; $aggregateId]], ['range' =&amp;gt; ['version' =&amp;gt; ['gte' =&amp;gt; $fromVersion]]] ] ] ], 'sort' =&amp;gt; [['version' =&amp;gt; ['order' =&amp;gt; 'asc']]] ]; $response = $this-&amp;gt;searchEvents($query); $events = []; foreach ($response['hits']['hits'] as $hit) { $events[] = $hit['_source']; } return $events; } public function getEventsByType(string $eventType, \DateTime $from = null, \DateTime $to = null): array { $query = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [ ['term' =&amp;gt; ['eventType' =&amp;gt; $eventType]] ] ] ], 'sort' =&amp;gt; [['timestamp' =&amp;gt; ['order' =&amp;gt; 'desc']]] ]; if ($from || $to) { $range = []; if ($from) { $range['gte'] = $from-&amp;gt;format('c'); } if ($to) { $range['lte'] = $to-&amp;gt;format('c'); } $query['query']['bool']['must'][] = [ 'range' =&amp;gt; ['timestamp' =&amp;gt; $range] ]; } $response = $this-&amp;gt;searchEvents($query); $events = []; foreach ($response['hits']['hits'] as $hit) { $events[] = $hit['_source']; } return $events; } public function getEventStatistics(string $eventType, \DateTime $from, \DateTime $to): array { $query = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [ ['term' =&amp;gt; ['eventType' =&amp;gt; $eventType]], ['range' =&amp;gt; [ 'timestamp' =&amp;gt; [ 'gte' =&amp;gt; $from-&amp;gt;format('c'), 'lte' =&amp;gt; $to-&amp;gt;format('c') ] ]] ] ] ], 'aggs' =&amp;gt; [ 'by_hour' =&amp;gt; [ 'date_histogram' =&amp;gt; [ 'field' =&amp;gt; 'timestamp', 'calendar_interval' =&amp;gt; 'hour' ] ], 'by_organization' =&amp;gt; [ 'terms' =&amp;gt; [ 'field' =&amp;gt; 'metadata.organizationId' ] ], 'by_user' =&amp;gt; [ 'terms' =&amp;gt; [ 'field' =&amp;gt; 'metadata.userId' ] ] ], 'size' =&amp;gt; 0 ]; $cacheKey = &amp;quot;event_stats_{$eventType}_{$from-&amp;gt;getTimestamp()}_{$to-&amp;gt;getTimestamp()}&amp;quot;; $response = $this-&amp;gt;searchEvents($query, $cacheKey); return [ 'total' =&amp;gt; $response['hits']['total']['value'], 'by_hour' =&amp;gt; $response['aggregations']['by_hour']['buckets'], 'by_organization' =&amp;gt; $response['aggregations']['by_organization']['buckets'], 'by_user' =&amp;gt; $response['aggregations']['by_user']['buckets'] ]; }}&lt;/code&gt;#### &lt;strong&gt;Query Handler pour les Événements&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Application\Query\Payment;use App\Infrastructure\ElasticSearch\Query\EventSearchService;use App\Domain\Payment\Payment;use Psr\Log\LoggerInterface;class PaymentEventQueryHandler{ private EventSearchService $eventSearch; private LoggerInterface $logger; public function __construct(EventSearchService $eventSearch, LoggerInterface $logger) { $this-&amp;gt;eventSearch = $eventSearch; $this-&amp;gt;logger = $logger; } public function handle(GetPaymentHistoryQuery $query): array { $events = $this-&amp;gt;eventSearch-&amp;gt;getEventsByAggregate($query-&amp;gt;getPaymentId()); $history = []; foreach ($events as $event) { $history[] = [ 'eventId' =&amp;gt; $event['eventId'], 'eventType' =&amp;gt; $event['eventType'], 'timestamp' =&amp;gt; $event['timestamp'], 'data' =&amp;gt; $event['eventData'], 'metadata' =&amp;gt; $event['metadata'] ]; } return $history; } public function handle(SearchPaymentEventsQuery $query): array { $searchQuery = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [ ['term' =&amp;gt; ['aggregateType' =&amp;gt; 'Payment']] ] ] ], 'sort' =&amp;gt; [['timestamp' =&amp;gt; ['order' =&amp;gt; 'desc']]], 'from' =&amp;gt; $query-&amp;gt;getOffset(), 'size' =&amp;gt; $query-&amp;gt;getSize() ]; if ($query-&amp;gt;getEventType()) { $searchQuery['query']['bool']['must'][] = [ 'term' =&amp;gt; ['eventType' =&amp;gt; $query-&amp;gt;getEventType()] ]; } if ($query-&amp;gt;getSearchText()) { $searchQuery['query']['bool']['must'][] = [ 'multi_match' =&amp;gt; [ 'query' =&amp;gt; $query-&amp;gt;getSearchText(), 'fields' =&amp;gt; ['eventData.*', 'metadata.*'] ] ]; } if ($query-&amp;gt;getFrom() || $query-&amp;gt;getTo()) { $range = []; if ($query-&amp;gt;getFrom()) { $range['gte'] = $query-&amp;gt;getFrom()-&amp;gt;format('c'); } if ($query-&amp;gt;getTo()) { $range['lte'] = $query-&amp;gt;getTo()-&amp;gt;format('c'); } $searchQuery['query']['bool']['must'][] = [ 'range' =&amp;gt; ['timestamp' =&amp;gt; $range] ]; } $cacheKey = 'payment_events_' . md5(serialize($query)); $response = $this-&amp;gt;eventSearch-&amp;gt;searchEvents($searchQuery, $cacheKey); $results = []; foreach ($response['hits']['hits'] as $hit) { $results[] = [ 'eventId' =&amp;gt; $hit['_source']['eventId'], 'aggregateId' =&amp;gt; $hit['_source']['aggregateId'], 'eventType' =&amp;gt; $hit['_source']['eventType'], 'timestamp' =&amp;gt; $hit['_source']['timestamp'], 'data' =&amp;gt; $hit['_source']['eventData'], 'metadata' =&amp;gt; $hit['_source']['metadata'] ]; } return $results; } public function handle(GetPaymentEventStatisticsQuery $query): array { return $this-&amp;gt;eventSearch-&amp;gt;getEventStatistics( $query-&amp;gt;getEventType(), $query-&amp;gt;getFrom(), $query-&amp;gt;getTo() ); } public function handle(ReplayPaymentEventsQuery $query): Payment { $events = $this-&amp;gt;eventSearch-&amp;gt;getEventsByAggregate($query-&amp;gt;getPaymentId()); // Reconstruire l'agrégat depuis les événements $payment = PaymentAggregate::fromEvents($events); return $payment-&amp;gt;toPayment(); }}&lt;/code&gt;### &lt;strong&gt;3. Service d&amp;rsquo;Analytics Avancées&lt;/strong&gt;#### &lt;strong&gt;Service d&amp;rsquo;Analytics des Événements&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Application\Service\ElasticSearch;use App\Infrastructure\ElasticSearch\Query\EventSearchService;use Psr\Log\LoggerInterface;class EventAnalyticsService{ private EventSearchService $eventSearch; private LoggerInterface $logger; public function __construct(EventSearchService $eventSearch, LoggerInterface $logger) { $this-&amp;gt;eventSearch = $eventSearch; $this-&amp;gt;logger = $logger; } public function getEventTrends(string $eventType, \DateTime $from, \DateTime $to, string $interval = 'day'): array { $query = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [ ['term' =&amp;gt; ['eventType' =&amp;gt; $eventType]], ['range' =&amp;gt; [ 'timestamp' =&amp;gt; [ 'gte' =&amp;gt; $from-&amp;gt;format('c'), 'lte' =&amp;gt; $to-&amp;gt;format('c') ] ]] ] ] ], 'aggs' =&amp;gt; [ 'trends' =&amp;gt; [ 'date_histogram' =&amp;gt; [ 'field' =&amp;gt; 'timestamp', 'calendar_interval' =&amp;gt; $interval ] ] ], 'size' =&amp;gt; 0 ]; $cacheKey = &amp;quot;event_trends_{$eventType}_{$interval}_{$from-&amp;gt;getTimestamp()}_{$to-&amp;gt;getTimestamp()}&amp;quot;; $response = $this-&amp;gt;eventSearch-&amp;gt;searchEvents($query, $cacheKey); $trends = []; foreach ($response['aggregations']['trends']['buckets'] as $bucket) { $trends[] = [ 'date' =&amp;gt; $bucket['key_as_string'], 'count' =&amp;gt; $bucket['doc_count'] ]; } return $trends; } public function getEventCorrelations(string $correlationId): array { $query = [ 'query' =&amp;gt; [ 'term' =&amp;gt; ['correlationId' =&amp;gt; $correlationId] ], 'sort' =&amp;gt; [['timestamp' =&amp;gt; ['order' =&amp;gt; 'asc']]] ]; $response = $this-&amp;gt;eventSearch-&amp;gt;searchEvents($query); $correlations = []; foreach ($response['hits']['hits'] as $hit) { $correlations[] = [ 'eventType' =&amp;gt; $hit['_source']['eventType'], 'aggregateId' =&amp;gt; $hit['_source']['aggregateId'], 'timestamp' =&amp;gt; $hit['_source']['timestamp'], 'data' =&amp;gt; $hit['_source']['eventData'] ]; } return $correlations; } public function getEventHeatmap(string $eventType, \DateTime $from, \DateTime $to): array { $query = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [ ['term' =&amp;gt; ['eventType' =&amp;gt; $eventType]], ['range' =&amp;gt; [ 'timestamp' =&amp;gt; [ 'gte' =&amp;gt; $from-&amp;gt;format('c'), 'lte' =&amp;gt; $to-&amp;gt;format('c') ] ]] ] ] ], 'aggs' =&amp;gt; [ 'by_hour' =&amp;gt; [ 'date_histogram' =&amp;gt; [ 'field' =&amp;gt; 'timestamp', 'calendar_interval' =&amp;gt; 'hour' ] ], 'by_day' =&amp;gt; [ 'date_histogram' =&amp;gt; [ 'field' =&amp;gt; 'timestamp', 'calendar_interval' =&amp;gt; 'day' ] ] ], 'size' =&amp;gt; 0 ]; $cacheKey = &amp;quot;event_heatmap_{$eventType}_{$from-&amp;gt;getTimestamp()}_{$to-&amp;gt;getTimestamp()}&amp;quot;; $response = $this-&amp;gt;eventSearch-&amp;gt;searchEvents($query, $cacheKey); return [ 'by_hour' =&amp;gt; $response['aggregations']['by_hour']['buckets'], 'by_day' =&amp;gt; $response['aggregations']['by_day']['buckets'] ]; } public function searchEventData(string $searchText, array $filters = []): array { $query = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [ ['multi_match' =&amp;gt; [ 'query' =&amp;gt; $searchText, 'fields' =&amp;gt; ['eventData.*', 'metadata.*'] ]] ] ] ], 'sort' =&amp;gt; [['timestamp' =&amp;gt; ['order' =&amp;gt; 'desc']]] ]; if (isset($filters['aggregateType'])) { $query['query']['bool']['must'][] = [ 'term' =&amp;gt; ['aggregateType' =&amp;gt; $filters['aggregateType']] ]; } if (isset($filters['eventType'])) { $query['query']['bool']['must'][] = [ 'term' =&amp;gt; ['eventType' =&amp;gt; $filters['eventType']] ]; } if (isset($filters['from']) || isset($filters['to'])) { $range = []; if (isset($filters['from'])) { $range['gte'] = $filters['from']-&amp;gt;format('c'); } if (isset($filters['to'])) { $range['lte'] = $filters['to']-&amp;gt;format('c'); } $query['query']['bool']['must'][] = [ 'range' =&amp;gt; ['timestamp' =&amp;gt; $range] ]; } $cacheKey = 'event_search_' . md5($searchText . serialize($filters)); $response = $this-&amp;gt;eventSearch-&amp;gt;searchEvents($query, $cacheKey); $results = []; foreach ($response['hits']['hits'] as $hit) { $results[] = [ 'eventId' =&amp;gt; $hit['_source']['eventId'], 'aggregateId' =&amp;gt; $hit['_source']['aggregateId'], 'eventType' =&amp;gt; $hit['_source']['eventType'], 'timestamp' =&amp;gt; $hit['_source']['timestamp'], 'data' =&amp;gt; $hit['_source']['eventData'], 'metadata' =&amp;gt; $hit['_source']['metadata'] ]; } return $results; }}&lt;/code&gt;## 🧪 &lt;strong&gt;Tests et Validation&lt;/strong&gt;### &lt;strong&gt;Tests d&amp;rsquo;Intégration Event Sourcing + CQS&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Tests\Integration\ElasticSearch;use App\Application\Command\Payment\ProcessPaymentCommand;use App\Application\Command\Payment\ProcessPaymentCommandHandler;use App\Application\Query\Payment\GetPaymentHistoryQuery;use App\Application\Query\Payment\PaymentEventQueryHandler;use App\Infrastructure\EventStore\ElasticSearchEventStore;use App\Infrastructure\ElasticSearch\Query\EventSearchService;use Elasticsearch\ClientBuilder;class ElasticSearchEventSourcingCqsTest extends TestCase{ private ElasticSearchEventStore $eventStore; private EventSearchService $eventSearch; private ProcessPaymentCommandHandler $commandHandler; private PaymentEventQueryHandler $queryHandler; protected function setUp(): void { $client = ClientBuilder::create()-&amp;gt;setHosts(['localhost:9200'])-&amp;gt;build(); $this-&amp;gt;eventStore = new ElasticSearchEventStore($client, 'test-events', $this-&amp;gt;createMock(LoggerInterface::class)); $this-&amp;gt;eventSearch = new EventSearchService($client, 'test-events', $this-&amp;gt;createMock(LoggerInterface::class), $this-&amp;gt;createMock(CacheItemPoolInterface::class)); $this-&amp;gt;commandHandler = new ProcessPaymentCommandHandler( $this-&amp;gt;eventStore, $this-&amp;gt;createMock(EventBusInterface::class), $this-&amp;gt;createMock(LoggerInterface::class) ); $this-&amp;gt;queryHandler = new PaymentEventQueryHandler($this-&amp;gt;eventSearch, $this-&amp;gt;createMock(LoggerInterface::class)); } public function testEventSourcingCqsFlow(): void { // Exécuter une commande $command = new ProcessPaymentCommand( 'payment-123', 100.00, 'EUR' ); $this-&amp;gt;commandHandler-&amp;gt;handle($command); // Vérifier l'historique des événements $query = new GetPaymentHistoryQuery('payment-123'); $history = $this-&amp;gt;queryHandler-&amp;gt;handle($query); $this-&amp;gt;assertNotEmpty($history); $this-&amp;gt;assertCount(1, $history); $this-&amp;gt;assertEquals('PaymentProcessed', $history[0]['eventType']); } public function testEventSearchWithAnalytics(): void { // Créer plusieurs événements $commands = [ new ProcessPaymentCommand('payment-1', 100.00, 'EUR'), new ProcessPaymentCommand('payment-2', 200.00, 'USD'), new ProcessPaymentCommand('payment-3', 300.00, 'EUR') ]; foreach ($commands as $command) { $this-&amp;gt;commandHandler-&amp;gt;handle($command); } // Rechercher les événements $searchQuery = new SearchPaymentEventsQuery( new \DateTime('2024-01-01'), new \DateTime('2024-12-31') ); $results = $this-&amp;gt;queryHandler-&amp;gt;handle($searchQuery); $this-&amp;gt;assertCount(3, $results); $this-&amp;gt;assertEquals('PaymentProcessed', $results[0]['eventType']); }}&lt;/code&gt;## 📊 &lt;strong&gt;Performance et Optimisation&lt;/strong&gt;### &lt;strong&gt;Stratégies d&amp;rsquo;Optimisation Event Sourcing + CQS&lt;/strong&gt;#### &lt;strong&gt;1. Index Optimisés pour les Événements&lt;/strong&gt;&lt;code&gt;json{ &amp;quot;mappings&amp;quot;: { &amp;quot;properties&amp;quot;: { &amp;quot;eventId&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;aggregateId&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;aggregateType&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;eventType&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;eventData&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot; }, &amp;quot;version&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot; }, &amp;quot;timestamp&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;date&amp;quot; }, &amp;quot;correlationId&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;causationId&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;metadata&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot; } } }, &amp;quot;settings&amp;quot;: { &amp;quot;number_of_shards&amp;quot;: 3, &amp;quot;number_of_replicas&amp;quot;: 1, &amp;quot;refresh_interval&amp;quot;: &amp;quot;30s&amp;quot; }}&lt;/code&gt;#### &lt;strong&gt;2. Cache Multi-Niveaux&lt;/strong&gt;&lt;code&gt;phppublic function searchEventsWithCache(array $query, string $cacheKey = null): array{ // Cache L1: Mémoire if (isset($this-&amp;gt;memoryCache[$cacheKey])) { return $this-&amp;gt;memoryCache[$cacheKey]; } // Cache L2: Redis if ($cached = $this-&amp;gt;redis-&amp;gt;get(&amp;quot;event_search:{$cacheKey}&amp;quot;)) { $result = json_decode($cached, true); $this-&amp;gt;memoryCache[$cacheKey] = $result; return $result; } // ElasticSearch $result = $this-&amp;gt;searchEvents($query); // Mettre en cache $this-&amp;gt;memoryCache[$cacheKey] = $result; $this-&amp;gt;redis-&amp;gt;setex(&amp;quot;event_search:{$cacheKey}&amp;quot;, 300, json_encode($result)); return $result;}&lt;/code&gt;#### &lt;strong&gt;3. Bulk Operations Optimisées&lt;/strong&gt;&lt;code&gt;phppublic function appendEventsBulk(array $aggregateEvents): void{ $bulk = []; foreach ($aggregateEvents as $aggregateId =&amp;gt; $events) { foreach ($events as $event) { $bulk[] = [ 'index' =&amp;gt; [ '_index' =&amp;gt; $this-&amp;gt;index, '_id' =&amp;gt; $event-&amp;gt;getId() ] ]; $bulk[] = $this-&amp;gt;eventToDocument($event); } } $this-&amp;gt;client-&amp;gt;bulk([ 'body' =&amp;gt; $bulk, 'refresh' =&amp;gt; false ]);}&lt;/code&gt;## 🎯 &lt;strong&gt;Critères d&amp;rsquo;Adoption&lt;/strong&gt;### &lt;strong&gt;Quand Utiliser Event Sourcing + CQS avec ElasticSearch&lt;/strong&gt;#### &lt;strong&gt;✅ Avantages&lt;/strong&gt;- &lt;strong&gt;Audit trail complet&lt;/strong&gt; : Historique de tous les événements- &lt;strong&gt;Performance optimisée&lt;/strong&gt; : Séparation claire entre écriture et lecture- &lt;strong&gt;Recherche avancée&lt;/strong&gt; : Full-text search sur les événements- &lt;strong&gt;Analytics temporelles&lt;/strong&gt; : Analyse des tendances dans le temps- &lt;strong&gt;Scalabilité&lt;/strong&gt; : Possibilité de scaler indépendamment#### &lt;strong&gt;❌ Inconvénients&lt;/strong&gt;- &lt;strong&gt;Complexité élevée&lt;/strong&gt; : Architecture très complexe- &lt;strong&gt;Stockage important&lt;/strong&gt; : Beaucoup d&amp;rsquo;espace disque nécessaire- &lt;strong&gt;Performance&lt;/strong&gt; : Requêtes plus lentes sur de gros volumes- &lt;strong&gt;Expertise&lt;/strong&gt; : Équipe très expérimentée requise#### &lt;strong&gt;🎯 Critères d&amp;rsquo;Adoption&lt;/strong&gt;- &lt;strong&gt;Audit trail critique&lt;/strong&gt; : Besoin de traçabilité complète- &lt;strong&gt;Recherche avancée&lt;/strong&gt; : Besoin de rechercher dans les événements- &lt;strong&gt;Analytics temporelles&lt;/strong&gt; : Besoin d&amp;rsquo;analyser les tendances- &lt;strong&gt;Performance importante&lt;/strong&gt; : Besoins de performance élevée- &lt;strong&gt;Équipe très expérimentée&lt;/strong&gt; : Maîtrise d&amp;rsquo;Event Sourcing, CQS et ElasticSearch- &lt;strong&gt;Budget important&lt;/strong&gt; : Investissement en complexité justifié## 🚀 &lt;strong&gt;Votre Prochaine Étape&lt;/strong&gt;

&lt;div class="chapter-navigation"&gt;
 &lt;h2 class="chapter-nav-title"&gt;🎯 Votre Prochaine Étape&lt;/h2&gt;
 &lt;p class="chapter-nav-subtitle"&gt;Maintenant que vous comprenez les concepts de base et que j'ai partagé mon expérience avec Gyroscops, quel est votre contexte ?&lt;/p&gt;</description></item><item><title>Stockage ElasticSearch - Event Sourcing + CQRS</title><link>http://localhost:1313/chapitres/stockage/elasticsearch/chapitre-39-stockage-elasticsearch-event-sourcing-cqrs/</link><pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/chapitres/stockage/elasticsearch/chapitre-39-stockage-elasticsearch-event-sourcing-cqrs/</guid><description>&lt;h2 id="-contexte-et-objectifs-lnous-arrivons-maintenant-à-lapproche-la-plus-sophistiquée-et-puissante--event-sourcing--cqrs-avec-elasticsearch-cette-combinaison-représente-létat-de-lart-en-matière-darchitecture-scalable-pour-la-recherche-et-lanalytics-pourquoi-cette-combinaison---audit-trail-complet--historique-immuable-de-tous-les-événements--scalabilité-maximale--possibilité-de-scaler-indépendamment-chaque-côté--recherche-avancée--full-text-search-sur-les-événements-avec-analytics--performance-optimale--chaque-côté-optimisé-pour-son-usage--flexibilité-maximale--projections-multiples-pour-différents-besoins-contexte-gyroscopsdans-notre-écosystème-user--organization--workflow--cloud-resources--billing-event-sourcing--cqrs-avec-elasticsearch-est-la-solution-ultime-pour---système-de-facturation--audit-trail-complet-avec-analytics-avancées--logs-d--historique-complet-avec-recherche-et-monitoring--métriques-de-performance--traçabilité-des-performances-avec-analytics-temporelles--workflows--historique-des-étapes-avec-recherche-et-analytics--architecture-event-sourcing--cqrs-séparation-complète-des-responsabilités-command-side-write--command-handlers--traitement-des-commandes-métier--event-store--persistance-des-événements-dans-elasticsearch--event-handlers--gestion-des-événements-de-domaine--command-bus--orchestration-des-commandes--bulk-operations--optimisation-des-écritures-query-side-read--query-handlers--traitement-des-requêtes--event-search--recherche-dans-les-événements--analytics-services--services-danalytics-temporelles--query-bus--orchestration-des-requêtes--caches--optimisation-des-performances-flux-de-données-completmermaidgraph-td----acommand----bcommand-bus----b----ccommand-handler----c----daggregate----d----eevents----e----fevent-store-elasticsearch----f----gevent-bus----g----hevent-handlers----h----iprojections----i----jread-models--------kquery----lquery-bus----l----mquery-handler----m----nevent-search----n----f----f----osearch-results----o----presponse--------qanalytics----ranalytics-service----r----f----f----shistorical-data----s----tanalytics-results--implémentation-complète-1-command-side-implementation-event-store-elasticsearch-avancéphpphpnamespace-appinfrastructureeventstoreuse-elasticsearchclientuse-appdomaineventdomaineventuse-appdomaineventeventstoreinterfaceuse-psrlogloggerinterfaceclass-elasticsearcheventstore-implements-eventstoreinterface----private-client-client----private-string-index----private-loggerinterface-logger----private-array-bulkbuffer------private-int-bulksize----public-function-__construct--------client-client---------string-index---------loggerinterface-logger--------int-bulksize--100-------------this-client--client--------this-index--index--------this-logger--logger--------this-bulksize--bulksize--------public-function-appendeventsstring-aggregateid-array-events-int-expectedversion-void------------try--------------vérifier-la-version-attendue------------lastevent--this-getlasteventaggregateid------------------------if-lastevent--lasteventversion--expectedversion-----------------throw-new-concurrencyexceptionversion-mismatch-------------------------------------préparer-les-événements-pour-linsertion------------version--expectedversion--1------------------------foreach-events-as-event-----------------this-bulkbuffer----------------------index--------------------------_index--this-index------------------------_id--event-getid--------------------------------------------------------------------this-bulkbuffer----------------------eventid--event-getid--------------------aggregateid--aggregateid--------------------aggregatetype--event-getaggregatetype--------------------eventtype--event-geteventtype--------------------eventdata--event-toarray--------------------version--version--------------------timestamp--event-gettimestamp-formatc--------------------correlationid--event-getcorrelationid--------------------causationid--event-getcausationid--------------------metadata--event-getmetadata------------------------------------------------if-countthis-bulkbuffer--this-bulksize--2---------------------this-flushbulk----------------------------------------------------this-flushbulk---------------------catch-exception-e-------------this-logger-errorfailed-to-append-events-----------------aggregateid--aggregateid----------------events--countevents----------------error--e-getmessage------------------------------------throw-e----------------public-function-geteventsstring-aggregateid-int-fromversion--0-array------------query--------------query------------------bool----------------------must--------------------------term--aggregateid--aggregateid------------------------range--version--gte--fromversion------------------------------------------------------------sort--version--order--asc------------------------response--this-client-search------------index--this-index------------body--query------------------------events----------foreach-responsehitshits-as-hit-------------events--this-deserializeeventhit_source------------------------return-events--------public-function-searcheventsarray-criteria-array------------query--------------query------------------bool----------------------must------------------------------------------sort--timestamp--order--desc------------------------if-issetcriteriaaggregatetype-------------queryqueryboolmust------------------term--aggregatetype--criteriaaggregatetype------------------------------------if-issetcriteriaeventtype-------------queryqueryboolmust------------------term--eventtype--criteriaeventtype------------------------------------if-issetcriteriasearchtext-------------queryqueryboolmust------------------multi_match----------------------query--criteriasearchtext--------------------fields--eventdata-metadata----------------------------------------------------if-issetcriteriafrom--issetcriteriato-------------range--------------if-issetcriteriafrom-----------------rangegte--criteriafrom-formatc------------------------if-issetcriteriato-----------------rangelte--criteriato-formatc------------------------------------queryqueryboolmust------------------range--timestamp--range------------------------------------response--this-client-search------------index--this-index------------body--query------------------------events----------foreach-responsehitshits-as-hit-------------events--this-deserializeeventhit_source------------------------return-events--------private-function-getlasteventstring-aggregateid-array------------query--------------query------------------term--aggregateid--aggregateid------------------------sort--version--order--desc------------size--1------------------------response--this-client-search------------index--this-index------------body--query------------------------if-emptyresponsehitshits-------------return-null------------------------return-responsehitshits0_source--------private-function-flushbulk-void------------if-emptythis-bulkbuffer-------------return----------------try-------------response--this-client-bulk----------------body--this-bulkbuffer----------------refresh--false------------------------this-logger-infobulk-events-inserted-----------------index--this-index----------------operations--countthis-bulkbuffer--2----------------errors--responseerrors------------------------this-bulkbuffer-----------catch-exception-e-------------this-logger-errorbulk-events-insertion-failed-----------------index--this-index----------------error--e-getmessage----------------operations--countthis-bulkbuffer--2------------------------throw-e----------------private-function-deserializeeventarray-document-domainevent------------eventclass--documenteventtype--------return-eventclassfromarraydocumenteventdata-----command-bus-avec-middlewarephpphpnamespace-appapplicationcommandbususe-appdomaincommandcommandinterfaceuse-appdomaincommandcommandhandlerinterfaceuse-psrlogloggerinterfaceclass-commandbus----private-array-handlers------private-array-middleware------private-loggerinterface-logger----public-function-__constructloggerinterface-logger------------this-logger--logger--------public-function-registerhandlerstring-commandclass-commandhandlerinterface-handler-void------------this-handlerscommandclass--handler--------public-function-addmiddlewarecallable-middleware-void------------this-middleware--middleware--------public-function-handlecommandinterface-command-void------------commandclass--get_classcommand----------------if-issetthis-handlerscommandclass-------------throw-new-invalidargumentexceptionno-handler-registered-for-command-commandclass----------------handler--this-handlerscommandclass-----------------exécuter-les-middleware--------this-executemiddlewarecommand-function-use-handler-command-------------this-logger-infoexecuting-command-----------------command--get_classcommand----------------data--command-toarray------------------------------------handler-handlecommand----------------private-function-executemiddlewarecommandinterface-command-callable-next-void------------middleware--array_reversethis-middleware----------------foreach-middleware-as-mw-------------next--function-use-mw-command-next-----------------return-mwcommand-next------------------------------------next-----2-query-side-implementation-query-bus-avec-cachephpphpnamespace-appapplicationquerybususe-appdomainqueryqueryinterfaceuse-appdomainqueryqueryhandlerinterfaceuse-psrcachecacheitempoolinterfaceuse-psrlogloggerinterfaceclass-querybus----private-array-handlers------private-cacheitempoolinterface-cache----private-loggerinterface-logger----public-function-__constructcacheitempoolinterface-cache-loggerinterface-logger------------this-cache--cache--------this-logger--logger--------public-function-registerhandlerstring-queryclass-queryhandlerinterface-handler-void------------this-handlersqueryclass--handler--------public-function-handlequeryinterface-query-mixed------------queryclass--get_classquery----------------if-issetthis-handlersqueryclass-------------throw-new-invalidargumentexceptionno-handler-registered-for-query-queryclass-----------------vérifier-le-cache--------cachekey--this-generatecachekeyquery--------cacheditem--this-cache-getitemcachekey----------------if-cacheditem-ishit-------------this-logger-debugquery-result-served-from-cache-----------------query--queryclass----------------cachekey--cachekey------------------------------------return-cacheditem-get-----------------exécuter-la-requête--------handler--this-handlersqueryclass--------result--handler-handlequery-----------------mettre-en-cache--------cacheditem-setresult--------cacheditem-expiresafter300--5-minutes--------this-cache-savecacheditem----------------this-logger-infoquery-executed-and-cached-------------query--queryclass------------cachekey--cachekey------------------------return-result--------private-function-generatecachekeyqueryinterface-query-string------------return-query_--md5serializequery-----event-search-service-avancéphpphpnamespace-appinfrastructureelasticsearchqueryuse-elasticsearchclientuse-psrlogloggerinterfaceuse-psrcachecacheitempoolinterfaceclass-eventsearchservice----private-client-client----private-string-index----private-loggerinterface-logger----private-cacheitempoolinterface-cache----public-function-__construct--------client-client---------string-index---------loggerinterface-logger--------cacheitempoolinterface-cache-------------this-client--client--------this-index--index--------this-logger--logger--------this-cache--cache--------public-function-searcheventsarray-query-string-cachekey--null-array-------------vérifier-le-cache--------if-cachekey-------------cacheditem--this-cache-getitemcachekey------------if-cacheditem-ishit-----------------this-logger-debugevent-search-result-served-from-cache---------------------index--this-index--------------------cachekey--cachekey--------------------------------return-cacheditem-get----------------------------try-------------response--this-client-search----------------index--this-index----------------body--query-------------------------mettre-en-cache------------if-cachekey-----------------cacheditem-setresponse----------------cacheditem-expiresafter300--5-minutes----------------this-cache-savecacheditem------------------------this-logger-infoevent-search-executed-----------------index--this-index----------------hits--responsehitstotalvalue----------------took--responsetook------------------------return-response---------catch-exception-e-------------this-logger-errorevent-search-failed-----------------index--this-index----------------query--query----------------error--e-getmessage------------------------throw-e----------------public-function-geteventstatisticsstring-eventtype-datetime-from-datetime-to-array------------query--------------query------------------bool----------------------must--------------------------term--eventtype--eventtype------------------------range------------------------------timestamp----------------------------------gte--from-formatc--------------------------------lte--to-formatc----------------------------------------------------------------------------------------------------------------aggs------------------by_hour----------------------date_histogram--------------------------field--timestamp------------------------calendar_interval--hour----------------------------------------------------by_organization----------------------terms--------------------------field--metadataorganizationid----------------------------------------------------by_user----------------------terms--------------------------field--metadatauserid------------------------------------------------------------size--0------------------------cachekey--event_stats_eventtype_from-gettimestamp_to-gettimestamp--------response--this-searcheventsquery-cachekey----------------return-------------total--responsehitstotalvalue------------by_hour--responseaggregationsby_hourbuckets------------by_organization--responseaggregationsby_organizationbuckets------------by_user--responseaggregationsby_userbuckets----------------public-function-geteventtrendsstring-eventtype-datetime-from-datetime-to-string-interval--day-array------------query--------------query------------------bool----------------------must--------------------------term--eventtype--eventtype------------------------range------------------------------timestamp----------------------------------gte--from-formatc--------------------------------lte--to-formatc----------------------------------------------------------------------------------------------------------------aggs------------------trends----------------------date_histogram--------------------------field--timestamp------------------------calendar_interval--interval------------------------------------------------------------size--0------------------------cachekey--event_trends_eventtype_interval_from-gettimestamp_to-gettimestamp--------response--this-searcheventsquery-cachekey----------------trends----------foreach-responseaggregationstrendsbuckets-as-bucket-------------trends------------------date--bucketkey_as_string----------------count--bucketdoc_count------------------------------------return-trends-----3-service-de-projection-avancé-service-de-projection-pour-les-analyticsphpphpnamespace-appapplicationserviceelasticsearchuse-appdomaineventdomaineventuse-appinfrastructureelasticsearchcommandelasticsearchwriteruse-psrlogloggerinterfaceclass-paymentprojectionservice----private-elasticsearchwriter-writer----private-loggerinterface-logger----public-function-__constructelasticsearchwriter-writer-loggerinterface-logger------------this-writer--writer--------this-logger--logger--------public-function-handleeventdomainevent-event-void------------switch-event-geteventtype-------------case-paymentprocessed----------------this-handlepaymentprocessedevent----------------break------------case-paymentfailed----------------this-handlepaymentfailedevent----------------break------------case-paymentrefunded----------------this-handlepaymentrefundedevent----------------break----------------private-function-handlepaymentprocesseddomainevent-event-void------------update--------------status--completed------------processedat--event-gettimestamp-formatc------------updatedat--new-datetime-formatc----------------this-writer-updatedocument------------event-getaggregateid------------update------------event-getmetadataorganizationid--null----------------this-logger-infopayment-processed-projection-updated-------------paymentid--event-getaggregateid------------status--completed----------------private-function-handlepaymentfaileddomainevent-event-void------------update--------------status--failed------------error--event-getdataerror------------failedat--event-gettimestamp-formatc------------updatedat--new-datetime-formatc----------------this-writer-updatedocument------------event-getaggregateid------------update------------event-getmetadataorganizationid--null----------------this-logger-infopayment-failed-projection-updated-------------paymentid--event-getaggregateid------------status--failed----------------private-function-handlepaymentrefundeddomainevent-event-void------------update--------------status--refunded------------refundamount--event-getdatarefundamount------------refundedat--event-gettimestamp-formatc------------updatedat--new-datetime-formatc----------------this-writer-updatedocument------------event-getaggregateid------------update------------event-getmetadataorganizationid--null----------------this-logger-infopayment-refunded-projection-updated-------------paymentid--event-getaggregateid------------status--refunded--------------tests-et-validation-tests-dphpphpnamespace-apptestsintegrationelasticsearchuse-appapplicationcommandpaymentprocesspaymentcommanduse-appapplicationcommandpaymentprocesspaymentcommandhandleruse-appapplicationquerypaymentgetpaymenthistoryqueryuse-appapplicationquerypaymentpaymenteventqueryhandleruse-appinfrastructureeventstoreelasticsearcheventstoreuse-appinfrastructureelasticsearchqueryeventsearchserviceuse-elasticsearchclientbuilderclass-elasticsearcheventsourcingcqrstest-extends-testcase----private-elasticsearcheventstore-eventstore----private-eventsearchservice-eventsearch----private-processpaymentcommandhandler-commandhandler----private-paymenteventqueryhandler-queryhandler----protected-function-setup-void------------client--clientbuildercreate-sethostslocalhost9200-build----------------this-eventstore--new-elasticsearcheventstoreclient-test-events-this-createmockloggerinterfaceclass--------this-eventsearch--new-eventsearchserviceclient-test-events-this-createmockloggerinterfaceclass-this-createmockcacheitempoolinterfaceclass----------------this-commandhandler--new-processpaymentcommandhandler------------this-eventstore------------this-createmockeventbusinterfaceclass------------this-createmockloggerinterfaceclass------------------------this-queryhandler--new-paymenteventqueryhandlerthis-eventsearch-this-createmockloggerinterfaceclass--------public-function-testeventsourcingcqrsflow-void-------------exécuter-une-commande--------command--new-processpaymentcommand------------payment-123------------10000------------eur------------------------this-commandhandler-handlecommand-----------------vérifier-lhistorique-des-événements--------query--new-getpaymenthistoryquerypayment-123--------history--this-queryhandler-handlequery----------------this-assertnotemptyhistory--------this-assertcount1-history--------this-assertequalspaymentprocessed-history0eventtype--------public-function-testeventsearchwithanalytics-void-------------créer-plusieurs-événements--------commands--------------new-processpaymentcommandpayment-1-10000-eur------------new-processpaymentcommandpayment-2-20000-usd------------new-processpaymentcommandpayment-3-30000-eur------------------------foreach-commands-as-command-------------this-commandhandler-handlecommand-------------------------rechercher-les-événements--------searchquery--new-searchpaymenteventsquery------------new-datetime2024-01-01------------new-datetime2024-12-31------------------------results--this-queryhandler-handlesearchquery----------------this-assertcount3-results--------this-assertequalspaymentprocessed-results0eventtype------performance-et-optimisation-stratégies-d-1-index-optimisés-pour-les-événementsjson--mappings-----properties-------eventid--type-keyword-------aggregateid--type-keyword-------aggregatetype--type-keyword-------eventtype--type-keyword-------eventdata--type-object-------version--type-integer-------timestamp--type-date-------correlationid--type-keyword-------causationid--type-keyword-------metadata--type-object---------settings-----number_of_shards-3----number_of_replicas-1----refresh_interval-30s---2-cache-multi-niveauxphppublic-function-searcheventswithcachearray-query-string-cachekey--null-array-----cache-l1-mémoire----if-issetthis-memorycachecachekey---------return-this-memorycachecachekey-------------cache-l2-redis----if-cached--this-redis-getevent_searchcachekey---------result--json_decodecached-true--------this-memorycachecachekey--result--------return-result-------------elasticsearch----result--this-searcheventsquery---------mettre-en-cache----this-memorycachecachekey--result----this-redis-setexevent_searchcachekey-300-json_encoderesult--------return-result-3-projections-asynchronesphppublic-function-handleeventasyncdomainevent-event-void-----mettre-en-queue-pour-traitement-asynchrone----this-messagebus-dispatchnew-processprojectioncommandevent--critères-d-quand-utiliser-event-sourcing--cqrs-avec-elasticsearch--avantages--audit-trail-complet--historique-immuable-de-tous-les-événements--scalabilité-maximale--possibilité-de-scaler-indépendamment--recherche-avancée--full-text-search-sur-les-événements--analytics-temporelles--analyse-des-tendances-dans-le-temps--performance-optimale--chaque-côté-optimisé-pour-son-usage--flexibilité-maximale--projections-multiples-pour-différents-besoins--inconvénients--complexité-maximale--architecture-très-complexe--stockage-important--beaucoup-despace-disque-nécessaire--performance--requêtes-plus-lentes-sur-de-gros-volumes--expertise--équipe-très-expérimentée-requise--coût--infrastructure-très-coûteuse--critères-d--système-très-complexe--besoins-de-scalabilité-maximale--audit-trail-critique--besoin-de-traçabilité-complète--recherche-avancée--besoin-de-rechercher-dans-les-événements--analytics-temporelles--besoin-danalyser-les-tendances--équipe-très-expérimentée--maîtrise-devent-sourcing-cqrs-et-elasticsearch--budget-important--investissement-en-complexité-justifié--performance-critique--besoins-de-performance-maximale--votre-prochaine-étapehahahugoshortcode61s0hbhbevent-sourcing--cqrs-avec-elasticsearch-représente-l"&gt;🎯 &lt;strong&gt;Contexte et Objectifs&lt;/strong&gt;### &lt;strong&gt;L&amp;rsquo;Architecture Maximale : Event Sourcing + CQRS avec ElasticSearch&lt;/strong&gt;Nous arrivons maintenant à l&amp;rsquo;approche la plus sophistiquée et puissante : &lt;strong&gt;Event Sourcing + CQRS avec ElasticSearch&lt;/strong&gt;. Cette combinaison représente l&amp;rsquo;état de l&amp;rsquo;art en matière d&amp;rsquo;architecture scalable pour la recherche et l&amp;rsquo;analytics.#### &lt;strong&gt;Pourquoi cette Combinaison ?&lt;/strong&gt;- &lt;strong&gt;Audit trail complet&lt;/strong&gt; : Historique immuable de tous les événements- &lt;strong&gt;Scalabilité maximale&lt;/strong&gt; : Possibilité de scaler indépendamment chaque côté- &lt;strong&gt;Recherche avancée&lt;/strong&gt; : Full-text search sur les événements avec analytics- &lt;strong&gt;Performance optimale&lt;/strong&gt; : Chaque côté optimisé pour son usage- &lt;strong&gt;Flexibilité maximale&lt;/strong&gt; : Projections multiples pour différents besoins### &lt;strong&gt;Contexte Gyroscops&lt;/strong&gt;Dans notre écosystème &lt;strong&gt;User → Organization → Workflow → Cloud Resources → Billing&lt;/strong&gt;, Event Sourcing + CQRS avec ElasticSearch est la solution ultime pour :- &lt;strong&gt;Système de facturation&lt;/strong&gt; : Audit trail complet avec analytics avancées- &lt;strong&gt;Logs d&amp;rsquo;application&lt;/strong&gt; : Historique complet avec recherche et monitoring- &lt;strong&gt;Métriques de performance&lt;/strong&gt; : Traçabilité des performances avec analytics temporelles- &lt;strong&gt;Workflows&lt;/strong&gt; : Historique des étapes avec recherche et analytics## 🏗️ &lt;strong&gt;Architecture Event Sourcing + CQRS&lt;/strong&gt;### &lt;strong&gt;Séparation Complète des Responsabilités&lt;/strong&gt;#### &lt;strong&gt;Command Side (Write)&lt;/strong&gt;- &lt;strong&gt;Command Handlers&lt;/strong&gt; : Traitement des commandes métier- &lt;strong&gt;Event Store&lt;/strong&gt; : Persistance des événements dans ElasticSearch- &lt;strong&gt;Event Handlers&lt;/strong&gt; : Gestion des événements de domaine- &lt;strong&gt;Command Bus&lt;/strong&gt; : Orchestration des commandes- &lt;strong&gt;Bulk Operations&lt;/strong&gt; : Optimisation des écritures#### &lt;strong&gt;Query Side (Read)&lt;/strong&gt;- &lt;strong&gt;Query Handlers&lt;/strong&gt; : Traitement des requêtes- &lt;strong&gt;Event Search&lt;/strong&gt; : Recherche dans les événements- &lt;strong&gt;Analytics Services&lt;/strong&gt; : Services d&amp;rsquo;analytics temporelles- &lt;strong&gt;Query Bus&lt;/strong&gt; : Orchestration des requêtes- &lt;strong&gt;Caches&lt;/strong&gt; : Optimisation des performances### &lt;strong&gt;Flux de Données Complet&lt;/strong&gt;&lt;code&gt;mermaidgraph TD A[Command] --&amp;gt; B[Command Bus] B --&amp;gt; C[Command Handler] C --&amp;gt; D[Aggregate] D --&amp;gt; E[Events] E --&amp;gt; F[Event Store ElasticSearch] F --&amp;gt; G[Event Bus] G --&amp;gt; H[Event Handlers] H --&amp;gt; I[Projections] I --&amp;gt; J[Read Models] K[Query] --&amp;gt; L[Query Bus] L --&amp;gt; M[Query Handler] M --&amp;gt; N[Event Search] N --&amp;gt; F F --&amp;gt; O[Search Results] O --&amp;gt; P[Response] Q[Analytics] --&amp;gt; R[Analytics Service] R --&amp;gt; F F --&amp;gt; S[Historical Data] S --&amp;gt; T[Analytics Results]&lt;/code&gt;## 💻 &lt;strong&gt;Implémentation Complète&lt;/strong&gt;### &lt;strong&gt;1. Command Side Implementation&lt;/strong&gt;#### &lt;strong&gt;Event Store ElasticSearch Avancé&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Infrastructure\EventStore;use Elasticsearch\Client;use App\Domain\Event\DomainEvent;use App\Domain\Event\EventStoreInterface;use Psr\Log\LoggerInterface;class ElasticSearchEventStore implements EventStoreInterface{ private Client $client; private string $index; private LoggerInterface $logger; private array $bulkBuffer = []; private int $bulkSize; public function __construct( Client $client, string $index, LoggerInterface $logger, int $bulkSize = 100 ) { $this-&amp;gt;client = $client; $this-&amp;gt;index = $index; $this-&amp;gt;logger = $logger; $this-&amp;gt;bulkSize = $bulkSize; } public function appendEvents(string $aggregateId, array $events, int $expectedVersion): void { try { // Vérifier la version attendue $lastEvent = $this-&amp;gt;getLastEvent($aggregateId); if ($lastEvent &amp;amp;&amp;amp; $lastEvent['version'] !== $expectedVersion) { throw new ConcurrencyException('Version mismatch'); } // Préparer les événements pour l'insertion $version = $expectedVersion + 1; foreach ($events as $event) { $this-&amp;gt;bulkBuffer[] = [ 'index' =&amp;gt; [ '_index' =&amp;gt; $this-&amp;gt;index, '_id' =&amp;gt; $event-&amp;gt;getId() ] ]; $this-&amp;gt;bulkBuffer[] = [ 'eventId' =&amp;gt; $event-&amp;gt;getId(), 'aggregateId' =&amp;gt; $aggregateId, 'aggregateType' =&amp;gt; $event-&amp;gt;getAggregateType(), 'eventType' =&amp;gt; $event-&amp;gt;getEventType(), 'eventData' =&amp;gt; $event-&amp;gt;toArray(), 'version' =&amp;gt; $version++, 'timestamp' =&amp;gt; $event-&amp;gt;getTimestamp()-&amp;gt;format('c'), 'correlationId' =&amp;gt; $event-&amp;gt;getCorrelationId(), 'causationId' =&amp;gt; $event-&amp;gt;getCausationId(), 'metadata' =&amp;gt; $event-&amp;gt;getMetadata() ]; if (count($this-&amp;gt;bulkBuffer) &amp;gt;= $this-&amp;gt;bulkSize * 2) { $this-&amp;gt;flushBulk(); } } $this-&amp;gt;flushBulk(); } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Failed to append events', [ 'aggregateId' =&amp;gt; $aggregateId, 'events' =&amp;gt; count($events), 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); throw $e; } } public function getEvents(string $aggregateId, int $fromVersion = 0): array { $query = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [ ['term' =&amp;gt; ['aggregateId' =&amp;gt; $aggregateId]], ['range' =&amp;gt; ['version' =&amp;gt; ['gte' =&amp;gt; $fromVersion]]] ] ] ], 'sort' =&amp;gt; [['version' =&amp;gt; ['order' =&amp;gt; 'asc']]] ]; $response = $this-&amp;gt;client-&amp;gt;search([ 'index' =&amp;gt; $this-&amp;gt;index, 'body' =&amp;gt; $query ]); $events = []; foreach ($response['hits']['hits'] as $hit) { $events[] = $this-&amp;gt;deserializeEvent($hit['_source']); } return $events; } public function searchEvents(array $criteria): array { $query = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [] ] ], 'sort' =&amp;gt; [['timestamp' =&amp;gt; ['order' =&amp;gt; 'desc']]] ]; if (isset($criteria['aggregateType'])) { $query['query']['bool']['must'][] = [ 'term' =&amp;gt; ['aggregateType' =&amp;gt; $criteria['aggregateType']] ]; } if (isset($criteria['eventType'])) { $query['query']['bool']['must'][] = [ 'term' =&amp;gt; ['eventType' =&amp;gt; $criteria['eventType']] ]; } if (isset($criteria['searchText'])) { $query['query']['bool']['must'][] = [ 'multi_match' =&amp;gt; [ 'query' =&amp;gt; $criteria['searchText'], 'fields' =&amp;gt; ['eventData.*', 'metadata.*'] ] ]; } if (isset($criteria['from']) || isset($criteria['to'])) { $range = []; if (isset($criteria['from'])) { $range['gte'] = $criteria['from']-&amp;gt;format('c'); } if (isset($criteria['to'])) { $range['lte'] = $criteria['to']-&amp;gt;format('c'); } $query['query']['bool']['must'][] = [ 'range' =&amp;gt; ['timestamp' =&amp;gt; $range] ]; } $response = $this-&amp;gt;client-&amp;gt;search([ 'index' =&amp;gt; $this-&amp;gt;index, 'body' =&amp;gt; $query ]); $events = []; foreach ($response['hits']['hits'] as $hit) { $events[] = $this-&amp;gt;deserializeEvent($hit['_source']); } return $events; } private function getLastEvent(string $aggregateId): ?array { $query = [ 'query' =&amp;gt; [ 'term' =&amp;gt; ['aggregateId' =&amp;gt; $aggregateId] ], 'sort' =&amp;gt; [['version' =&amp;gt; ['order' =&amp;gt; 'desc']]], 'size' =&amp;gt; 1 ]; $response = $this-&amp;gt;client-&amp;gt;search([ 'index' =&amp;gt; $this-&amp;gt;index, 'body' =&amp;gt; $query ]); if (empty($response['hits']['hits'])) { return null; } return $response['hits']['hits'][0]['_source']; } private function flushBulk(): void { if (empty($this-&amp;gt;bulkBuffer)) { return; } try { $response = $this-&amp;gt;client-&amp;gt;bulk([ 'body' =&amp;gt; $this-&amp;gt;bulkBuffer, 'refresh' =&amp;gt; false ]); $this-&amp;gt;logger-&amp;gt;info('Bulk events inserted', [ 'index' =&amp;gt; $this-&amp;gt;index, 'operations' =&amp;gt; count($this-&amp;gt;bulkBuffer) / 2, 'errors' =&amp;gt; $response['errors'] ]); $this-&amp;gt;bulkBuffer = []; } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Bulk events insertion failed', [ 'index' =&amp;gt; $this-&amp;gt;index, 'error' =&amp;gt; $e-&amp;gt;getMessage(), 'operations' =&amp;gt; count($this-&amp;gt;bulkBuffer) / 2 ]); throw $e; } } private function deserializeEvent(array $document): DomainEvent { $eventClass = $document['eventType']; return $eventClass::fromArray($document['eventData']); }}&lt;/code&gt;#### &lt;strong&gt;Command Bus avec Middleware&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Application\CommandBus;use App\Domain\Command\CommandInterface;use App\Domain\Command\CommandHandlerInterface;use Psr\Log\LoggerInterface;class CommandBus{ private array $handlers = []; private array $middleware = []; private LoggerInterface $logger; public function __construct(LoggerInterface $logger) { $this-&amp;gt;logger = $logger; } public function registerHandler(string $commandClass, CommandHandlerInterface $handler): void { $this-&amp;gt;handlers[$commandClass] = $handler; } public function addMiddleware(callable $middleware): void { $this-&amp;gt;middleware[] = $middleware; } public function handle(CommandInterface $command): void { $commandClass = get_class($command); if (!isset($this-&amp;gt;handlers[$commandClass])) { throw new \InvalidArgumentException(&amp;quot;No handler registered for command: $commandClass&amp;quot;); } $handler = $this-&amp;gt;handlers[$commandClass]; // Exécuter les middleware $this-&amp;gt;executeMiddleware($command, function() use ($handler, $command) { $this-&amp;gt;logger-&amp;gt;info('Executing command', [ 'command' =&amp;gt; get_class($command), 'data' =&amp;gt; $command-&amp;gt;toArray() ]); $handler-&amp;gt;handle($command); }); } private function executeMiddleware(CommandInterface $command, callable $next): void { $middleware = array_reverse($this-&amp;gt;middleware); foreach ($middleware as $mw) { $next = function() use ($mw, $command, $next) { return $mw($command, $next); }; } $next(); }}&lt;/code&gt;### &lt;strong&gt;2. Query Side Implementation&lt;/strong&gt;#### &lt;strong&gt;Query Bus avec Cache&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Application\QueryBus;use App\Domain\Query\QueryInterface;use App\Domain\Query\QueryHandlerInterface;use Psr\Cache\CacheItemPoolInterface;use Psr\Log\LoggerInterface;class QueryBus{ private array $handlers = []; private CacheItemPoolInterface $cache; private LoggerInterface $logger; public function __construct(CacheItemPoolInterface $cache, LoggerInterface $logger) { $this-&amp;gt;cache = $cache; $this-&amp;gt;logger = $logger; } public function registerHandler(string $queryClass, QueryHandlerInterface $handler): void { $this-&amp;gt;handlers[$queryClass] = $handler; } public function handle(QueryInterface $query): mixed { $queryClass = get_class($query); if (!isset($this-&amp;gt;handlers[$queryClass])) { throw new \InvalidArgumentException(&amp;quot;No handler registered for query: $queryClass&amp;quot;); } // Vérifier le cache $cacheKey = $this-&amp;gt;generateCacheKey($query); $cachedItem = $this-&amp;gt;cache-&amp;gt;getItem($cacheKey); if ($cachedItem-&amp;gt;isHit()) { $this-&amp;gt;logger-&amp;gt;debug('Query result served from cache', [ 'query' =&amp;gt; $queryClass, 'cacheKey' =&amp;gt; $cacheKey ]); return $cachedItem-&amp;gt;get(); } // Exécuter la requête $handler = $this-&amp;gt;handlers[$queryClass]; $result = $handler-&amp;gt;handle($query); // Mettre en cache $cachedItem-&amp;gt;set($result); $cachedItem-&amp;gt;expiresAfter(300); // 5 minutes $this-&amp;gt;cache-&amp;gt;save($cachedItem); $this-&amp;gt;logger-&amp;gt;info('Query executed and cached', [ 'query' =&amp;gt; $queryClass, 'cacheKey' =&amp;gt; $cacheKey ]); return $result; } private function generateCacheKey(QueryInterface $query): string { return 'query_' . md5(serialize($query)); }}&lt;/code&gt;#### &lt;strong&gt;Event Search Service Avancé&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Infrastructure\ElasticSearch\Query;use Elasticsearch\Client;use Psr\Log\LoggerInterface;use Psr\Cache\CacheItemPoolInterface;class EventSearchService{ private Client $client; private string $index; private LoggerInterface $logger; private CacheItemPoolInterface $cache; public function __construct( Client $client, string $index, LoggerInterface $logger, CacheItemPoolInterface $cache ) { $this-&amp;gt;client = $client; $this-&amp;gt;index = $index; $this-&amp;gt;logger = $logger; $this-&amp;gt;cache = $cache; } public function searchEvents(array $query, string $cacheKey = null): array { // Vérifier le cache if ($cacheKey) { $cachedItem = $this-&amp;gt;cache-&amp;gt;getItem($cacheKey); if ($cachedItem-&amp;gt;isHit()) { $this-&amp;gt;logger-&amp;gt;debug('Event search result served from cache', [ 'index' =&amp;gt; $this-&amp;gt;index, 'cacheKey' =&amp;gt; $cacheKey ]); return $cachedItem-&amp;gt;get(); } } try { $response = $this-&amp;gt;client-&amp;gt;search([ 'index' =&amp;gt; $this-&amp;gt;index, 'body' =&amp;gt; $query ]); // Mettre en cache if ($cacheKey) { $cachedItem-&amp;gt;set($response); $cachedItem-&amp;gt;expiresAfter(300); // 5 minutes $this-&amp;gt;cache-&amp;gt;save($cachedItem); } $this-&amp;gt;logger-&amp;gt;info('Event search executed', [ 'index' =&amp;gt; $this-&amp;gt;index, 'hits' =&amp;gt; $response['hits']['total']['value'], 'took' =&amp;gt; $response['took'] ]); return $response; } catch (\Exception $e) { $this-&amp;gt;logger-&amp;gt;error('Event search failed', [ 'index' =&amp;gt; $this-&amp;gt;index, 'query' =&amp;gt; $query, 'error' =&amp;gt; $e-&amp;gt;getMessage() ]); throw $e; } } public function getEventStatistics(string $eventType, \DateTime $from, \DateTime $to): array { $query = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [ ['term' =&amp;gt; ['eventType' =&amp;gt; $eventType]], ['range' =&amp;gt; [ 'timestamp' =&amp;gt; [ 'gte' =&amp;gt; $from-&amp;gt;format('c'), 'lte' =&amp;gt; $to-&amp;gt;format('c') ] ]] ] ] ], 'aggs' =&amp;gt; [ 'by_hour' =&amp;gt; [ 'date_histogram' =&amp;gt; [ 'field' =&amp;gt; 'timestamp', 'calendar_interval' =&amp;gt; 'hour' ] ], 'by_organization' =&amp;gt; [ 'terms' =&amp;gt; [ 'field' =&amp;gt; 'metadata.organizationId' ] ], 'by_user' =&amp;gt; [ 'terms' =&amp;gt; [ 'field' =&amp;gt; 'metadata.userId' ] ] ], 'size' =&amp;gt; 0 ]; $cacheKey = &amp;quot;event_stats_{$eventType}_{$from-&amp;gt;getTimestamp()}_{$to-&amp;gt;getTimestamp()}&amp;quot;; $response = $this-&amp;gt;searchEvents($query, $cacheKey); return [ 'total' =&amp;gt; $response['hits']['total']['value'], 'by_hour' =&amp;gt; $response['aggregations']['by_hour']['buckets'], 'by_organization' =&amp;gt; $response['aggregations']['by_organization']['buckets'], 'by_user' =&amp;gt; $response['aggregations']['by_user']['buckets'] ]; } public function getEventTrends(string $eventType, \DateTime $from, \DateTime $to, string $interval = 'day'): array { $query = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [ ['term' =&amp;gt; ['eventType' =&amp;gt; $eventType]], ['range' =&amp;gt; [ 'timestamp' =&amp;gt; [ 'gte' =&amp;gt; $from-&amp;gt;format('c'), 'lte' =&amp;gt; $to-&amp;gt;format('c') ] ]] ] ] ], 'aggs' =&amp;gt; [ 'trends' =&amp;gt; [ 'date_histogram' =&amp;gt; [ 'field' =&amp;gt; 'timestamp', 'calendar_interval' =&amp;gt; $interval ] ] ], 'size' =&amp;gt; 0 ]; $cacheKey = &amp;quot;event_trends_{$eventType}_{$interval}_{$from-&amp;gt;getTimestamp()}_{$to-&amp;gt;getTimestamp()}&amp;quot;; $response = $this-&amp;gt;searchEvents($query, $cacheKey); $trends = []; foreach ($response['aggregations']['trends']['buckets'] as $bucket) { $trends[] = [ 'date' =&amp;gt; $bucket['key_as_string'], 'count' =&amp;gt; $bucket['doc_count'] ]; } return $trends; }}&lt;/code&gt;### &lt;strong&gt;3. Service de Projection Avancé&lt;/strong&gt;#### &lt;strong&gt;Service de Projection pour les Analytics&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Application\Service\ElasticSearch;use App\Domain\Event\DomainEvent;use App\Infrastructure\ElasticSearch\Command\ElasticSearchWriter;use Psr\Log\LoggerInterface;class PaymentProjectionService{ private ElasticSearchWriter $writer; private LoggerInterface $logger; public function __construct(ElasticSearchWriter $writer, LoggerInterface $logger) { $this-&amp;gt;writer = $writer; $this-&amp;gt;logger = $logger; } public function handleEvent(DomainEvent $event): void { switch ($event-&amp;gt;getEventType()) { case 'PaymentProcessed': $this-&amp;gt;handlePaymentProcessed($event); break; case 'PaymentFailed': $this-&amp;gt;handlePaymentFailed($event); break; case 'PaymentRefunded': $this-&amp;gt;handlePaymentRefunded($event); break; } } private function handlePaymentProcessed(DomainEvent $event): void { $update = [ 'status' =&amp;gt; 'completed', 'processedAt' =&amp;gt; $event-&amp;gt;getTimestamp()-&amp;gt;format('c'), 'updatedAt' =&amp;gt; (new \DateTime())-&amp;gt;format('c') ]; $this-&amp;gt;writer-&amp;gt;updateDocument( $event-&amp;gt;getAggregateId(), $update, $event-&amp;gt;getMetadata()['organizationId'] ?? null ); $this-&amp;gt;logger-&amp;gt;info('Payment processed projection updated', [ 'paymentId' =&amp;gt; $event-&amp;gt;getAggregateId(), 'status' =&amp;gt; 'completed' ]); } private function handlePaymentFailed(DomainEvent $event): void { $update = [ 'status' =&amp;gt; 'failed', 'error' =&amp;gt; $event-&amp;gt;getData()['error'], 'failedAt' =&amp;gt; $event-&amp;gt;getTimestamp()-&amp;gt;format('c'), 'updatedAt' =&amp;gt; (new \DateTime())-&amp;gt;format('c') ]; $this-&amp;gt;writer-&amp;gt;updateDocument( $event-&amp;gt;getAggregateId(), $update, $event-&amp;gt;getMetadata()['organizationId'] ?? null ); $this-&amp;gt;logger-&amp;gt;info('Payment failed projection updated', [ 'paymentId' =&amp;gt; $event-&amp;gt;getAggregateId(), 'status' =&amp;gt; 'failed' ]); } private function handlePaymentRefunded(DomainEvent $event): void { $update = [ 'status' =&amp;gt; 'refunded', 'refundAmount' =&amp;gt; $event-&amp;gt;getData()['refundAmount'], 'refundedAt' =&amp;gt; $event-&amp;gt;getTimestamp()-&amp;gt;format('c'), 'updatedAt' =&amp;gt; (new \DateTime())-&amp;gt;format('c') ]; $this-&amp;gt;writer-&amp;gt;updateDocument( $event-&amp;gt;getAggregateId(), $update, $event-&amp;gt;getMetadata()['organizationId'] ?? null ); $this-&amp;gt;logger-&amp;gt;info('Payment refunded projection updated', [ 'paymentId' =&amp;gt; $event-&amp;gt;getAggregateId(), 'status' =&amp;gt; 'refunded' ]); }}&lt;/code&gt;## 🧪 &lt;strong&gt;Tests et Validation&lt;/strong&gt;### &lt;strong&gt;Tests d&amp;rsquo;Intégration Event Sourcing + CQRS&lt;/strong&gt;&lt;code&gt;php&amp;lt;?phpnamespace App\Tests\Integration\ElasticSearch;use App\Application\Command\Payment\ProcessPaymentCommand;use App\Application\Command\Payment\ProcessPaymentCommandHandler;use App\Application\Query\Payment\GetPaymentHistoryQuery;use App\Application\Query\Payment\PaymentEventQueryHandler;use App\Infrastructure\EventStore\ElasticSearchEventStore;use App\Infrastructure\ElasticSearch\Query\EventSearchService;use Elasticsearch\ClientBuilder;class ElasticSearchEventSourcingCqrsTest extends TestCase{ private ElasticSearchEventStore $eventStore; private EventSearchService $eventSearch; private ProcessPaymentCommandHandler $commandHandler; private PaymentEventQueryHandler $queryHandler; protected function setUp(): void { $client = ClientBuilder::create()-&amp;gt;setHosts(['localhost:9200'])-&amp;gt;build(); $this-&amp;gt;eventStore = new ElasticSearchEventStore($client, 'test-events', $this-&amp;gt;createMock(LoggerInterface::class)); $this-&amp;gt;eventSearch = new EventSearchService($client, 'test-events', $this-&amp;gt;createMock(LoggerInterface::class), $this-&amp;gt;createMock(CacheItemPoolInterface::class)); $this-&amp;gt;commandHandler = new ProcessPaymentCommandHandler( $this-&amp;gt;eventStore, $this-&amp;gt;createMock(EventBusInterface::class), $this-&amp;gt;createMock(LoggerInterface::class) ); $this-&amp;gt;queryHandler = new PaymentEventQueryHandler($this-&amp;gt;eventSearch, $this-&amp;gt;createMock(LoggerInterface::class)); } public function testEventSourcingCqrsFlow(): void { // Exécuter une commande $command = new ProcessPaymentCommand( 'payment-123', 100.00, 'EUR' ); $this-&amp;gt;commandHandler-&amp;gt;handle($command); // Vérifier l'historique des événements $query = new GetPaymentHistoryQuery('payment-123'); $history = $this-&amp;gt;queryHandler-&amp;gt;handle($query); $this-&amp;gt;assertNotEmpty($history); $this-&amp;gt;assertCount(1, $history); $this-&amp;gt;assertEquals('PaymentProcessed', $history[0]['eventType']); } public function testEventSearchWithAnalytics(): void { // Créer plusieurs événements $commands = [ new ProcessPaymentCommand('payment-1', 100.00, 'EUR'), new ProcessPaymentCommand('payment-2', 200.00, 'USD'), new ProcessPaymentCommand('payment-3', 300.00, 'EUR') ]; foreach ($commands as $command) { $this-&amp;gt;commandHandler-&amp;gt;handle($command); } // Rechercher les événements $searchQuery = new SearchPaymentEventsQuery( new \DateTime('2024-01-01'), new \DateTime('2024-12-31') ); $results = $this-&amp;gt;queryHandler-&amp;gt;handle($searchQuery); $this-&amp;gt;assertCount(3, $results); $this-&amp;gt;assertEquals('PaymentProcessed', $results[0]['eventType']); }}&lt;/code&gt;## 📊 &lt;strong&gt;Performance et Optimisation&lt;/strong&gt;### &lt;strong&gt;Stratégies d&amp;rsquo;Optimisation Event Sourcing + CQRS&lt;/strong&gt;#### &lt;strong&gt;1. Index Optimisés pour les Événements&lt;/strong&gt;&lt;code&gt;json{ &amp;quot;mappings&amp;quot;: { &amp;quot;properties&amp;quot;: { &amp;quot;eventId&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;aggregateId&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;aggregateType&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;eventType&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;eventData&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot; }, &amp;quot;version&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot; }, &amp;quot;timestamp&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;date&amp;quot; }, &amp;quot;correlationId&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;causationId&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;metadata&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot; } } }, &amp;quot;settings&amp;quot;: { &amp;quot;number_of_shards&amp;quot;: 3, &amp;quot;number_of_replicas&amp;quot;: 1, &amp;quot;refresh_interval&amp;quot;: &amp;quot;30s&amp;quot; }}&lt;/code&gt;#### &lt;strong&gt;2. Cache Multi-Niveaux&lt;/strong&gt;&lt;code&gt;phppublic function searchEventsWithCache(array $query, string $cacheKey = null): array{ // Cache L1: Mémoire if (isset($this-&amp;gt;memoryCache[$cacheKey])) { return $this-&amp;gt;memoryCache[$cacheKey]; } // Cache L2: Redis if ($cached = $this-&amp;gt;redis-&amp;gt;get(&amp;quot;event_search:{$cacheKey}&amp;quot;)) { $result = json_decode($cached, true); $this-&amp;gt;memoryCache[$cacheKey] = $result; return $result; } // ElasticSearch $result = $this-&amp;gt;searchEvents($query); // Mettre en cache $this-&amp;gt;memoryCache[$cacheKey] = $result; $this-&amp;gt;redis-&amp;gt;setex(&amp;quot;event_search:{$cacheKey}&amp;quot;, 300, json_encode($result)); return $result;}&lt;/code&gt;#### &lt;strong&gt;3. Projections Asynchrones&lt;/strong&gt;&lt;code&gt;phppublic function handleEventAsync(DomainEvent $event): void{ // Mettre en queue pour traitement asynchrone $this-&amp;gt;messageBus-&amp;gt;dispatch(new ProcessProjectionCommand($event));}&lt;/code&gt;## 🎯 &lt;strong&gt;Critères d&amp;rsquo;Adoption&lt;/strong&gt;### &lt;strong&gt;Quand Utiliser Event Sourcing + CQRS avec ElasticSearch&lt;/strong&gt;#### &lt;strong&gt;✅ Avantages&lt;/strong&gt;- &lt;strong&gt;Audit trail complet&lt;/strong&gt; : Historique immuable de tous les événements- &lt;strong&gt;Scalabilité maximale&lt;/strong&gt; : Possibilité de scaler indépendamment- &lt;strong&gt;Recherche avancée&lt;/strong&gt; : Full-text search sur les événements- &lt;strong&gt;Analytics temporelles&lt;/strong&gt; : Analyse des tendances dans le temps- &lt;strong&gt;Performance optimale&lt;/strong&gt; : Chaque côté optimisé pour son usage- &lt;strong&gt;Flexibilité maximale&lt;/strong&gt; : Projections multiples pour différents besoins#### &lt;strong&gt;❌ Inconvénients&lt;/strong&gt;- &lt;strong&gt;Complexité maximale&lt;/strong&gt; : Architecture très complexe- &lt;strong&gt;Stockage important&lt;/strong&gt; : Beaucoup d&amp;rsquo;espace disque nécessaire- &lt;strong&gt;Performance&lt;/strong&gt; : Requêtes plus lentes sur de gros volumes- &lt;strong&gt;Expertise&lt;/strong&gt; : Équipe très expérimentée requise- &lt;strong&gt;Coût&lt;/strong&gt; : Infrastructure très coûteuse#### &lt;strong&gt;🎯 Critères d&amp;rsquo;Adoption&lt;/strong&gt;- &lt;strong&gt;Système très complexe&lt;/strong&gt; : Besoins de scalabilité maximale- &lt;strong&gt;Audit trail critique&lt;/strong&gt; : Besoin de traçabilité complète- &lt;strong&gt;Recherche avancée&lt;/strong&gt; : Besoin de rechercher dans les événements- &lt;strong&gt;Analytics temporelles&lt;/strong&gt; : Besoin d&amp;rsquo;analyser les tendances- &lt;strong&gt;Équipe très expérimentée&lt;/strong&gt; : Maîtrise d&amp;rsquo;Event Sourcing, CQRS et ElasticSearch- &lt;strong&gt;Budget important&lt;/strong&gt; : Investissement en complexité justifié- &lt;strong&gt;Performance critique&lt;/strong&gt; : Besoins de performance maximale## 🚀 &lt;strong&gt;Votre Prochaine Étape&lt;/strong&gt;

&lt;div class="chapter-navigation"&gt;
 &lt;h2 class="chapter-nav-title"&gt;🎯 Votre Prochaine Étape&lt;/h2&gt;
 &lt;p class="chapter-nav-subtitle"&gt;Maintenant que vous comprenez les concepts de base et que j'ai partagé mon expérience avec Gyroscops, quel est votre contexte ?&lt;/p&gt;</description></item></channel></rss>