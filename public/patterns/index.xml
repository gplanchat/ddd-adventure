<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Patterns on DDD Adventure</title><link>/patterns/</link><description>Recent content in Patterns on DDD Adventure</description><generator>Hugo</generator><language>fr-fr</language><lastBuildDate>Thu, 19 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="/patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>CQRS - Command Query Responsibility Segregation</title><link>/patterns/cqrs/</link><pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate><guid>/patterns/cqrs/</guid><description>&lt;h2 id="-quest-ce-que-cqrs-cqrs-command-query-responsibility-segregation-est-un-pattern-architectural-qui-s√©pare-clairement-les-op√©rations-de-lecture-query-des-op√©rations-d√©criture-command-dans-une-application-le-principe-fondamental----bertrand-meyercqrs-pousse-ce-principe-√†-lextr√™me-en-cr√©ant-deux-mod√®les-distincts---mod√®le-de-commande--pour-les-op√©rations-qui-modifient-l√©tat--mod√®le-de-requ√™te--pour-les-op√©rations-qui-lisent-les-donn√©es--architecture-cqrs-dans-gyroscops-contexte-m√©tier--gestion-des-paiementsdans-gyroscops-nous-g√©rons-des-paiements-avec-des-besoins-tr√®s-diff√©rents--c√¥t√©-commande-writephp-commande--cr√©er-un-paiementclass-createpaymentcommand----public-function-__construct--------public-readonly-paymentid-paymentid--------public-readonly-amount-amount--------public-readonly-paymentmethod-method--------public-readonly-customerid-customerid------handler--traiter-la-commandeclass-createpaymenthandler----public-function-__invokecreatepaymentcommand-command-void------------payment--paymentcreate------------command-paymentid------------command-amount------------command-method------------command-customerid------------------------this-paymentrepository-savepayment--------this-eventbus-dispatchnew-paymentcreatedpayment-----c√¥t√©-requ√™te-readphp-requ√™te--obtenir-les-paiements-dun-clientclass-getcustomerpaymentsquery----public-function-__construct--------public-readonly-customerid-customerid--------public-readonly-daterange-daterange--null------handler--ex√©cuter-la-requ√™teclass-getcustomerpaymentshandler----public-function-__invokegetcustomerpaymentsquery-query-array------------return-this-paymentqueryrepository-findbycustomer------------query-customerid------------query-daterange--------------avantages-de-cqrs-1-s√©paration-des-responsabilit√©s--commandes--focus-sur-la-logique-m√©tier-et-la-validation--requ√™tes--focus-sur-loptimisation-des-performances-de-lecture-2-optimisation-ind√©pendante--write-model--optimis√©-pour-la-coh√©rence-et-les-invariants-m√©tier--read-model--optimis√©-pour-les-performances-et-la-flexibilit√©-3-scalabilit√©--possibilit√©-de-scaler-s√©par√©ment-les-lectures-et-les-√©critures--utilisation-de-technologies-diff√©rentes-pour-chaque-c√¥t√©-4-√©volutivit√©--modification-des-requ√™tes-sans-impact-sur-les-commandes--ajout-de-nouvelles-vues-sans-affecter-la-logique-m√©tier--impl√©mentation-dans-gyroscops-structure-des-dossierssrcaccounting-application----command-------createpayment----------createpaymentcommandphp----------createpaymenthandlerphp----------createpaymentvalidatorphp-------processrefund----query--------getpaymentdetails-----------getpaymentdetailsqueryphp-----------getpaymentdetailshandlerphp-----------paymentdetailsviewphp--------listcustomerpayments-domain----paymentphp-write-model----paymentdetailsphp-read-model-infrastructure-----paymentrepositoryphp-write-----paymentqueryrepositoryphp-read-exemple-concret--gestion-des-abonnements-commande--cr√©er-un-abonnementphpclass-createsubscriptioncommand----public-function-__construct--------public-readonly-subscriptionid-subscriptionid--------public-readonly-planid-planid--------public-readonly-customerid-customerid--------public-readonly-billingcycle-billingcycle-----class-createsubscriptionhandler----public-function-__invokecreatesubscriptioncommand-command-void-------------validation-m√©tier--------this-validatesubscriptioncreationcommand-----------------cr√©ation-de-lagr√©gat--------subscription--subscriptioncreate------------command-subscriptionid------------command-planid------------command-customerid------------command-billingcycle-------------------------persistance--------this-subscriptionrepository-savesubscription-----------------√©v√©nement--------this-eventbus-dispatchnew-subscriptioncreatedsubscription-----requ√™te--obtenir-les-d√©tails-dphpclass-getsubscriptiondetailsquery----public-function-__construct--------public-readonly-subscriptionid-subscriptionid-----class-getsubscriptiondetailshandler----public-function-__invokegetsubscriptiondetailsquery-query-subscriptiondetailsview------------return-this-subscriptionqueryrepository-finddetailsquery-subscriptionid----class-subscriptiondetailsview----public-function-__construct--------public-readonly-subscriptionid-id--------public-readonly-string-planname--------public-readonly-string-customername--------public-readonly-string-status--------public-readonly-datetime-startdate--------public-readonly-datetime-enddate--------public-readonly-amount-monthlyprice--------public-readonly-array-features-------patterns-avanc√©s-avec-cqrs-1-event-sourcing--cqrs--les-commandes-g√©n√®rent-des-√©v√©nements--les-requ√™tes-lisent-depuis-les-projections-2-cqrs-avec-projections--projections-d√©normalis√©es-pour-les-requ√™tes--mise-√†-jour-asynchrone-des-vues-3-cqrs-avec-api-platform--ressources-s√©par√©es-pour-command-et-query--validation-automatique-des-dtos--performance-et-optimisation-optimisations-c√¥t√©-lecture--indexation--index-optimis√©s-pour-les-requ√™tes-fr√©quentes--cache--mise-en-cache-des-vues-fr√©quemment-consult√©es--d√©normalisation--donn√©es-pr√©-calcul√©es-pour-√©viter-les-jointures-optimisations-c√¥t√©-√©criture--validation--validation-m√©tier-centralis√©e--transactions--gestion-des-transactions-optimis√©e--√©v√©nements--publication-asynchrone-des-√©v√©nements--quand-utiliser-cqrs---cas-d--complexit√©-m√©tier-√©lev√©e--beaucoup-de-r√®gles-m√©tier--besoins-de-lecture√©criture-diff√©rents--requ√™tes-complexes-vs-√©critures-simples--performance-critique--besoins-de-performance-diff√©rents--√©quipes-s√©par√©es--√©quipes-diff√©rentes-pour-readwrite--cas-d--applications-simples--crud-basique--coh√©rence-forte-requise--besoin-de-coh√©rence-imm√©diate--√©quipe-unique--une-seule-√©quipe-pour-tout--prototypage--d√©veloppement-rapide--migration-vers-cqrs-√©tape-1--identifier-les-commandes--lister-toutes-les-op√©rations-qui-modifient-l√©tat--grouper-par-contexte-m√©tier-√©tape-2--identifier-les-requ√™tes--lister-toutes-les-op√©rations-de-lecture--analyser-les-patterns-dacc√®s-√©tape-3--s√©parer-les-mod√®les--cr√©er-des-mod√®les-distincts--migrer-progressivement-√©tape-4--optimiser--optimiser-chaque-c√¥t√©-ind√©pendamment--mesurer-les-performances--m√©triques-et-monitoring-m√©triques-c√¥t√©-commande--nombre-de-commandes-par-seconde--temps-de-traitement-moyen--taux-derreur-m√©triques-c√¥t√©-requ√™te--temps-de-r√©ponse-des-requ√™tes--utilisation-du-cache--charge-des-projections--prochaines-√©tapesmaintenant-que-vous-comprenez-cqrs-explorez-1-event-sourcing--stocker-les-√©v√©nements-comme-source-de-v√©rit√©2-repositories--patterns-de-persistance3-impl√©mentation-cqrs--guide-dimpl√©mentation-completcqrs-n"&gt;üåü **Qu&amp;rsquo;est-ce que CQRS ?**&lt;strong&gt;CQRS&lt;/strong&gt; (Command Query Responsibility Segregation) est un pattern architectural qui s√©pare clairement les op√©rations de &lt;strong&gt;lecture&lt;/strong&gt; (Query) des op√©rations d&amp;rsquo;&lt;strong&gt;√©criture&lt;/strong&gt; (Command) dans une application.### &lt;strong&gt;Le Principe Fondamental&lt;/strong&gt;&amp;gt; &lt;strong&gt;&amp;ldquo;Une m√©thode ne devrait jamais retourner de valeur et modifier l&amp;rsquo;√©tat de l&amp;rsquo;objet&amp;rdquo;&lt;/strong&gt; - Bertrand MeyerCQRS pousse ce principe √† l&amp;rsquo;extr√™me en cr√©ant deux mod√®les distincts :- &lt;strong&gt;Mod√®le de Commande&lt;/strong&gt; : Pour les op√©rations qui modifient l&amp;rsquo;√©tat- &lt;strong&gt;Mod√®le de Requ√™te&lt;/strong&gt; : Pour les op√©rations qui lisent les donn√©es## üèóÔ∏è &lt;strong&gt;Architecture CQRS dans Gyroscops&lt;/strong&gt;### &lt;strong&gt;Contexte M√©tier : Gestion des Paiements&lt;/strong&gt;Dans Gyroscops, nous g√©rons des paiements avec des besoins tr√®s diff√©rents :#### &lt;strong&gt;C√¥t√© Commande (Write)&lt;/strong&gt;&lt;code&gt;php// Commande : Cr√©er un paiementclass CreatePaymentCommand{ public function __construct( public readonly PaymentId $paymentId, public readonly Amount $amount, public readonly PaymentMethod $method, public readonly CustomerId $customerId ) {}}// Handler : Traiter la commandeclass CreatePaymentHandler{ public function __invoke(CreatePaymentCommand $command): void { $payment = Payment::create( $command-&amp;gt;paymentId, $command-&amp;gt;amount, $command-&amp;gt;method, $command-&amp;gt;customerId ); $this-&amp;gt;paymentRepository-&amp;gt;save($payment); $this-&amp;gt;eventBus-&amp;gt;dispatch(new PaymentCreated($payment)); }}&lt;/code&gt;#### &lt;strong&gt;C√¥t√© Requ√™te (Read)&lt;/strong&gt;&lt;code&gt;php// Requ√™te : Obtenir les paiements d'un clientclass GetCustomerPaymentsQuery{ public function __construct( public readonly CustomerId $customerId, public readonly ?DateRange $dateRange = null ) {}}// Handler : Ex√©cuter la requ√™teclass GetCustomerPaymentsHandler{ public function __invoke(GetCustomerPaymentsQuery $query): array { return $this-&amp;gt;paymentQueryRepository-&amp;gt;findByCustomer( $query-&amp;gt;customerId, $query-&amp;gt;dateRange ); }}&lt;/code&gt;## üéØ &lt;strong&gt;Avantages de CQRS&lt;/strong&gt;### &lt;strong&gt;1. S√©paration des Responsabilit√©s&lt;/strong&gt;- &lt;strong&gt;Commandes&lt;/strong&gt; : Focus sur la logique m√©tier et la validation- &lt;strong&gt;Requ√™tes&lt;/strong&gt; : Focus sur l&amp;rsquo;optimisation des performances de lecture### &lt;strong&gt;2. Optimisation Ind√©pendante&lt;/strong&gt;- &lt;strong&gt;Write Model&lt;/strong&gt; : Optimis√© pour la coh√©rence et les invariants m√©tier- &lt;strong&gt;Read Model&lt;/strong&gt; : Optimis√© pour les performances et la flexibilit√©### &lt;strong&gt;3. Scalabilit√©&lt;/strong&gt;- Possibilit√© de scaler s√©par√©ment les lectures et les √©critures- Utilisation de technologies diff√©rentes pour chaque c√¥t√©### &lt;strong&gt;4. √âvolutivit√©&lt;/strong&gt;- Modification des requ√™tes sans impact sur les commandes- Ajout de nouvelles vues sans affecter la logique m√©tier## üîß &lt;strong&gt;Impl√©mentation dans Gyroscops&lt;/strong&gt;### &lt;strong&gt;Structure des Dossiers&lt;/strong&gt;&lt;code&gt;src/Accounting/‚îú‚îÄ‚îÄ Application/‚îÇ ‚îú‚îÄ‚îÄ Command/‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ CreatePayment/‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ CreatePaymentCommand.php‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ CreatePaymentHandler.php‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ CreatePaymentValidator.php‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ ProcessRefund/‚îÇ ‚îî‚îÄ‚îÄ Query/‚îÇ ‚îú‚îÄ‚îÄ GetPaymentDetails/‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ GetPaymentDetailsQuery.php‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ GetPaymentDetailsHandler.php‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ PaymentDetailsView.php‚îÇ ‚îî‚îÄ‚îÄ ListCustomerPayments/‚îú‚îÄ‚îÄ Domain/‚îÇ ‚îú‚îÄ‚îÄ Payment.php (Write Model)‚îÇ ‚îî‚îÄ‚îÄ PaymentDetails.php (Read Model)‚îî‚îÄ‚îÄ Infrastructure/ ‚îú‚îÄ‚îÄ PaymentRepository.php (Write) ‚îî‚îÄ‚îÄ PaymentQueryRepository.php (Read)&lt;/code&gt;### &lt;strong&gt;Exemple Concret : Gestion des Abonnements&lt;/strong&gt;#### &lt;strong&gt;Commande : Cr√©er un Abonnement&lt;/strong&gt;&lt;code&gt;phpclass CreateSubscriptionCommand{ public function __construct( public readonly SubscriptionId $subscriptionId, public readonly PlanId $planId, public readonly CustomerId $customerId, public readonly BillingCycle $billingCycle ) {}}class CreateSubscriptionHandler{ public function __invoke(CreateSubscriptionCommand $command): void { // Validation m√©tier $this-&amp;gt;validateSubscriptionCreation($command); // Cr√©ation de l'agr√©gat $subscription = Subscription::create( $command-&amp;gt;subscriptionId, $command-&amp;gt;planId, $command-&amp;gt;customerId, $command-&amp;gt;billingCycle ); // Persistance $this-&amp;gt;subscriptionRepository-&amp;gt;save($subscription); // √âv√©nement $this-&amp;gt;eventBus-&amp;gt;dispatch(new SubscriptionCreated($subscription)); }}&lt;/code&gt;#### &lt;strong&gt;Requ√™te : Obtenir les D√©tails d&amp;rsquo;un Abonnement&lt;/strong&gt;&lt;code&gt;phpclass GetSubscriptionDetailsQuery{ public function __construct( public readonly SubscriptionId $subscriptionId ) {}}class GetSubscriptionDetailsHandler{ public function __invoke(GetSubscriptionDetailsQuery $query): SubscriptionDetailsView { return $this-&amp;gt;subscriptionQueryRepository-&amp;gt;findDetails($query-&amp;gt;subscriptionId); }}class SubscriptionDetailsView{ public function __construct( public readonly SubscriptionId $id, public readonly string $planName, public readonly string $customerName, public readonly string $status, public readonly DateTime $startDate, public readonly ?DateTime $endDate, public readonly Amount $monthlyPrice, public readonly array $features ) {}}&lt;/code&gt;## üöÄ &lt;strong&gt;Patterns Avanc√©s avec CQRS&lt;/strong&gt;### &lt;strong&gt;1. Event Sourcing + CQRS&lt;/strong&gt;- Les commandes g√©n√®rent des √©v√©nements- Les requ√™tes lisent depuis les projections### &lt;strong&gt;2. CQRS avec Projections&lt;/strong&gt;- Projections d√©normalis√©es pour les requ√™tes- Mise √† jour asynchrone des vues### &lt;strong&gt;3. CQRS avec API Platform&lt;/strong&gt;- Ressources s√©par√©es pour Command et Query- Validation automatique des DTOs## ‚ö° &lt;strong&gt;Performance et Optimisation&lt;/strong&gt;### &lt;strong&gt;Optimisations C√¥t√© Lecture&lt;/strong&gt;- &lt;strong&gt;Indexation&lt;/strong&gt; : Index optimis√©s pour les requ√™tes fr√©quentes- &lt;strong&gt;Cache&lt;/strong&gt; : Mise en cache des vues fr√©quemment consult√©es- &lt;strong&gt;D√©normalisation&lt;/strong&gt; : Donn√©es pr√©-calcul√©es pour √©viter les jointures### &lt;strong&gt;Optimisations C√¥t√© √âcriture&lt;/strong&gt;- &lt;strong&gt;Validation&lt;/strong&gt; : Validation m√©tier centralis√©e- &lt;strong&gt;Transactions&lt;/strong&gt; : Gestion des transactions optimis√©e- &lt;strong&gt;√âv√©nements&lt;/strong&gt; : Publication asynchrone des √©v√©nements## üéØ &lt;strong&gt;Quand Utiliser CQRS ?&lt;/strong&gt;### &lt;strong&gt;‚úÖ Cas d&amp;rsquo;Usage Appropri√©s&lt;/strong&gt;- &lt;strong&gt;Complexit√© m√©tier √©lev√©e&lt;/strong&gt; : Beaucoup de r√®gles m√©tier- &lt;strong&gt;Besoins de lecture/√©criture diff√©rents&lt;/strong&gt; : Requ√™tes complexes vs √©critures simples- &lt;strong&gt;Performance critique&lt;/strong&gt; : Besoins de performance diff√©rents- &lt;strong&gt;√âquipes s√©par√©es&lt;/strong&gt; : √âquipes diff√©rentes pour read/write### &lt;strong&gt;‚ùå Cas d&amp;rsquo;Usage Inappropri√©s&lt;/strong&gt;- &lt;strong&gt;Applications simples&lt;/strong&gt; : CRUD basique- &lt;strong&gt;Coh√©rence forte requise&lt;/strong&gt; : Besoin de coh√©rence imm√©diate- &lt;strong&gt;√âquipe unique&lt;/strong&gt; : Une seule √©quipe pour tout- &lt;strong&gt;Prototypage&lt;/strong&gt; : D√©veloppement rapide## üîÑ &lt;strong&gt;Migration vers CQRS&lt;/strong&gt;### &lt;strong&gt;√âtape 1 : Identifier les Commandes&lt;/strong&gt;- Lister toutes les op√©rations qui modifient l&amp;rsquo;√©tat- Grouper par contexte m√©tier### &lt;strong&gt;√âtape 2 : Identifier les Requ√™tes&lt;/strong&gt;- Lister toutes les op√©rations de lecture- Analyser les patterns d&amp;rsquo;acc√®s### &lt;strong&gt;√âtape 3 : S√©parer les Mod√®les&lt;/strong&gt;- Cr√©er des mod√®les distincts- Migrer progressivement### &lt;strong&gt;√âtape 4 : Optimiser&lt;/strong&gt;- Optimiser chaque c√¥t√© ind√©pendamment- Mesurer les performances## üìä &lt;strong&gt;M√©triques et Monitoring&lt;/strong&gt;### &lt;strong&gt;M√©triques C√¥t√© Commande&lt;/strong&gt;- Nombre de commandes par seconde- Temps de traitement moyen- Taux d&amp;rsquo;erreur### &lt;strong&gt;M√©triques C√¥t√© Requ√™te&lt;/strong&gt;- Temps de r√©ponse des requ√™tes- Utilisation du cache- Charge des projections## üéØ &lt;strong&gt;Prochaines √âtapes&lt;/strong&gt;Maintenant que vous comprenez CQRS, explorez :1. &lt;strong&gt;&lt;a href="/concept/event-sourcing/"&gt;Event Sourcing&lt;/a&gt;&lt;/strong&gt; : Stocker les √©v√©nements comme source de v√©rit√©2. &lt;strong&gt;&lt;a href="/concept/repositories/"&gt;Repositories&lt;/a&gt;&lt;/strong&gt; : Patterns de persistance3. &lt;strong&gt;&lt;a href="/chapitres/optionnels/chapitre-13-architecture-cqrs/"&gt;Impl√©mentation CQRS&lt;/a&gt;&lt;/strong&gt; : Guide d&amp;rsquo;impl√©mentation complet&amp;mdash;&lt;em&gt;CQRS n&amp;rsquo;est pas une solution universelle, mais un outil puissant pour les applications complexes. Dans Gyroscops, il nous a permis de g√©rer efficacement la complexit√© m√©tier tout en optimisant les performances.&lt;/em&gt; &lt;a href="#-quest-ce-que-cqrs-cqrs-command-query-responsibility-segregation-est-un-pattern-architectural-qui-s%c3%a9pare-clairement-les-op%c3%a9rations-de-lecture-query-des-op%c3%a9rations-d%c3%a9criture-command-dans-une-application-le-principe-fondamental----bertrand-meyercqrs-pousse-ce-principe-%c3%a0-lextr%c3%aame-en-cr%c3%a9ant-deux-mod%c3%a8les-distincts---mod%c3%a8le-de-commande--pour-les-op%c3%a9rations-qui-modifient-l%c3%a9tat--mod%c3%a8le-de-requ%c3%aate--pour-les-op%c3%a9rations-qui-lisent-les-donn%c3%a9es--architecture-cqrs-dans-gyroscops-contexte-m%c3%a9tier--gestion-des-paiementsdans-gyroscops-nous-g%c3%a9rons-des-paiements-avec-des-besoins-tr%c3%a8s-diff%c3%a9rents--c%c3%b4t%c3%a9-commande-writephp-commande--cr%c3%a9er-un-paiementclass-createpaymentcommand----public-function-__construct--------public-readonly-paymentid-paymentid--------public-readonly-amount-amount--------public-readonly-paymentmethod-method--------public-readonly-customerid-customerid------handler--traiter-la-commandeclass-createpaymenthandler----public-function-__invokecreatepaymentcommand-command-void------------payment--paymentcreate------------command-paymentid------------command-amount------------command-method------------command-customerid------------------------this-paymentrepository-savepayment--------this-eventbus-dispatchnew-paymentcreatedpayment-----c%c3%b4t%c3%a9-requ%c3%aate-readphp-requ%c3%aate--obtenir-les-paiements-dun-clientclass-getcustomerpaymentsquery----public-function-__construct--------public-readonly-customerid-customerid--------public-readonly-daterange-daterange--null------handler--ex%c3%a9cuter-la-requ%c3%aateclass-getcustomerpaymentshandler----public-function-__invokegetcustomerpaymentsquery-query-array------------return-this-paymentqueryrepository-findbycustomer------------query-customerid------------query-daterange--------------avantages-de-cqrs-1-s%c3%a9paration-des-responsabilit%c3%a9s--commandes--focus-sur-la-logique-m%c3%a9tier-et-la-validation--requ%c3%aates--focus-sur-loptimisation-des-performances-de-lecture-2-optimisation-ind%c3%a9pendante--write-model--optimis%c3%a9-pour-la-coh%c3%a9rence-et-les-invariants-m%c3%a9tier--read-model--optimis%c3%a9-pour-les-performances-et-la-flexibilit%c3%a9-3-scalabilit%c3%a9--possibilit%c3%a9-de-scaler-s%c3%a9par%c3%a9ment-les-lectures-et-les-%c3%a9critures--utilisation-de-technologies-diff%c3%a9rentes-pour-chaque-c%c3%b4t%c3%a9-4-%c3%a9volutivit%c3%a9--modification-des-requ%c3%aates-sans-impact-sur-les-commandes--ajout-de-nouvelles-vues-sans-affecter-la-logique-m%c3%a9tier--impl%c3%a9mentation-dans-gyroscops-structure-des-dossierssrcaccounting-application----command-------createpayment----------createpaymentcommandphp----------createpaymenthandlerphp----------createpaymentvalidatorphp-------processrefund----query--------getpaymentdetails-----------getpaymentdetailsqueryphp-----------getpaymentdetailshandlerphp-----------paymentdetailsviewphp--------listcustomerpayments-domain----paymentphp-write-model----paymentdetailsphp-read-model-infrastructure-----paymentrepositoryphp-write-----paymentqueryrepositoryphp-read-exemple-concret--gestion-des-abonnements-commande--cr%c3%a9er-un-abonnementphpclass-createsubscriptioncommand----public-function-__construct--------public-readonly-subscriptionid-subscriptionid--------public-readonly-planid-planid--------public-readonly-customerid-customerid--------public-readonly-billingcycle-billingcycle-----class-createsubscriptionhandler----public-function-__invokecreatesubscriptioncommand-command-void-------------validation-m%c3%a9tier--------this-validatesubscriptioncreationcommand-----------------cr%c3%a9ation-de-lagr%c3%a9gat--------subscription--subscriptioncreate------------command-subscriptionid------------command-planid------------command-customerid------------command-billingcycle-------------------------persistance--------this-subscriptionrepository-savesubscription-----------------%c3%a9v%c3%a9nement--------this-eventbus-dispatchnew-subscriptioncreatedsubscription-----requ%c3%aate--obtenir-les-d%c3%a9tails-dphpclass-getsubscriptiondetailsquery----public-function-__construct--------public-readonly-subscriptionid-subscriptionid-----class-getsubscriptiondetailshandler----public-function-__invokegetsubscriptiondetailsquery-query-subscriptiondetailsview------------return-this-subscriptionqueryrepository-finddetailsquery-subscriptionid----class-subscriptiondetailsview----public-function-__construct--------public-readonly-subscriptionid-id--------public-readonly-string-planname--------public-readonly-string-customername--------public-readonly-string-status--------public-readonly-datetime-startdate--------public-readonly-datetime-enddate--------public-readonly-amount-monthlyprice--------public-readonly-array-features-------patterns-avanc%c3%a9s-avec-cqrs-1-event-sourcing--cqrs--les-commandes-g%c3%a9n%c3%a8rent-des-%c3%a9v%c3%a9nements--les-requ%c3%aates-lisent-depuis-les-projections-2-cqrs-avec-projections--projections-d%c3%a9normalis%c3%a9es-pour-les-requ%c3%aates--mise-%c3%a0-jour-asynchrone-des-vues-3-cqrs-avec-api-platform--ressources-s%c3%a9par%c3%a9es-pour-command-et-query--validation-automatique-des-dtos--performance-et-optimisation-optimisations-c%c3%b4t%c3%a9-lecture--indexation--index-optimis%c3%a9s-pour-les-requ%c3%aates-fr%c3%a9quentes--cache--mise-en-cache-des-vues-fr%c3%a9quemment-consult%c3%a9es--d%c3%a9normalisation--donn%c3%a9es-pr%c3%a9-calcul%c3%a9es-pour-%c3%a9viter-les-jointures-optimisations-c%c3%b4t%c3%a9-%c3%a9criture--validation--validation-m%c3%a9tier-centralis%c3%a9e--transactions--gestion-des-transactions-optimis%c3%a9e--%c3%a9v%c3%a9nements--publication-asynchrone-des-%c3%a9v%c3%a9nements--quand-utiliser-cqrs---cas-d--complexit%c3%a9-m%c3%a9tier-%c3%a9lev%c3%a9e--beaucoup-de-r%c3%a8gles-m%c3%a9tier--besoins-de-lecture%c3%a9criture-diff%c3%a9rents--requ%c3%aates-complexes-vs-%c3%a9critures-simples--performance-critique--besoins-de-performance-diff%c3%a9rents--%c3%a9quipes-s%c3%a9par%c3%a9es--%c3%a9quipes-diff%c3%a9rentes-pour-readwrite--cas-d--applications-simples--crud-basique--coh%c3%a9rence-forte-requise--besoin-de-coh%c3%a9rence-imm%c3%a9diate--%c3%a9quipe-unique--une-seule-%c3%a9quipe-pour-tout--prototypage--d%c3%a9veloppement-rapide--migration-vers-cqrs-%c3%a9tape-1--identifier-les-commandes--lister-toutes-les-op%c3%a9rations-qui-modifient-l%c3%a9tat--grouper-par-contexte-m%c3%a9tier-%c3%a9tape-2--identifier-les-requ%c3%aates--lister-toutes-les-op%c3%a9rations-de-lecture--analyser-les-patterns-dacc%c3%a8s-%c3%a9tape-3--s%c3%a9parer-les-mod%c3%a8les--cr%c3%a9er-des-mod%c3%a8les-distincts--migrer-progressivement-%c3%a9tape-4--optimiser--optimiser-chaque-c%c3%b4t%c3%a9-ind%c3%a9pendamment--mesurer-les-performances--m%c3%a9triques-et-monitoring-m%c3%a9triques-c%c3%b4t%c3%a9-commande--nombre-de-commandes-par-seconde--temps-de-traitement-moyen--taux-derreur-m%c3%a9triques-c%c3%b4t%c3%a9-requ%c3%aate--temps-de-r%c3%a9ponse-des-requ%c3%aates--utilisation-du-cache--charge-des-projections--prochaines-%c3%a9tapesmaintenant-que-vous-comprenez-cqrs-explorez-1-event-sourcing--stocker-les-%c3%a9v%c3%a9nements-comme-source-de-v%c3%a9rit%c3%a92-repositories--patterns-de-persistance3-impl%c3%a9mentation-cqrs--guide-dimpl%c3%a9mentation-completcqrs-n" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;</description></item><item><title>Event Sourcing - Stocker les √âv√©nements comme Source de V√©rit√©</title><link>/patterns/event-sourcing/</link><pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate><guid>/patterns/event-sourcing/</guid><description>&lt;h2 id="-quest-ce-que-levent-sourcing-event-sourcing-est-un-pattern-architectural-qui-stocke-les-√©v√©nements-m√©tier-comme-source-de-v√©rit√©-plut√¥t-que-l√©tat-actuel-des-entit√©s-le-principe-fondamental-l√©tat-dune-entit√©-est-la-cons√©quence-de-tous-les-√©v√©nements-qui-lui-sont-arriv√©sau-lieu-de-stocker-l√©tat-actuel-on-stocke---tous-les-√©v√©nements-qui-ont-modifi√©-lentit√©--l-de-ces-√©v√©nements--les-m√©tadonn√©es-associ√©es-√†-chaque-√©v√©nement--event-sourcing-dans-gyroscops-contexte-m√©tier--gestion-des-abonnementsdans-gyroscops-un-abonnement-passe-par-plusieurs-√©tats--√©v√©nements-m√©tierphp-√©v√©nement--abonnement-cr√©√©class-subscriptioncreated-implements-domainevent----public-function-__construct--------public-readonly-subscriptionid-subscriptionid--------public-readonly-planid-planid--------public-readonly-customerid-customerid--------public-readonly-datetime-createdat--------public-readonly-billingcycle-billingcycle------√©v√©nement--abonnement-activ√©class-subscriptionactivated-implements-domainevent----public-function-__construct--------public-readonly-subscriptionid-subscriptionid--------public-readonly-datetime-activatedat--------public-readonly-datetime-nextbillingdate------√©v√©nement--paiement-trait√©class-paymentprocessed-implements-domainevent----public-function-__construct--------public-readonly-subscriptionid-subscriptionid--------public-readonly-paymentid-paymentid--------public-readonly-amount-amount--------public-readonly-datetime-processedat------√©v√©nement--abonnement-suspenduclass-subscriptionsuspended-implements-domainevent----public-function-__construct--------public-readonly-subscriptionid-subscriptionid--------public-readonly-string-reason--------public-readonly-datetime-suspendedat------reconstruction-de-lphpclass-subscription----private-subscriptionid-id----private-subscriptionstatus-status----private-datetime-nextbillingdate----private-array-payments----------public-static-function-fromeventsarray-events-self------------subscription--new-self----------------foreach-events-as-event-------------subscription-applyevent------------------------return-subscription------------private-function-applydomainevent-event-void------------match-eventclass-------------subscriptioncreatedclass--this-applysubscriptioncreatedevent------------subscriptionactivatedclass--this-applysubscriptionactivatedevent------------paymentprocessedclass--this-applypaymentprocessedevent------------subscriptionsuspendedclass--this-applysubscriptionsuspendedevent--------------------private-function-applysubscriptioncreatedsubscriptioncreated-event-void------------this-id--event-subscriptionid--------this-status--subscriptionstatuspending--------this-nextbillingdate--event-createdat-addevent-billingcycle-interval------------private-function-applysubscriptionactivatedsubscriptionactivated-event-void------------this-status--subscriptionstatusactive--------this-nextbillingdate--event-nextbillingdate------------private-function-applypaymentprocessedpaymentprocessed-event-void------------this-payments--event-paymentid--------this-nextbillingdate--this-nextbillingdate-addthis-billingcycle-interval------------private-function-applysubscriptionsuspendedsubscriptionsuspended-event-void------------this-status--subscriptionstatussuspended------avantages-de-l-1-tra√ßabilit√©-compl√®te--historique-complet--tous-les-changements-sont-enregistr√©s--audit-trail--qui-a-fait-quoi-et-quand--debugging--possibilit√©-de-rejouer-lhistorique-2-flexibilit√©-temporelle--time-travel--voir-l√©tat-√†-nimporte-quel-moment--replay--rejouer-les-√©v√©nements-pour-tester--debugging--comprendre-comment-on-est-arriv√©-√†-un-√©tat-3-√©volutivit√©--nouvelles-projections--cr√©er-de-nouvelles-vues-sans-modifier-le-code-existant--migration--faciliter-les-migrations-de-donn√©es--analytics--analyser-lhistorique-des-√©v√©nements-4-coh√©rence-√©v√©nementielle--source-de-v√©rit√©-unique--les-√©v√©nements-sont-la-seule-source-de-v√©rit√©--int√©grit√©--impossible-de-corrompre-lhistorique--r√©conciliation--possibilit√©-de-d√©tecter-les-incoh√©rences--impl√©mentation-dans-gyroscops-structure-des-dossierssrcaccounting-domain----events-------subscriptioncreatedphp-------subscriptionactivatedphp-------paymentprocessedphp-------subscriptionsuspendedphp----subscriptionphp----eventstorephp-infrastructure----eventstore-------doctrineeventstorephp-------eventstorerepositoryphp----projections--------subscriptionprojectionphp--------paymentprojectionphp-application-----command--------activatesubscription-----query---------getsubscriptionhistory-event-storephpinterface-eventstore----public-function-appendstreamid-streamid-array-events-int-expectedversion-void----public-function-geteventsstreamid-streamid-array----public-function-geteventsfromversionstreamid-streamid-int-fromversion-arrayclass-doctrineeventstore-implements-eventstore----public-function-appendstreamid-streamid-array-events-int-expectedversion-void------------this-entitymanager-transactionalfunction--use-streamid-events-expectedversion--------------v√©rifier-la-version-attendue------------currentversion--this-getcurrentversionstreamid------------if-currentversion--expectedversion-----------------throw-new-concurrencyexceptionversion-mismatch-------------------------------------enregistrer-les-√©v√©nements------------foreach-events-as-event-----------------this-persisteventstreamid-event--------------------------------public-function-geteventsstreamid-streamid-array------------return-this-eventrepository-findbystreamidstreamid-----projectionsphpclass-subscriptionprojection----public-function-__construct--------private-subscriptionqueryrepository-queryrepository-------------public-function-handledomainevent-event-void------------match-eventclass-------------subscriptioncreatedclass--this-handlesubscriptioncreatedevent------------subscriptionactivatedclass--this-handlesubscriptionactivatedevent------------paymentprocessedclass--this-handlepaymentprocessedevent--------------------private-function-handlesubscriptioncreatedsubscriptioncreated-event-void------------this-queryrepository-createsubscriptionview------------event-subscriptionid------------event-planid------------event-customerid------------subscriptionstatuspending------------event-createdat--------------------private-function-handlesubscriptionactivatedsubscriptionactivated-event-void------------this-queryrepository-updatesubscriptionstatus------------event-subscriptionid------------subscriptionstatusactive------------event-nextbillingdate--------------patterns-avanc√©s-avec-event-sourcing-1-snapshotsphpclass-subscriptionsnapshot----public-function-__construct--------public-readonly-subscriptionid-id--------public-readonly-subscriptionstatus-status--------public-readonly-datetime-nextbillingdate--------public-readonly-int-version-----class-snapshotservice----public-function-createsnapshotsubscription-subscription-subscriptionsnapshot------------return-new-subscriptionsnapshot------------subscription-id------------subscription-status------------subscription-nextbillingdate------------subscription-version--------------------public-function-restorefromsnapshotsubscriptionsnapshot-snapshot-array-events-subscription------------subscription--subscriptionfromsnapshotsnapshot-----------------appliquer-seulement-les-√©v√©nements-apr√®s-le-snapshot--------eventsaftersnapshot--array_filter------------events------------fnevent--event-version--snapshot-version------------------------foreach-eventsaftersnapshot-as-event-------------subscription-applyevent------------------------return-subscription-----2-event-sourcing--cqrs--command-side--g√®re-les-√©v√©nements-et-levent-store--query-side--lit-depuis-les-projections-3-event-sourcing--api-platform--ressources--exposer-les-√©v√©nements-via-lapi--validation--valider-les-√©v√©nements-avant-stockage--performance-et-optimisation-optimisations-de-l--indexation--index-sur-stream_id-et-version--partitioning--partitionner-par-stream_id--compression--compresser-les-anciens-√©v√©nements-optimisations-des-projections--snapshots--cr√©er-des-snapshots-r√©guliers--projections-asynchrones--traiter-les-projections-en-arri√®re-plan--cache--mettre-en-cache-les-projections-fr√©quentes--quand-utiliser-l--cas-d--audit-critique--besoin-de-tra√ßabilit√©-compl√®te--compliance--r√©glementations-strictes--analytics--besoin-danalyser-lhistorique--debugging-complexe--syst√®mes-complexes-√†-d√©boguer--cas-d--applications-simples--crud-basique--performance-critique--besoins-de-performance-extr√™me--√©quipe-inexp√©riment√©e--complexit√©-√©lev√©e--prototypage--d√©veloppement-rapide--migration-vers-event-sourcing-√©tape-1--identifier-les-√©v√©nements-m√©tier--lister-tous-les-changements-d√©tat--grouper-par-contexte-m√©tier-√©tape-2--cr√©er-l--choisir-la-technologie-de-stockage--impl√©menter-les-interfaces-√©tape-3--migrer-les-agr√©gats--convertir-les-entit√©s-en-√©v√©nements--impl√©menter-la-reconstruction-√©tape-4--cr√©er-les-projections--cr√©er-les-vues-de-lecture--impl√©menter-la-synchronisation--m√©triques-et-monitoring-m√©triques-event-store--nombre-d√©v√©nements-par-seconde--taille-des-streams--temps-de-reconstruction-m√©triques-projections--d√©lai-de-traitement-des-√©v√©nements--taille-des-projections--performance-des-requ√™tes--prochaines-√©tapesmaintenant-que-vous-comprenez-levent-sourcing-explorez-1-cqrs--s√©parer-les-commandes-des-requ√™tes2-repositories--patterns-de-persistance3-impl√©mentation-event-sourcing--guide-dimpl√©mentation-completevent-sourcing-transforme-la-fa√ßon-dont-nous-pensons-la-persistance-dans-gyroscops-il-nous-a-permis-de-g√©rer-la-complexit√©-m√©tier-tout-en-gardant-une-tra√ßabilit√©-compl√®te-de-tous-les-changements"&gt;üåü **Qu&amp;rsquo;est-ce que l&amp;rsquo;Event Sourcing ?**&lt;strong&gt;Event Sourcing&lt;/strong&gt; est un pattern architectural qui stocke les &lt;strong&gt;√©v√©nements m√©tier&lt;/strong&gt; comme source de v√©rit√©, plut√¥t que l&amp;rsquo;√©tat actuel des entit√©s.### &lt;strong&gt;Le Principe Fondamental&lt;/strong&gt;&amp;gt; **&amp;ldquo;L&amp;rsquo;√©tat d&amp;rsquo;une entit√© est la cons√©quence de tous les √©v√©nements qui lui sont arriv√©s&amp;rdquo;**Au lieu de stocker l&amp;rsquo;√©tat actuel, on stocke :- &lt;strong&gt;Tous les √©v√©nements&lt;/strong&gt; qui ont modifi√© l&amp;rsquo;entit√©- &lt;strong&gt;L&amp;rsquo;ordre chronologique&lt;/strong&gt; de ces √©v√©nements- &lt;strong&gt;Les m√©tadonn√©es&lt;/strong&gt; associ√©es √† chaque √©v√©nement## üèóÔ∏è &lt;strong&gt;Event Sourcing dans Gyroscops&lt;/strong&gt;### &lt;strong&gt;Contexte M√©tier : Gestion des Abonnements&lt;/strong&gt;Dans Gyroscops, un abonnement passe par plusieurs √©tats :#### &lt;strong&gt;√âv√©nements M√©tier&lt;/strong&gt;&lt;code&gt;php// √âv√©nement : Abonnement cr√©√©class SubscriptionCreated implements DomainEvent{ public function __construct( public readonly SubscriptionId $subscriptionId, public readonly PlanId $planId, public readonly CustomerId $customerId, public readonly DateTime $createdAt, public readonly BillingCycle $billingCycle ) {}}// √âv√©nement : Abonnement activ√©class SubscriptionActivated implements DomainEvent{ public function __construct( public readonly SubscriptionId $subscriptionId, public readonly DateTime $activatedAt, public readonly DateTime $nextBillingDate ) {}}// √âv√©nement : Paiement trait√©class PaymentProcessed implements DomainEvent{ public function __construct( public readonly SubscriptionId $subscriptionId, public readonly PaymentId $paymentId, public readonly Amount $amount, public readonly DateTime $processedAt ) {}}// √âv√©nement : Abonnement suspenduclass SubscriptionSuspended implements DomainEvent{ public function __construct( public readonly SubscriptionId $subscriptionId, public readonly string $reason, public readonly DateTime $suspendedAt ) {}}&lt;/code&gt;#### &lt;strong&gt;Reconstruction de l&amp;rsquo;√âtat&lt;/strong&gt;&lt;code&gt;phpclass Subscription{ private SubscriptionId $id; private SubscriptionStatus $status; private ?DateTime $nextBillingDate; private array $payments = []; public static function fromEvents(array $events): self { $subscription = new self(); foreach ($events as $event) { $subscription-&amp;gt;apply($event); } return $subscription; } private function apply(DomainEvent $event): void { match ($event::class) { SubscriptionCreated::class =&amp;gt; $this-&amp;gt;applySubscriptionCreated($event), SubscriptionActivated::class =&amp;gt; $this-&amp;gt;applySubscriptionActivated($event), PaymentProcessed::class =&amp;gt; $this-&amp;gt;applyPaymentProcessed($event), SubscriptionSuspended::class =&amp;gt; $this-&amp;gt;applySubscriptionSuspended($event), }; } private function applySubscriptionCreated(SubscriptionCreated $event): void { $this-&amp;gt;id = $event-&amp;gt;subscriptionId; $this-&amp;gt;status = SubscriptionStatus::PENDING; $this-&amp;gt;nextBillingDate = $event-&amp;gt;createdAt-&amp;gt;add($event-&amp;gt;billingCycle-&amp;gt;interval()); } private function applySubscriptionActivated(SubscriptionActivated $event): void { $this-&amp;gt;status = SubscriptionStatus::ACTIVE; $this-&amp;gt;nextBillingDate = $event-&amp;gt;nextBillingDate; } private function applyPaymentProcessed(PaymentProcessed $event): void { $this-&amp;gt;payments[] = $event-&amp;gt;paymentId; $this-&amp;gt;nextBillingDate = $this-&amp;gt;nextBillingDate-&amp;gt;add($this-&amp;gt;billingCycle-&amp;gt;interval()); } private function applySubscriptionSuspended(SubscriptionSuspended $event): void { $this-&amp;gt;status = SubscriptionStatus::SUSPENDED; }}&lt;/code&gt;## üéØ &lt;strong&gt;Avantages de l&amp;rsquo;Event Sourcing&lt;/strong&gt;### &lt;strong&gt;1. Tra√ßabilit√© Compl√®te&lt;/strong&gt;- &lt;strong&gt;Historique complet&lt;/strong&gt; : Tous les changements sont enregistr√©s- &lt;strong&gt;Audit trail&lt;/strong&gt; : Qui a fait quoi et quand- &lt;strong&gt;Debugging&lt;/strong&gt; : Possibilit√© de rejouer l&amp;rsquo;historique### &lt;strong&gt;2. Flexibilit√© Temporelle&lt;/strong&gt;- &lt;strong&gt;Time travel&lt;/strong&gt; : Voir l&amp;rsquo;√©tat √† n&amp;rsquo;importe quel moment- &lt;strong&gt;Replay&lt;/strong&gt; : Rejouer les √©v√©nements pour tester- &lt;strong&gt;Debugging&lt;/strong&gt; : Comprendre comment on est arriv√© √† un √©tat### &lt;strong&gt;3. √âvolutivit√©&lt;/strong&gt;- &lt;strong&gt;Nouvelles projections&lt;/strong&gt; : Cr√©er de nouvelles vues sans modifier le code existant- &lt;strong&gt;Migration&lt;/strong&gt; : Faciliter les migrations de donn√©es- &lt;strong&gt;Analytics&lt;/strong&gt; : Analyser l&amp;rsquo;historique des √©v√©nements### &lt;strong&gt;4. Coh√©rence √âv√©nementielle&lt;/strong&gt;- &lt;strong&gt;Source de v√©rit√© unique&lt;/strong&gt; : Les √©v√©nements sont la seule source de v√©rit√©- &lt;strong&gt;Int√©grit√©&lt;/strong&gt; : Impossible de corrompre l&amp;rsquo;historique- &lt;strong&gt;R√©conciliation&lt;/strong&gt; : Possibilit√© de d√©tecter les incoh√©rences## üîß &lt;strong&gt;Impl√©mentation dans Gyroscops&lt;/strong&gt;### &lt;strong&gt;Structure des Dossiers&lt;/strong&gt;&lt;code&gt;src/Accounting/‚îú‚îÄ‚îÄ Domain/‚îÇ ‚îú‚îÄ‚îÄ Events/‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ SubscriptionCreated.php‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ SubscriptionActivated.php‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ PaymentProcessed.php‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ SubscriptionSuspended.php‚îÇ ‚îú‚îÄ‚îÄ Subscription.php‚îÇ ‚îî‚îÄ‚îÄ EventStore.php‚îú‚îÄ‚îÄ Infrastructure/‚îÇ ‚îú‚îÄ‚îÄ EventStore/‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ DoctrineEventStore.php‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ EventStoreRepository.php‚îÇ ‚îî‚îÄ‚îÄ Projections/‚îÇ ‚îú‚îÄ‚îÄ SubscriptionProjection.php‚îÇ ‚îî‚îÄ‚îÄ PaymentProjection.php‚îî‚îÄ‚îÄ Application/ ‚îú‚îÄ‚îÄ Command/ ‚îÇ ‚îî‚îÄ‚îÄ ActivateSubscription/ ‚îî‚îÄ‚îÄ Query/ ‚îî‚îÄ‚îÄ GetSubscriptionHistory/&lt;/code&gt;### &lt;strong&gt;Event Store&lt;/strong&gt;&lt;code&gt;phpinterface EventStore{ public function append(StreamId $streamId, array $events, int $expectedVersion): void; public function getEvents(StreamId $streamId): array; public function getEventsFromVersion(StreamId $streamId, int $fromVersion): array;}class DoctrineEventStore implements EventStore{ public function append(StreamId $streamId, array $events, int $expectedVersion): void { $this-&amp;gt;entityManager-&amp;gt;transactional(function () use ($streamId, $events, $expectedVersion) { // V√©rifier la version attendue $currentVersion = $this-&amp;gt;getCurrentVersion($streamId); if ($currentVersion !== $expectedVersion) { throw new ConcurrencyException('Version mismatch'); } // Enregistrer les √©v√©nements foreach ($events as $event) { $this-&amp;gt;persistEvent($streamId, $event); } }); } public function getEvents(StreamId $streamId): array { return $this-&amp;gt;eventRepository-&amp;gt;findByStreamId($streamId); }}&lt;/code&gt;### &lt;strong&gt;Projections&lt;/strong&gt;&lt;code&gt;phpclass SubscriptionProjection{ public function __construct( private SubscriptionQueryRepository $queryRepository ) {} public function handle(DomainEvent $event): void { match ($event::class) { SubscriptionCreated::class =&amp;gt; $this-&amp;gt;handleSubscriptionCreated($event), SubscriptionActivated::class =&amp;gt; $this-&amp;gt;handleSubscriptionActivated($event), PaymentProcessed::class =&amp;gt; $this-&amp;gt;handlePaymentProcessed($event), }; } private function handleSubscriptionCreated(SubscriptionCreated $event): void { $this-&amp;gt;queryRepository-&amp;gt;createSubscriptionView( $event-&amp;gt;subscriptionId, $event-&amp;gt;planId, $event-&amp;gt;customerId, SubscriptionStatus::PENDING, $event-&amp;gt;createdAt ); } private function handleSubscriptionActivated(SubscriptionActivated $event): void { $this-&amp;gt;queryRepository-&amp;gt;updateSubscriptionStatus( $event-&amp;gt;subscriptionId, SubscriptionStatus::ACTIVE, $event-&amp;gt;nextBillingDate ); }}&lt;/code&gt;## üöÄ &lt;strong&gt;Patterns Avanc√©s avec Event Sourcing&lt;/strong&gt;### &lt;strong&gt;1. Snapshots&lt;/strong&gt;&lt;code&gt;phpclass SubscriptionSnapshot{ public function __construct( public readonly SubscriptionId $id, public readonly SubscriptionStatus $status, public readonly DateTime $nextBillingDate, public readonly int $version ) {}}class SnapshotService{ public function createSnapshot(Subscription $subscription): SubscriptionSnapshot { return new SubscriptionSnapshot( $subscription-&amp;gt;id(), $subscription-&amp;gt;status(), $subscription-&amp;gt;nextBillingDate(), $subscription-&amp;gt;version() ); } public function restoreFromSnapshot(SubscriptionSnapshot $snapshot, array $events): Subscription { $subscription = Subscription::fromSnapshot($snapshot); // Appliquer seulement les √©v√©nements apr√®s le snapshot $eventsAfterSnapshot = array_filter( $events, fn($event) =&amp;gt; $event-&amp;gt;version() &amp;gt; $snapshot-&amp;gt;version ); foreach ($eventsAfterSnapshot as $event) { $subscription-&amp;gt;apply($event); } return $subscription; }}&lt;/code&gt;### &lt;strong&gt;2. Event Sourcing + CQRS&lt;/strong&gt;- &lt;strong&gt;Command Side&lt;/strong&gt; : G√®re les √©v√©nements et l&amp;rsquo;event store- &lt;strong&gt;Query Side&lt;/strong&gt; : Lit depuis les projections### &lt;strong&gt;3. Event Sourcing + API Platform&lt;/strong&gt;- &lt;strong&gt;Ressources&lt;/strong&gt; : Exposer les √©v√©nements via l&amp;rsquo;API- &lt;strong&gt;Validation&lt;/strong&gt; : Valider les √©v√©nements avant stockage## ‚ö° &lt;strong&gt;Performance et Optimisation&lt;/strong&gt;### &lt;strong&gt;Optimisations de l&amp;rsquo;Event Store&lt;/strong&gt;- &lt;strong&gt;Indexation&lt;/strong&gt; : Index sur stream_id et version- &lt;strong&gt;Partitioning&lt;/strong&gt; : Partitionner par stream_id- &lt;strong&gt;Compression&lt;/strong&gt; : Compresser les anciens √©v√©nements### &lt;strong&gt;Optimisations des Projections&lt;/strong&gt;- &lt;strong&gt;Snapshots&lt;/strong&gt; : Cr√©er des snapshots r√©guliers- &lt;strong&gt;Projections asynchrones&lt;/strong&gt; : Traiter les projections en arri√®re-plan- &lt;strong&gt;Cache&lt;/strong&gt; : Mettre en cache les projections fr√©quentes## üéØ &lt;strong&gt;Quand Utiliser l&amp;rsquo;Event Sourcing ?&lt;/strong&gt;### &lt;strong&gt;‚úÖ Cas d&amp;rsquo;Usage Appropri√©s&lt;/strong&gt;- &lt;strong&gt;Audit critique&lt;/strong&gt; : Besoin de tra√ßabilit√© compl√®te- &lt;strong&gt;Compliance&lt;/strong&gt; : R√©glementations strictes- &lt;strong&gt;Analytics&lt;/strong&gt; : Besoin d&amp;rsquo;analyser l&amp;rsquo;historique- &lt;strong&gt;Debugging complexe&lt;/strong&gt; : Syst√®mes complexes √† d√©boguer### &lt;strong&gt;‚ùå Cas d&amp;rsquo;Usage Inappropri√©s&lt;/strong&gt;- &lt;strong&gt;Applications simples&lt;/strong&gt; : CRUD basique- &lt;strong&gt;Performance critique&lt;/strong&gt; : Besoins de performance extr√™me- &lt;strong&gt;√âquipe inexp√©riment√©e&lt;/strong&gt; : Complexit√© √©lev√©e- &lt;strong&gt;Prototypage&lt;/strong&gt; : D√©veloppement rapide## üîÑ &lt;strong&gt;Migration vers Event Sourcing&lt;/strong&gt;### &lt;strong&gt;√âtape 1 : Identifier les √âv√©nements M√©tier&lt;/strong&gt;- Lister tous les changements d&amp;rsquo;√©tat- Grouper par contexte m√©tier### &lt;strong&gt;√âtape 2 : Cr√©er l&amp;rsquo;Event Store&lt;/strong&gt;- Choisir la technologie de stockage- Impl√©menter les interfaces### &lt;strong&gt;√âtape 3 : Migrer les Agr√©gats&lt;/strong&gt;- Convertir les entit√©s en √©v√©nements- Impl√©menter la reconstruction### &lt;strong&gt;√âtape 4 : Cr√©er les Projections&lt;/strong&gt;- Cr√©er les vues de lecture- Impl√©menter la synchronisation## üìä &lt;strong&gt;M√©triques et Monitoring&lt;/strong&gt;### &lt;strong&gt;M√©triques Event Store&lt;/strong&gt;- Nombre d&amp;rsquo;√©v√©nements par seconde- Taille des streams- Temps de reconstruction### &lt;strong&gt;M√©triques Projections&lt;/strong&gt;- D√©lai de traitement des √©v√©nements- Taille des projections- Performance des requ√™tes## üéØ &lt;strong&gt;Prochaines √âtapes&lt;/strong&gt;Maintenant que vous comprenez l&amp;rsquo;Event Sourcing, explorez :1. &lt;strong&gt;&lt;a href="/concept/cqrs/"&gt;CQRS&lt;/a&gt;&lt;/strong&gt; : S√©parer les commandes des requ√™tes2. &lt;strong&gt;&lt;a href="/concept/repositories/"&gt;Repositories&lt;/a&gt;&lt;/strong&gt; : Patterns de persistance3. &lt;strong&gt;&lt;a href="/chapitres/optionnels/chapitre-11-event-sourcing/"&gt;Impl√©mentation Event Sourcing&lt;/a&gt;&lt;/strong&gt; : Guide d&amp;rsquo;impl√©mentation complet&amp;mdash;&lt;em&gt;Event Sourcing transforme la fa√ßon dont nous pensons la persistance. Dans Gyroscops, il nous a permis de g√©rer la complexit√© m√©tier tout en gardant une tra√ßabilit√© compl√®te de tous les changements.&lt;/em&gt; &lt;a href="#-quest-ce-que-levent-sourcing-event-sourcing-est-un-pattern-architectural-qui-stocke-les-%c3%a9v%c3%a9nements-m%c3%a9tier-comme-source-de-v%c3%a9rit%c3%a9-plut%c3%b4t-que-l%c3%a9tat-actuel-des-entit%c3%a9s-le-principe-fondamental-l%c3%a9tat-dune-entit%c3%a9-est-la-cons%c3%a9quence-de-tous-les-%c3%a9v%c3%a9nements-qui-lui-sont-arriv%c3%a9sau-lieu-de-stocker-l%c3%a9tat-actuel-on-stocke---tous-les-%c3%a9v%c3%a9nements-qui-ont-modifi%c3%a9-lentit%c3%a9--l-de-ces-%c3%a9v%c3%a9nements--les-m%c3%a9tadonn%c3%a9es-associ%c3%a9es-%c3%a0-chaque-%c3%a9v%c3%a9nement--event-sourcing-dans-gyroscops-contexte-m%c3%a9tier--gestion-des-abonnementsdans-gyroscops-un-abonnement-passe-par-plusieurs-%c3%a9tats--%c3%a9v%c3%a9nements-m%c3%a9tierphp-%c3%a9v%c3%a9nement--abonnement-cr%c3%a9%c3%a9class-subscriptioncreated-implements-domainevent----public-function-__construct--------public-readonly-subscriptionid-subscriptionid--------public-readonly-planid-planid--------public-readonly-customerid-customerid--------public-readonly-datetime-createdat--------public-readonly-billingcycle-billingcycle------%c3%a9v%c3%a9nement--abonnement-activ%c3%a9class-subscriptionactivated-implements-domainevent----public-function-__construct--------public-readonly-subscriptionid-subscriptionid--------public-readonly-datetime-activatedat--------public-readonly-datetime-nextbillingdate------%c3%a9v%c3%a9nement--paiement-trait%c3%a9class-paymentprocessed-implements-domainevent----public-function-__construct--------public-readonly-subscriptionid-subscriptionid--------public-readonly-paymentid-paymentid--------public-readonly-amount-amount--------public-readonly-datetime-processedat------%c3%a9v%c3%a9nement--abonnement-suspenduclass-subscriptionsuspended-implements-domainevent----public-function-__construct--------public-readonly-subscriptionid-subscriptionid--------public-readonly-string-reason--------public-readonly-datetime-suspendedat------reconstruction-de-lphpclass-subscription----private-subscriptionid-id----private-subscriptionstatus-status----private-datetime-nextbillingdate----private-array-payments----------public-static-function-fromeventsarray-events-self------------subscription--new-self----------------foreach-events-as-event-------------subscription-applyevent------------------------return-subscription------------private-function-applydomainevent-event-void------------match-eventclass-------------subscriptioncreatedclass--this-applysubscriptioncreatedevent------------subscriptionactivatedclass--this-applysubscriptionactivatedevent------------paymentprocessedclass--this-applypaymentprocessedevent------------subscriptionsuspendedclass--this-applysubscriptionsuspendedevent--------------------private-function-applysubscriptioncreatedsubscriptioncreated-event-void------------this-id--event-subscriptionid--------this-status--subscriptionstatuspending--------this-nextbillingdate--event-createdat-addevent-billingcycle-interval------------private-function-applysubscriptionactivatedsubscriptionactivated-event-void------------this-status--subscriptionstatusactive--------this-nextbillingdate--event-nextbillingdate------------private-function-applypaymentprocessedpaymentprocessed-event-void------------this-payments--event-paymentid--------this-nextbillingdate--this-nextbillingdate-addthis-billingcycle-interval------------private-function-applysubscriptionsuspendedsubscriptionsuspended-event-void------------this-status--subscriptionstatussuspended------avantages-de-l-1-tra%c3%a7abilit%c3%a9-compl%c3%a8te--historique-complet--tous-les-changements-sont-enregistr%c3%a9s--audit-trail--qui-a-fait-quoi-et-quand--debugging--possibilit%c3%a9-de-rejouer-lhistorique-2-flexibilit%c3%a9-temporelle--time-travel--voir-l%c3%a9tat-%c3%a0-nimporte-quel-moment--replay--rejouer-les-%c3%a9v%c3%a9nements-pour-tester--debugging--comprendre-comment-on-est-arriv%c3%a9-%c3%a0-un-%c3%a9tat-3-%c3%a9volutivit%c3%a9--nouvelles-projections--cr%c3%a9er-de-nouvelles-vues-sans-modifier-le-code-existant--migration--faciliter-les-migrations-de-donn%c3%a9es--analytics--analyser-lhistorique-des-%c3%a9v%c3%a9nements-4-coh%c3%a9rence-%c3%a9v%c3%a9nementielle--source-de-v%c3%a9rit%c3%a9-unique--les-%c3%a9v%c3%a9nements-sont-la-seule-source-de-v%c3%a9rit%c3%a9--int%c3%a9grit%c3%a9--impossible-de-corrompre-lhistorique--r%c3%a9conciliation--possibilit%c3%a9-de-d%c3%a9tecter-les-incoh%c3%a9rences--impl%c3%a9mentation-dans-gyroscops-structure-des-dossierssrcaccounting-domain----events-------subscriptioncreatedphp-------subscriptionactivatedphp-------paymentprocessedphp-------subscriptionsuspendedphp----subscriptionphp----eventstorephp-infrastructure----eventstore-------doctrineeventstorephp-------eventstorerepositoryphp----projections--------subscriptionprojectionphp--------paymentprojectionphp-application-----command--------activatesubscription-----query---------getsubscriptionhistory-event-storephpinterface-eventstore----public-function-appendstreamid-streamid-array-events-int-expectedversion-void----public-function-geteventsstreamid-streamid-array----public-function-geteventsfromversionstreamid-streamid-int-fromversion-arrayclass-doctrineeventstore-implements-eventstore----public-function-appendstreamid-streamid-array-events-int-expectedversion-void------------this-entitymanager-transactionalfunction--use-streamid-events-expectedversion--------------v%c3%a9rifier-la-version-attendue------------currentversion--this-getcurrentversionstreamid------------if-currentversion--expectedversion-----------------throw-new-concurrencyexceptionversion-mismatch-------------------------------------enregistrer-les-%c3%a9v%c3%a9nements------------foreach-events-as-event-----------------this-persisteventstreamid-event--------------------------------public-function-geteventsstreamid-streamid-array------------return-this-eventrepository-findbystreamidstreamid-----projectionsphpclass-subscriptionprojection----public-function-__construct--------private-subscriptionqueryrepository-queryrepository-------------public-function-handledomainevent-event-void------------match-eventclass-------------subscriptioncreatedclass--this-handlesubscriptioncreatedevent------------subscriptionactivatedclass--this-handlesubscriptionactivatedevent------------paymentprocessedclass--this-handlepaymentprocessedevent--------------------private-function-handlesubscriptioncreatedsubscriptioncreated-event-void------------this-queryrepository-createsubscriptionview------------event-subscriptionid------------event-planid------------event-customerid------------subscriptionstatuspending------------event-createdat--------------------private-function-handlesubscriptionactivatedsubscriptionactivated-event-void------------this-queryrepository-updatesubscriptionstatus------------event-subscriptionid------------subscriptionstatusactive------------event-nextbillingdate--------------patterns-avanc%c3%a9s-avec-event-sourcing-1-snapshotsphpclass-subscriptionsnapshot----public-function-__construct--------public-readonly-subscriptionid-id--------public-readonly-subscriptionstatus-status--------public-readonly-datetime-nextbillingdate--------public-readonly-int-version-----class-snapshotservice----public-function-createsnapshotsubscription-subscription-subscriptionsnapshot------------return-new-subscriptionsnapshot------------subscription-id------------subscription-status------------subscription-nextbillingdate------------subscription-version--------------------public-function-restorefromsnapshotsubscriptionsnapshot-snapshot-array-events-subscription------------subscription--subscriptionfromsnapshotsnapshot-----------------appliquer-seulement-les-%c3%a9v%c3%a9nements-apr%c3%a8s-le-snapshot--------eventsaftersnapshot--array_filter------------events------------fnevent--event-version--snapshot-version------------------------foreach-eventsaftersnapshot-as-event-------------subscription-applyevent------------------------return-subscription-----2-event-sourcing--cqrs--command-side--g%c3%a8re-les-%c3%a9v%c3%a9nements-et-levent-store--query-side--lit-depuis-les-projections-3-event-sourcing--api-platform--ressources--exposer-les-%c3%a9v%c3%a9nements-via-lapi--validation--valider-les-%c3%a9v%c3%a9nements-avant-stockage--performance-et-optimisation-optimisations-de-l--indexation--index-sur-stream_id-et-version--partitioning--partitionner-par-stream_id--compression--compresser-les-anciens-%c3%a9v%c3%a9nements-optimisations-des-projections--snapshots--cr%c3%a9er-des-snapshots-r%c3%a9guliers--projections-asynchrones--traiter-les-projections-en-arri%c3%a8re-plan--cache--mettre-en-cache-les-projections-fr%c3%a9quentes--quand-utiliser-l--cas-d--audit-critique--besoin-de-tra%c3%a7abilit%c3%a9-compl%c3%a8te--compliance--r%c3%a9glementations-strictes--analytics--besoin-danalyser-lhistorique--debugging-complexe--syst%c3%a8mes-complexes-%c3%a0-d%c3%a9boguer--cas-d--applications-simples--crud-basique--performance-critique--besoins-de-performance-extr%c3%aame--%c3%a9quipe-inexp%c3%a9riment%c3%a9e--complexit%c3%a9-%c3%a9lev%c3%a9e--prototypage--d%c3%a9veloppement-rapide--migration-vers-event-sourcing-%c3%a9tape-1--identifier-les-%c3%a9v%c3%a9nements-m%c3%a9tier--lister-tous-les-changements-d%c3%a9tat--grouper-par-contexte-m%c3%a9tier-%c3%a9tape-2--cr%c3%a9er-l--choisir-la-technologie-de-stockage--impl%c3%a9menter-les-interfaces-%c3%a9tape-3--migrer-les-agr%c3%a9gats--convertir-les-entit%c3%a9s-en-%c3%a9v%c3%a9nements--impl%c3%a9menter-la-reconstruction-%c3%a9tape-4--cr%c3%a9er-les-projections--cr%c3%a9er-les-vues-de-lecture--impl%c3%a9menter-la-synchronisation--m%c3%a9triques-et-monitoring-m%c3%a9triques-event-store--nombre-d%c3%a9v%c3%a9nements-par-seconde--taille-des-streams--temps-de-reconstruction-m%c3%a9triques-projections--d%c3%a9lai-de-traitement-des-%c3%a9v%c3%a9nements--taille-des-projections--performance-des-requ%c3%aates--prochaines-%c3%a9tapesmaintenant-que-vous-comprenez-levent-sourcing-explorez-1-cqrs--s%c3%a9parer-les-commandes-des-requ%c3%aates2-repositories--patterns-de-persistance3-impl%c3%a9mentation-event-sourcing--guide-dimpl%c3%a9mentation-completevent-sourcing-transforme-la-fa%c3%a7on-dont-nous-pensons-la-persistance-dans-gyroscops-il-nous-a-permis-de-g%c3%a9rer-la-complexit%c3%a9-m%c3%a9tier-tout-en-gardant-une-tra%c3%a7abilit%c3%a9-compl%c3%a8te-de-tous-les-changements" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;</description></item><item><title>Repositories - Patterns de Persistance</title><link>/patterns/repositories/</link><pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate><guid>/patterns/repositories/</guid><description>&lt;h2 id="-quest-ce-quun-repository-un-repository-est-un-pattern-qui-encapsule-la-logique-dacc√®s-aux-donn√©es-fournissant-une-interface-orient√©e-objet-pour-acc√©der-√†-la-couche-de-persistance-le-principe-fondamental----eric-evansle-repository---abstrait-la-persistance-des-donn√©es--encapsule-la-logique-dacc√®s-aux-donn√©es--fournit-une-interface-m√©tier-claire--cache-la-complexit√©-de-la-persistance--repositories-dans-gyroscops-contexte-m√©tier--gestion-des-utilisateursdans-gyroscops-nous-g√©rons-des-utilisateurs-avec-diff√©rents-besoins-dacc√®s--interface-repositoryphpinterface-userrepository----public-function-saveuser-user-void----public-function-findbyiduserid-id-user----public-function-findbyemailemail-email-user----public-function-findbyorganizationorganizationid-organizationid-array----public-function-deleteuserid-id-void----public-function-existsuserid-id-bool-impl√©mentation-doctrinephpclass-doctrineuserrepository-implements-userrepository----public-function-__construct--------private-entitymanagerinterface-entitymanager-------------public-function-saveuser-user-void------------this-entitymanager-persistuser--------this-entitymanager-flush------------public-function-findbyiduserid-id-user------------return-this-entitymanager-------------getrepositoryuserclass-------------findid-value------------public-function-findbyemailemail-email-user------------return-this-entitymanager-------------getrepositoryuserclass-------------findonebyemail--email-value------------public-function-findbyorganizationorganizationid-organizationid-array------------return-this-entitymanager-------------getrepositoryuserclass-------------findbyorganizationid--organizationid-value------------public-function-deleteuserid-id-void------------user--this-findbyidid--------if-user-------------this-entitymanager-removeuser------------this-entitymanager-flush--------------------public-function-existsuserid-id-bool------------return-this-entitymanager-------------getrepositoryuserclass-------------countid--id-value--0------types-de-repositories-1-repository-de-commande-writephpinterface-paymentcommandrepository----public-function-savepayment-payment-void----public-function-findbyidpaymentid-id-payment----public-function-deletepaymentid-id-voidclass-doctrinepaymentcommandrepository-implements-paymentcommandrepository----public-function-savepayment-payment-void------------this-entitymanager-persistpayment--------this-entitymanager-flush------------public-function-findbyidpaymentid-id-payment------------return-this-entitymanager-------------getrepositorypaymentclass-------------findid-value-----2-repository-de-requ√™te-readphpinterface-paymentqueryrepository----public-function-findpaymentdetailspaymentid-id-paymentdetailsview----public-function-findpaymentsbycustomercustomerid-customerid-array----public-function-findpaymentsbydaterangedaterange-daterange-array----public-function-findpendingpayments-arrayclass-doctrinepaymentqueryrepository-implements-paymentqueryrepository----public-function-findpaymentdetailspaymentid-id-paymentdetailsview------------result--this-entitymanager-------------createquery----------------select-pid-pamount-pstatus-pcreatedat-----------------------cname-as-customername-sname-as-subscriptionname----------------from-payment-p----------------join-pcustomer-c----------------join-psubscription-s----------------where-pid--id-------------------------setparameterid-id-value-------------getoneornullresult--------------------return-result--paymentdetailsviewfromarrayresult--null------------public-function-findpaymentsbycustomercustomerid-customerid-array------------return-this-entitymanager-------------createquery----------------select-pid-pamount-pstatus-pcreatedat----------------from-payment-p----------------where-pcustomerid--customerid----------------order-by-pcreatedat-desc-------------------------setparametercustomerid-customerid-value-------------getresult-----3-repository-sp√©cialis√©phpinterface-paymentanalyticsrepository----public-function-getmonthlyrevenueint-year-int-month-amount----public-function-getpaymenttrendsdaterange-daterange-array----public-function-gettopcustomersint-limit-arrayclass-elasticsearchpaymentanalyticsrepository-implements-paymentanalyticsrepository----public-function-getmonthlyrevenueint-year-int-month-amount------------query--------------query------------------bool----------------------must--------------------------term--status--completed------------------------range--createdat------------------------------gte--year-month-01----------------------------lt--year---month--1---01------------------------------------------------------------------------------------aggs------------------total_revenue----------------------sum--field--amount----------------------------------------------------result--this-elasticsearch-searchquery--------return-new-amountresultaggregationstotal_revenuevalue------patterns-avanc√©s-de-repository-1-repository-avec-sp√©cificationsphpinterface-specification----public-function-issatisfiedbyentity-bool----public-function-toquerybuilderquerybuilder-qb-querybuilderclass-userbyorganizationspecification-implements-specification----public-function-__construct--------private-organizationid-organizationid-------------public-function-issatisfiedbyentity-bool------------return-entity-instanceof-user-----------------entity-organizationid-equalsthis-organizationid------------public-function-toquerybuilderquerybuilder-qb-querybuilder------------return-qb-andwhereuorganizationid--organizationid-------------------setparameterorganizationid-this-organizationid-value----interface-userrepository----public-function-findbyspecificationspecification-spec-array----public-function-countbyspecificationspecification-spec-intclass-doctrineuserrepository-implements-userrepository----public-function-findbyspecificationspecification-spec-array------------qb--this-entitymanager-createquerybuilder-------------selectu-------------fromuserclass-u--------------------return-spec-toquerybuilderqb-getquery-getresult-----2-repository-avec-cachephpclass-cacheduserrepository-implements-userrepository----public-function-__construct--------private-userrepository-decorated--------private-cacheinterface-cache-------------public-function-findbyiduserid-id-user------------cachekey--user_id-value----------------return-this-cache-getcachekey-function--use-id-------------return-this-decorated-findbyidid--------------------public-function-saveuser-user-void------------this-decorated-saveuser-----------------invalider-le-cache--------this-cache-deleteuser_user-id-value-----3-repository-avec-event-sourcingphpinterface-eventstore----public-function-appendstreamid-streamid-array-events-void----public-function-geteventsstreamid-streamid-arrayclass-eventsourceduserrepository-implements-userrepository----public-function-__construct--------private-eventstore-eventstore-------------public-function-saveuser-user-void------------events--user-getuncommittedevents--------streamid--streamidfromuseriduser-id----------------this-eventstore-appendstreamid-events--------user-markeventsascommitted------------public-function-findbyiduserid-id-user------------streamid--streamidfromuseridid--------events--this-eventstore-geteventsstreamid----------------if-emptyevents-------------return-null------------------------return-userfromeventsevents------repositories-multi-sources-repository-avec-fallbackphpclass-fallbackuserrepository-implements-userrepository----public-function-__construct--------private-userrepository-primary--------private-userrepository-fallback-------------public-function-findbyiduserid-id-user------------try-------------return-this-primary-findbyidid---------catch-exception-e-------------this-logger-warningprimary-repository-failed-using-fallback-----------------error--e-getmessage----------------userid--id-value------------------------------------return-this-fallback-findbyidid-------------repository-avec-routingphpclass-routeduserrepository-implements-userrepository----public-function-__construct--------private-userrepository-sqlrepository--------private-userrepository-mongorepository-------------public-function-findbyiduserid-id-user-------------route-bas√©e-sur-lid--------if-this-shouldusemongoid-------------return-this-mongorepository-findbyidid------------------------return-this-sqlrepository-findbyidid------------private-function-shouldusemongouserid-id-bool-------------logique-de-routing-ex-utilisateurs-r√©cents-en-mongodb--------return-id-value--1000000------performance-et-optimisation-optimisations-de-requ√™tephpclass-optimizeduserrepository-implements-userrepository----public-function-findbyorganizationorganizationid-organizationid-array-------------utiliser-des-requ√™tes-optimis√©es--------return-this-entitymanager-------------createquery----------------select-uid-uemail-ufirstname-ulastname----------------from-user-u----------------where-uorganizationid--organizationid----------------and-ustatus--status-------------------------setparameterorganizationid-organizationid-value-------------setparameterstatus-userstatusactive-------------setmaxresults100--limiter-les-r√©sultats-------------getresult-----optimisations-de-cachephpclass-smartcacheduserrepository-implements-userrepository----public-function-findbyorganizationorganizationid-organizationid-array------------cachekey--users_org_organizationid-value----------------return-this-cache-getcachekey-function--use-organizationid-------------users--this-decorated-findbyorganizationorganizationid-------------------------cache-individuel-pour-chaque-utilisateur------------foreach-users-as-user-----------------this-cache-setuser_user-id-value-user-3600------------------------------------return-users---------1800--ttl-de-30-minutes------quand-utiliser-les-repositories---cas-d--abstraction-de-persistance--changer-de-technologie-de-stockage--tests-unitaires--mocker-facilement-lacc√®s-aux-donn√©es--logique-m√©tier-complexe--encapsuler-la-logique-dacc√®s--performance--optimiser-les-requ√™tes--cas-d--applications-simples--crud-basique--over-engineering--complexit√©-inutile--performance-critique--overhead-des-abstractions--prototypage--d√©veloppement-rapide--migration-vers-les-repositories-√©tape-1--identifier-les-acc√®s-aux-donn√©es--lister-tous-les-acc√®s-aux-donn√©es--grouper-par-entit√©-m√©tier-√©tape-2--cr√©er-les-interfaces--d√©finir-les-contrats-repository--sp√©cifier-les-m√©thodes-n√©cessaires-√©tape-3--impl√©menter-les-repositories--cr√©er-les-impl√©mentations--migrer-progressivement-√©tape-4--optimiser--ajouter-le-cache-si-n√©cessaire--optimiser-les-requ√™tes--m√©triques-et-monitoring-m√©triques-repository--temps-de-r√©ponse-des-requ√™tes--taux-de-cache-hit--nombre-de-requ√™tes-par-seconde-m√©triques-de-performance--temps-de-traitement-des-requ√™tes-complexes--utilisation-m√©moire--charge-des-bases-de-donn√©es--prochaines-√©tapesmaintenant-que-vous-comprenez-les-repositories-explorez-1-cqrs--s√©parer-les-commandes-des-requ√™tes2-event-sourcing--stocker-les-√©v√©nements-comme-source-de-v√©rit√©3-impl√©mentation-repositories--guide-dimpl√©mentation-completles-repositories-sont-la-pierre-angulaire-d"&gt;üåü **Qu&amp;rsquo;est-ce qu&amp;rsquo;un Repository ?**Un &lt;strong&gt;Repository&lt;/strong&gt; est un pattern qui encapsule la logique d&amp;rsquo;acc√®s aux donn√©es, fournissant une interface orient√©e objet pour acc√©der √† la couche de persistance.### &lt;strong&gt;Le Principe Fondamental&lt;/strong&gt;&amp;gt; &lt;strong&gt;&amp;ldquo;Un Repository repr√©sente une collection d&amp;rsquo;objets en m√©moire&amp;rdquo;&lt;/strong&gt; - Eric EvansLe Repository :- &lt;strong&gt;Abstrait&lt;/strong&gt; la persistance des donn√©es- &lt;strong&gt;Encapsule&lt;/strong&gt; la logique d&amp;rsquo;acc√®s aux donn√©es- &lt;strong&gt;Fournit&lt;/strong&gt; une interface m√©tier claire- &lt;strong&gt;Cache&lt;/strong&gt; la complexit√© de la persistance## üèóÔ∏è &lt;strong&gt;Repositories dans Gyroscops&lt;/strong&gt;### &lt;strong&gt;Contexte M√©tier : Gestion des Utilisateurs&lt;/strong&gt;Dans Gyroscops, nous g√©rons des utilisateurs avec diff√©rents besoins d&amp;rsquo;acc√®s :#### &lt;strong&gt;Interface Repository&lt;/strong&gt;&lt;code&gt;phpinterface UserRepository{ public function save(User $user): void; public function findById(UserId $id): ?User; public function findByEmail(Email $email): ?User; public function findByOrganization(OrganizationId $organizationId): array; public function delete(UserId $id): void; public function exists(UserId $id): bool;}&lt;/code&gt;#### &lt;strong&gt;Impl√©mentation Doctrine&lt;/strong&gt;&lt;code&gt;phpclass DoctrineUserRepository implements UserRepository{ public function __construct( private EntityManagerInterface $entityManager ) {} public function save(User $user): void { $this-&amp;gt;entityManager-&amp;gt;persist($user); $this-&amp;gt;entityManager-&amp;gt;flush(); } public function findById(UserId $id): ?User { return $this-&amp;gt;entityManager -&amp;gt;getRepository(User::class) -&amp;gt;find($id-&amp;gt;value()); } public function findByEmail(Email $email): ?User { return $this-&amp;gt;entityManager -&amp;gt;getRepository(User::class) -&amp;gt;findOneBy(['email' =&amp;gt; $email-&amp;gt;value()]); } public function findByOrganization(OrganizationId $organizationId): array { return $this-&amp;gt;entityManager -&amp;gt;getRepository(User::class) -&amp;gt;findBy(['organizationId' =&amp;gt; $organizationId-&amp;gt;value()]); } public function delete(UserId $id): void { $user = $this-&amp;gt;findById($id); if ($user) { $this-&amp;gt;entityManager-&amp;gt;remove($user); $this-&amp;gt;entityManager-&amp;gt;flush(); } } public function exists(UserId $id): bool { return $this-&amp;gt;entityManager -&amp;gt;getRepository(User::class) -&amp;gt;count(['id' =&amp;gt; $id-&amp;gt;value()]) &amp;gt; 0; }}&lt;/code&gt;## üéØ &lt;strong&gt;Types de Repositories&lt;/strong&gt;### &lt;strong&gt;1. Repository de Commande (Write)&lt;/strong&gt;&lt;code&gt;phpinterface PaymentCommandRepository{ public function save(Payment $payment): void; public function findById(PaymentId $id): ?Payment; public function delete(PaymentId $id): void;}class DoctrinePaymentCommandRepository implements PaymentCommandRepository{ public function save(Payment $payment): void { $this-&amp;gt;entityManager-&amp;gt;persist($payment); $this-&amp;gt;entityManager-&amp;gt;flush(); } public function findById(PaymentId $id): ?Payment { return $this-&amp;gt;entityManager -&amp;gt;getRepository(Payment::class) -&amp;gt;find($id-&amp;gt;value()); }}&lt;/code&gt;### &lt;strong&gt;2. Repository de Requ√™te (Read)&lt;/strong&gt;&lt;code&gt;phpinterface PaymentQueryRepository{ public function findPaymentDetails(PaymentId $id): ?PaymentDetailsView; public function findPaymentsByCustomer(CustomerId $customerId): array; public function findPaymentsByDateRange(DateRange $dateRange): array; public function findPendingPayments(): array;}class DoctrinePaymentQueryRepository implements PaymentQueryRepository{ public function findPaymentDetails(PaymentId $id): ?PaymentDetailsView { $result = $this-&amp;gt;entityManager -&amp;gt;createQuery(' SELECT p.id, p.amount, p.status, p.createdAt, c.name as customerName, s.name as subscriptionName FROM Payment p JOIN p.customer c JOIN p.subscription s WHERE p.id = :id ') -&amp;gt;setParameter('id', $id-&amp;gt;value()) -&amp;gt;getOneOrNullResult(); return $result ? PaymentDetailsView::fromArray($result) : null; } public function findPaymentsByCustomer(CustomerId $customerId): array { return $this-&amp;gt;entityManager -&amp;gt;createQuery(' SELECT p.id, p.amount, p.status, p.createdAt FROM Payment p WHERE p.customerId = :customerId ORDER BY p.createdAt DESC ') -&amp;gt;setParameter('customerId', $customerId-&amp;gt;value()) -&amp;gt;getResult(); }}&lt;/code&gt;### &lt;strong&gt;3. Repository Sp√©cialis√©&lt;/strong&gt;&lt;code&gt;phpinterface PaymentAnalyticsRepository{ public function getMonthlyRevenue(int $year, int $month): Amount; public function getPaymentTrends(DateRange $dateRange): array; public function getTopCustomers(int $limit): array;}class ElasticsearchPaymentAnalyticsRepository implements PaymentAnalyticsRepository{ public function getMonthlyRevenue(int $year, int $month): Amount { $query = [ 'query' =&amp;gt; [ 'bool' =&amp;gt; [ 'must' =&amp;gt; [ ['term' =&amp;gt; ['status' =&amp;gt; 'completed']], ['range' =&amp;gt; ['createdAt' =&amp;gt; [ 'gte' =&amp;gt; &amp;quot;$year-$month-01&amp;quot;, 'lt' =&amp;gt; &amp;quot;$year-&amp;quot; . ($month + 1) . &amp;quot;-01&amp;quot; ]]] ] ] ], 'aggs' =&amp;gt; [ 'total_revenue' =&amp;gt; [ 'sum' =&amp;gt; ['field' =&amp;gt; 'amount'] ] ] ]; $result = $this-&amp;gt;elasticsearch-&amp;gt;search($query); return new Amount($result['aggregations']['total_revenue']['value']); }}&lt;/code&gt;## üîß &lt;strong&gt;Patterns Avanc√©s de Repository&lt;/strong&gt;### &lt;strong&gt;1. Repository avec Sp√©cifications&lt;/strong&gt;&lt;code&gt;phpinterface Specification{ public function isSatisfiedBy($entity): bool; public function toQueryBuilder(QueryBuilder $qb): QueryBuilder;}class UserByOrganizationSpecification implements Specification{ public function __construct( private OrganizationId $organizationId ) {} public function isSatisfiedBy($entity): bool { return $entity instanceof User &amp;amp;&amp;amp; $entity-&amp;gt;organizationId()-&amp;gt;equals($this-&amp;gt;organizationId); } public function toQueryBuilder(QueryBuilder $qb): QueryBuilder { return $qb-&amp;gt;andWhere('u.organizationId = :organizationId') -&amp;gt;setParameter('organizationId', $this-&amp;gt;organizationId-&amp;gt;value()); }}interface UserRepository{ public function findBySpecification(Specification $spec): array; public function countBySpecification(Specification $spec): int;}class DoctrineUserRepository implements UserRepository{ public function findBySpecification(Specification $spec): array { $qb = $this-&amp;gt;entityManager-&amp;gt;createQueryBuilder() -&amp;gt;select('u') -&amp;gt;from(User::class, 'u'); return $spec-&amp;gt;toQueryBuilder($qb)-&amp;gt;getQuery()-&amp;gt;getResult(); }}&lt;/code&gt;### &lt;strong&gt;2. Repository avec Cache&lt;/strong&gt;&lt;code&gt;phpclass CachedUserRepository implements UserRepository{ public function __construct( private UserRepository $decorated, private CacheInterface $cache ) {} public function findById(UserId $id): ?User { $cacheKey = &amp;quot;user_{$id-&amp;gt;value()}&amp;quot;; return $this-&amp;gt;cache-&amp;gt;get($cacheKey, function () use ($id) { return $this-&amp;gt;decorated-&amp;gt;findById($id); }); } public function save(User $user): void { $this-&amp;gt;decorated-&amp;gt;save($user); // Invalider le cache $this-&amp;gt;cache-&amp;gt;delete(&amp;quot;user_{$user-&amp;gt;id()-&amp;gt;value()}&amp;quot;); }}&lt;/code&gt;### &lt;strong&gt;3. Repository avec Event Sourcing&lt;/strong&gt;&lt;code&gt;phpinterface EventStore{ public function append(StreamId $streamId, array $events): void; public function getEvents(StreamId $streamId): array;}class EventSourcedUserRepository implements UserRepository{ public function __construct( private EventStore $eventStore ) {} public function save(User $user): void { $events = $user-&amp;gt;getUncommittedEvents(); $streamId = StreamId::fromUserId($user-&amp;gt;id()); $this-&amp;gt;eventStore-&amp;gt;append($streamId, $events); $user-&amp;gt;markEventsAsCommitted(); } public function findById(UserId $id): ?User { $streamId = StreamId::fromUserId($id); $events = $this-&amp;gt;eventStore-&amp;gt;getEvents($streamId); if (empty($events)) { return null; } return User::fromEvents($events); }}&lt;/code&gt;## üöÄ &lt;strong&gt;Repositories Multi-Sources&lt;/strong&gt;### &lt;strong&gt;Repository avec Fallback&lt;/strong&gt;&lt;code&gt;phpclass FallbackUserRepository implements UserRepository{ public function __construct( private UserRepository $primary, private UserRepository $fallback ) {} public function findById(UserId $id): ?User { try { return $this-&amp;gt;primary-&amp;gt;findById($id); } catch (Exception $e) { $this-&amp;gt;logger-&amp;gt;warning('Primary repository failed, using fallback', [ 'error' =&amp;gt; $e-&amp;gt;getMessage(), 'userId' =&amp;gt; $id-&amp;gt;value() ]); return $this-&amp;gt;fallback-&amp;gt;findById($id); } }}&lt;/code&gt;### &lt;strong&gt;Repository avec Routing&lt;/strong&gt;&lt;code&gt;phpclass RoutedUserRepository implements UserRepository{ public function __construct( private UserRepository $sqlRepository, private UserRepository $mongoRepository ) {} public function findById(UserId $id): ?User { // Route bas√©e sur l'ID if ($this-&amp;gt;shouldUseMongo($id)) { return $this-&amp;gt;mongoRepository-&amp;gt;findById($id); } return $this-&amp;gt;sqlRepository-&amp;gt;findById($id); } private function shouldUseMongo(UserId $id): bool { // Logique de routing (ex: utilisateurs r√©cents en MongoDB) return $id-&amp;gt;value() &amp;gt; 1000000; }}&lt;/code&gt;## ‚ö° &lt;strong&gt;Performance et Optimisation&lt;/strong&gt;### &lt;strong&gt;Optimisations de Requ√™te&lt;/strong&gt;&lt;code&gt;phpclass OptimizedUserRepository implements UserRepository{ public function findByOrganization(OrganizationId $organizationId): array { // Utiliser des requ√™tes optimis√©es return $this-&amp;gt;entityManager -&amp;gt;createQuery(' SELECT u.id, u.email, u.firstName, u.lastName FROM User u WHERE u.organizationId = :organizationId AND u.status = :status ') -&amp;gt;setParameter('organizationId', $organizationId-&amp;gt;value()) -&amp;gt;setParameter('status', UserStatus::ACTIVE) -&amp;gt;setMaxResults(100) // Limiter les r√©sultats -&amp;gt;getResult(); }}&lt;/code&gt;### &lt;strong&gt;Optimisations de Cache&lt;/strong&gt;&lt;code&gt;phpclass SmartCachedUserRepository implements UserRepository{ public function findByOrganization(OrganizationId $organizationId): array { $cacheKey = &amp;quot;users_org_{$organizationId-&amp;gt;value()}&amp;quot;; return $this-&amp;gt;cache-&amp;gt;get($cacheKey, function () use ($organizationId) { $users = $this-&amp;gt;decorated-&amp;gt;findByOrganization($organizationId); // Cache individuel pour chaque utilisateur foreach ($users as $user) { $this-&amp;gt;cache-&amp;gt;set(&amp;quot;user_{$user-&amp;gt;id()-&amp;gt;value()}&amp;quot;, $user, 3600); } return $users; }, 1800); // TTL de 30 minutes }}&lt;/code&gt;## üéØ &lt;strong&gt;Quand Utiliser les Repositories ?&lt;/strong&gt;### &lt;strong&gt;‚úÖ Cas d&amp;rsquo;Usage Appropri√©s&lt;/strong&gt;- &lt;strong&gt;Abstraction de persistance&lt;/strong&gt; : Changer de technologie de stockage- &lt;strong&gt;Tests unitaires&lt;/strong&gt; : Mocker facilement l&amp;rsquo;acc√®s aux donn√©es- &lt;strong&gt;Logique m√©tier complexe&lt;/strong&gt; : Encapsuler la logique d&amp;rsquo;acc√®s- &lt;strong&gt;Performance&lt;/strong&gt; : Optimiser les requ√™tes### &lt;strong&gt;‚ùå Cas d&amp;rsquo;Usage Inappropri√©s&lt;/strong&gt;- &lt;strong&gt;Applications simples&lt;/strong&gt; : CRUD basique- &lt;strong&gt;Over-engineering&lt;/strong&gt; : Complexit√© inutile- &lt;strong&gt;Performance critique&lt;/strong&gt; : Overhead des abstractions- &lt;strong&gt;Prototypage&lt;/strong&gt; : D√©veloppement rapide## üîÑ &lt;strong&gt;Migration vers les Repositories&lt;/strong&gt;### &lt;strong&gt;√âtape 1 : Identifier les Acc√®s aux Donn√©es&lt;/strong&gt;- Lister tous les acc√®s aux donn√©es- Grouper par entit√© m√©tier### &lt;strong&gt;√âtape 2 : Cr√©er les Interfaces&lt;/strong&gt;- D√©finir les contrats Repository- Sp√©cifier les m√©thodes n√©cessaires### &lt;strong&gt;√âtape 3 : Impl√©menter les Repositories&lt;/strong&gt;- Cr√©er les impl√©mentations- Migrer progressivement### &lt;strong&gt;√âtape 4 : Optimiser&lt;/strong&gt;- Ajouter le cache si n√©cessaire- Optimiser les requ√™tes## üìä &lt;strong&gt;M√©triques et Monitoring&lt;/strong&gt;### &lt;strong&gt;M√©triques Repository&lt;/strong&gt;- Temps de r√©ponse des requ√™tes- Taux de cache hit- Nombre de requ√™tes par seconde### &lt;strong&gt;M√©triques de Performance&lt;/strong&gt;- Temps de traitement des requ√™tes complexes- Utilisation m√©moire- Charge des bases de donn√©es## üéØ &lt;strong&gt;Prochaines √âtapes&lt;/strong&gt;Maintenant que vous comprenez les Repositories, explorez :1. &lt;strong&gt;&lt;a href="/concept/cqrs/"&gt;CQRS&lt;/a&gt;&lt;/strong&gt; : S√©parer les commandes des requ√™tes2. &lt;strong&gt;&lt;a href="/concept/event-sourcing/"&gt;Event Sourcing&lt;/a&gt;&lt;/strong&gt; : Stocker les √©v√©nements comme source de v√©rit√©3. &lt;strong&gt;&lt;a href="/chapitres/fondamentaux/chapitre-09-repositories-persistance/"&gt;Impl√©mentation Repositories&lt;/a&gt;&lt;/strong&gt; : Guide d&amp;rsquo;impl√©mentation complet&amp;mdash;&lt;em&gt;Les Repositories sont la pierre angulaire d&amp;rsquo;une architecture propre. Dans Gyroscops, ils nous ont permis de s√©parer clairement la logique m√©tier de la persistance, rendant le code plus testable et √©volutif.&lt;/em&gt; &lt;a href="#-quest-ce-quun-repository-un-repository-est-un-pattern-qui-encapsule-la-logique-dacc%c3%a8s-aux-donn%c3%a9es-fournissant-une-interface-orient%c3%a9e-objet-pour-acc%c3%a9der-%c3%a0-la-couche-de-persistance-le-principe-fondamental----eric-evansle-repository---abstrait-la-persistance-des-donn%c3%a9es--encapsule-la-logique-dacc%c3%a8s-aux-donn%c3%a9es--fournit-une-interface-m%c3%a9tier-claire--cache-la-complexit%c3%a9-de-la-persistance--repositories-dans-gyroscops-contexte-m%c3%a9tier--gestion-des-utilisateursdans-gyroscops-nous-g%c3%a9rons-des-utilisateurs-avec-diff%c3%a9rents-besoins-dacc%c3%a8s--interface-repositoryphpinterface-userrepository----public-function-saveuser-user-void----public-function-findbyiduserid-id-user----public-function-findbyemailemail-email-user----public-function-findbyorganizationorganizationid-organizationid-array----public-function-deleteuserid-id-void----public-function-existsuserid-id-bool-impl%c3%a9mentation-doctrinephpclass-doctrineuserrepository-implements-userrepository----public-function-__construct--------private-entitymanagerinterface-entitymanager-------------public-function-saveuser-user-void------------this-entitymanager-persistuser--------this-entitymanager-flush------------public-function-findbyiduserid-id-user------------return-this-entitymanager-------------getrepositoryuserclass-------------findid-value------------public-function-findbyemailemail-email-user------------return-this-entitymanager-------------getrepositoryuserclass-------------findonebyemail--email-value------------public-function-findbyorganizationorganizationid-organizationid-array------------return-this-entitymanager-------------getrepositoryuserclass-------------findbyorganizationid--organizationid-value------------public-function-deleteuserid-id-void------------user--this-findbyidid--------if-user-------------this-entitymanager-removeuser------------this-entitymanager-flush--------------------public-function-existsuserid-id-bool------------return-this-entitymanager-------------getrepositoryuserclass-------------countid--id-value--0------types-de-repositories-1-repository-de-commande-writephpinterface-paymentcommandrepository----public-function-savepayment-payment-void----public-function-findbyidpaymentid-id-payment----public-function-deletepaymentid-id-voidclass-doctrinepaymentcommandrepository-implements-paymentcommandrepository----public-function-savepayment-payment-void------------this-entitymanager-persistpayment--------this-entitymanager-flush------------public-function-findbyidpaymentid-id-payment------------return-this-entitymanager-------------getrepositorypaymentclass-------------findid-value-----2-repository-de-requ%c3%aate-readphpinterface-paymentqueryrepository----public-function-findpaymentdetailspaymentid-id-paymentdetailsview----public-function-findpaymentsbycustomercustomerid-customerid-array----public-function-findpaymentsbydaterangedaterange-daterange-array----public-function-findpendingpayments-arrayclass-doctrinepaymentqueryrepository-implements-paymentqueryrepository----public-function-findpaymentdetailspaymentid-id-paymentdetailsview------------result--this-entitymanager-------------createquery----------------select-pid-pamount-pstatus-pcreatedat-----------------------cname-as-customername-sname-as-subscriptionname----------------from-payment-p----------------join-pcustomer-c----------------join-psubscription-s----------------where-pid--id-------------------------setparameterid-id-value-------------getoneornullresult--------------------return-result--paymentdetailsviewfromarrayresult--null------------public-function-findpaymentsbycustomercustomerid-customerid-array------------return-this-entitymanager-------------createquery----------------select-pid-pamount-pstatus-pcreatedat----------------from-payment-p----------------where-pcustomerid--customerid----------------order-by-pcreatedat-desc-------------------------setparametercustomerid-customerid-value-------------getresult-----3-repository-sp%c3%a9cialis%c3%a9phpinterface-paymentanalyticsrepository----public-function-getmonthlyrevenueint-year-int-month-amount----public-function-getpaymenttrendsdaterange-daterange-array----public-function-gettopcustomersint-limit-arrayclass-elasticsearchpaymentanalyticsrepository-implements-paymentanalyticsrepository----public-function-getmonthlyrevenueint-year-int-month-amount------------query--------------query------------------bool----------------------must--------------------------term--status--completed------------------------range--createdat------------------------------gte--year-month-01----------------------------lt--year---month--1---01------------------------------------------------------------------------------------aggs------------------total_revenue----------------------sum--field--amount----------------------------------------------------result--this-elasticsearch-searchquery--------return-new-amountresultaggregationstotal_revenuevalue------patterns-avanc%c3%a9s-de-repository-1-repository-avec-sp%c3%a9cificationsphpinterface-specification----public-function-issatisfiedbyentity-bool----public-function-toquerybuilderquerybuilder-qb-querybuilderclass-userbyorganizationspecification-implements-specification----public-function-__construct--------private-organizationid-organizationid-------------public-function-issatisfiedbyentity-bool------------return-entity-instanceof-user-----------------entity-organizationid-equalsthis-organizationid------------public-function-toquerybuilderquerybuilder-qb-querybuilder------------return-qb-andwhereuorganizationid--organizationid-------------------setparameterorganizationid-this-organizationid-value----interface-userrepository----public-function-findbyspecificationspecification-spec-array----public-function-countbyspecificationspecification-spec-intclass-doctrineuserrepository-implements-userrepository----public-function-findbyspecificationspecification-spec-array------------qb--this-entitymanager-createquerybuilder-------------selectu-------------fromuserclass-u--------------------return-spec-toquerybuilderqb-getquery-getresult-----2-repository-avec-cachephpclass-cacheduserrepository-implements-userrepository----public-function-__construct--------private-userrepository-decorated--------private-cacheinterface-cache-------------public-function-findbyiduserid-id-user------------cachekey--user_id-value----------------return-this-cache-getcachekey-function--use-id-------------return-this-decorated-findbyidid--------------------public-function-saveuser-user-void------------this-decorated-saveuser-----------------invalider-le-cache--------this-cache-deleteuser_user-id-value-----3-repository-avec-event-sourcingphpinterface-eventstore----public-function-appendstreamid-streamid-array-events-void----public-function-geteventsstreamid-streamid-arrayclass-eventsourceduserrepository-implements-userrepository----public-function-__construct--------private-eventstore-eventstore-------------public-function-saveuser-user-void------------events--user-getuncommittedevents--------streamid--streamidfromuseriduser-id----------------this-eventstore-appendstreamid-events--------user-markeventsascommitted------------public-function-findbyiduserid-id-user------------streamid--streamidfromuseridid--------events--this-eventstore-geteventsstreamid----------------if-emptyevents-------------return-null------------------------return-userfromeventsevents------repositories-multi-sources-repository-avec-fallbackphpclass-fallbackuserrepository-implements-userrepository----public-function-__construct--------private-userrepository-primary--------private-userrepository-fallback-------------public-function-findbyiduserid-id-user------------try-------------return-this-primary-findbyidid---------catch-exception-e-------------this-logger-warningprimary-repository-failed-using-fallback-----------------error--e-getmessage----------------userid--id-value------------------------------------return-this-fallback-findbyidid-------------repository-avec-routingphpclass-routeduserrepository-implements-userrepository----public-function-__construct--------private-userrepository-sqlrepository--------private-userrepository-mongorepository-------------public-function-findbyiduserid-id-user-------------route-bas%c3%a9e-sur-lid--------if-this-shouldusemongoid-------------return-this-mongorepository-findbyidid------------------------return-this-sqlrepository-findbyidid------------private-function-shouldusemongouserid-id-bool-------------logique-de-routing-ex-utilisateurs-r%c3%a9cents-en-mongodb--------return-id-value--1000000------performance-et-optimisation-optimisations-de-requ%c3%aatephpclass-optimizeduserrepository-implements-userrepository----public-function-findbyorganizationorganizationid-organizationid-array-------------utiliser-des-requ%c3%aates-optimis%c3%a9es--------return-this-entitymanager-------------createquery----------------select-uid-uemail-ufirstname-ulastname----------------from-user-u----------------where-uorganizationid--organizationid----------------and-ustatus--status-------------------------setparameterorganizationid-organizationid-value-------------setparameterstatus-userstatusactive-------------setmaxresults100--limiter-les-r%c3%a9sultats-------------getresult-----optimisations-de-cachephpclass-smartcacheduserrepository-implements-userrepository----public-function-findbyorganizationorganizationid-organizationid-array------------cachekey--users_org_organizationid-value----------------return-this-cache-getcachekey-function--use-organizationid-------------users--this-decorated-findbyorganizationorganizationid-------------------------cache-individuel-pour-chaque-utilisateur------------foreach-users-as-user-----------------this-cache-setuser_user-id-value-user-3600------------------------------------return-users---------1800--ttl-de-30-minutes------quand-utiliser-les-repositories---cas-d--abstraction-de-persistance--changer-de-technologie-de-stockage--tests-unitaires--mocker-facilement-lacc%c3%a8s-aux-donn%c3%a9es--logique-m%c3%a9tier-complexe--encapsuler-la-logique-dacc%c3%a8s--performance--optimiser-les-requ%c3%aates--cas-d--applications-simples--crud-basique--over-engineering--complexit%c3%a9-inutile--performance-critique--overhead-des-abstractions--prototypage--d%c3%a9veloppement-rapide--migration-vers-les-repositories-%c3%a9tape-1--identifier-les-acc%c3%a8s-aux-donn%c3%a9es--lister-tous-les-acc%c3%a8s-aux-donn%c3%a9es--grouper-par-entit%c3%a9-m%c3%a9tier-%c3%a9tape-2--cr%c3%a9er-les-interfaces--d%c3%a9finir-les-contrats-repository--sp%c3%a9cifier-les-m%c3%a9thodes-n%c3%a9cessaires-%c3%a9tape-3--impl%c3%a9menter-les-repositories--cr%c3%a9er-les-impl%c3%a9mentations--migrer-progressivement-%c3%a9tape-4--optimiser--ajouter-le-cache-si-n%c3%a9cessaire--optimiser-les-requ%c3%aates--m%c3%a9triques-et-monitoring-m%c3%a9triques-repository--temps-de-r%c3%a9ponse-des-requ%c3%aates--taux-de-cache-hit--nombre-de-requ%c3%aates-par-seconde-m%c3%a9triques-de-performance--temps-de-traitement-des-requ%c3%aates-complexes--utilisation-m%c3%a9moire--charge-des-bases-de-donn%c3%a9es--prochaines-%c3%a9tapesmaintenant-que-vous-comprenez-les-repositories-explorez-1-cqrs--s%c3%a9parer-les-commandes-des-requ%c3%aates2-event-sourcing--stocker-les-%c3%a9v%c3%a9nements-comme-source-de-v%c3%a9rit%c3%a93-impl%c3%a9mentation-repositories--guide-dimpl%c3%a9mentation-completles-repositories-sont-la-pierre-angulaire-d" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;</description></item></channel></rss>